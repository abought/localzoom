{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/bin.js","datasource-shim.js","js/exports-sources.js","js/lh3utils.js","js/sha1.js","js/spans.js","js/tabix.js","js/utils.js","node_modules/es6-promise/dist/es6-promise.js","node_modules/jszlib/js/inflate.js","node_modules/process/browser.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","BlobFetchable","b","this","blob","URLFetchable","url","start","end","opts","_typeof","undefined","bstringToBuffer","result","ba","Uint8Array","charCodeAt","buffer","readFloat","buf","offset","fa","readInt64","readInt64LE","M1","M2","M3","M4","M5","readInt64BE","readInt","readShort","readByte","readIntBE","Symbol","iterator","obj","constructor","prototype","utils","shallowCopy","sha1","b64_sha1","Promise","slice","webkitSlice","salted","FileReader","fetch","callback","reader","onloadend","ev","readAsBinaryString","FileReaderSync","res","readAsArrayBuffer","s","l","ns","ne","seed","isSafari","navigator","userAgent","indexOf","fetchAsText","thisB","getURL","then","req","XMLHttpRequest","salt","Date","now","open","setRequestHeader","onreadystatechange","readyState","status","responseText","credentials","withCredentials","send","err","console","log","resolver","urlOrObj","resolve","attempt","truncatedLength","timeout","setTimeout","abort","overrideMimeType","responseType","clearTimeout","response","bl","byteLength","mozResponseArrayBuffer","convertBuffer","ArrayBuffer","Float32Array","./sha1","./utils","es6-promise","2","urlReader","dataUrl","indexUrl","reject","connectTabix","blobReader","data_file","tabix_file","window","../js/bin","../js/tabix","3","Vob","block","readVob","allowZero","bint","unbgzf","data","lim","Math","min","oBlockList","ptr","totalSize","xlen","unc","jszlib_inflate_buffer","push","out","cursor","arrayCopy","Chunk","minv","maxv","reg2bin","beg","reg2bins","k","list","jszlib","inflateBuffer","toString","4","hex_sha1","rstr2hex","rstr_sha1","str2rstr_utf8","rstr2b64","binb2rstr","binb_sha1","rstr2binb","input","x","hex_tab","hexcase","output","charAt","tab","len","triplet","j","b64pad","y","String","fromCharCode","Array","w","d","olda","oldb","oldc","oldd","olde","bit_rol","safe_add","sha1_ft","sha1_kt","lsw","msw","num","cnt","5","Range","max","_min","_max","_Compound","ranges","sorted","sort","_rangeOrder","merged","current","shift","forEach","range","_ranges","union","s0","s1","insertRange","intersection","r0","r1","l0","l1","i0","i1","or","lapMin","lapMax","coverage","tot","rl","ri","rangeOrder","contains","pos","isContiguous","_pushRanges","lower_bound","m","floor","lb","splice","ub","rangeOver","6","TabixFile","tbi","tabix","header","unchead","uncba","magic","TABIX_MAGIC","nref","format","colSeq","colStart","colEnd","meta","skip","indices","chrToIndex","indexToChr","name","ch","substring","minBlockIndex","ref","blockStart","nbin","nchnk","nintv","q","v","bi","headerMax","spans","bin","lh3utils","blocksForRange","refId","index","intBinsL","intBins","leafChunks","otherChunks","cs","ce","lowest","minLin","maxLin","prunedOtherChunks","chnk","intChunks","c0","c1","dif","mergedChunks","cur","nc","chr","tramp","chunks","records","readRecords","canonicalChr","fetchMin","fetchMax","chrId","sink","LINE_LOOP","line","toks","split","fmin","parseInt","fmax","fetchHeader","defaults","metaOnly","skipped","nLines","Object","keys","key","hasOwnProperty","self","lines","./bin","./lh3utils","./spans","7","pushnew","pusho","pushnewo","pick","arrayEquals","arrayIndexOf","arrayRemove","makeElement","tag","children","attribs","styles","ele","document","createElement","createTextNode","appendChild","style","makeElementNS","namespace","createElementNS","setAttrs","setAttr","node","value","attr","attr_name_cache","_attr","cc","lcc","toLowerCase","setAttribute","removeChildren","childNodes","removeChild","firstChild","miniJSONify","exc","Observed","listeners","Awaited","queue","saltURL","__dalliance_saltSeed","textXHR","relativeURL","base","rel","li","lastIndexOf","substr","resolveUrlToPage","href","RegExp","addListener","addListenerAndFire","removeListener","get","set","provide","await","AMINO_ACID_TRANSLATION","TTT","TTC","TTA","TTG","CTT","CTC","CTA","CTG","ATT","ATC","ATA","ATG","GTT","GTC","GTA","GTG","TCT","TCC","TCA","TCG","CCT","CCC","CCA","CCG","ACT","ACC","ACA","ACG","GCT","GCC","GCA","GCG","TAT","TAC","TAA","TAG","CAT","CAC","CAA","CAG","AAT","AAC","AAA","AAG","GAT","GAC","GAA","GAG","TGT","TGC","TGA","TGG","CGT","CGC","CGA","CGG","AGT","AGC","AGA","AGG","GGT","GGC","GGA","GGG","trim","replace","8","process","global","lib$es6$promise$utils$$objectOrFunction","lib$es6$promise$utils$$isFunction","lib$es6$promise$utils$$isMaybeThenable","lib$es6$promise$asap$$setScheduler","scheduleFn","lib$es6$promise$asap$$customSchedulerFn","lib$es6$promise$asap$$setAsap","asapFn","lib$es6$promise$asap$$asap","lib$es6$promise$asap$$useNextTick","nextTick","lib$es6$promise$asap$$flush","lib$es6$promise$asap$$useVertxTimer","lib$es6$promise$asap$$vertxNext","lib$es6$promise$asap$$useMutationObserver","iterations","observer","lib$es6$promise$asap$$BrowserMutationObserver","observe","characterData","lib$es6$promise$asap$$useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","lib$es6$promise$asap$$useSetTimeout","lib$es6$promise$asap$$len","lib$es6$promise$asap$$queue","arg","lib$es6$promise$asap$$attemptVertx","vertx","runOnLoop","runOnContext","lib$es6$promise$$internal$$noop","lib$es6$promise$$internal$$selfFulfillment","TypeError","lib$es6$promise$$internal$$cannotReturnOwn","lib$es6$promise$$internal$$getThen","promise","error","lib$es6$promise$$internal$$GET_THEN_ERROR","lib$es6$promise$$internal$$tryThen","fulfillmentHandler","rejectionHandler","lib$es6$promise$$internal$$handleForeignThenable","thenable","sealed","lib$es6$promise$$internal$$resolve","lib$es6$promise$$internal$$fulfill","reason","lib$es6$promise$$internal$$reject","_label","lib$es6$promise$$internal$$handleOwnThenable","_state","lib$es6$promise$$internal$$FULFILLED","_result","lib$es6$promise$$internal$$REJECTED","lib$es6$promise$$internal$$subscribe","lib$es6$promise$$internal$$handleMaybeThenable","maybeThenable","lib$es6$promise$$internal$$publishRejection","_onerror","lib$es6$promise$$internal$$publish","lib$es6$promise$$internal$$PENDING","_subscribers","parent","child","onFulfillment","onRejection","subscribers","settled","detail","lib$es6$promise$$internal$$invokeCallback","lib$es6$promise$$internal$$ErrorObject","lib$es6$promise$$internal$$tryCatch","lib$es6$promise$$internal$$TRY_CATCH_ERROR","succeeded","failed","hasCallback","lib$es6$promise$$internal$$initializePromise","lib$es6$promise$enumerator$$Enumerator","Constructor","enumerator","_instanceConstructor","_validateInput","_input","_remaining","_init","_enumerate","_validationError","lib$es6$promise$promise$all$$all","entries","lib$es6$promise$enumerator$$default","lib$es6$promise$promise$race$$race","lib$es6$promise$utils$$isArray","lib$es6$promise$promise$resolve$$resolve","object","lib$es6$promise$promise$reject$$reject","lib$es6$promise$promise$$needsResolver","lib$es6$promise$promise$$needsNew","lib$es6$promise$promise$$Promise","_id","lib$es6$promise$promise$$counter","lib$es6$promise$polyfill$$polyfill","local","Function","P","cast","lib$es6$promise$promise$$default","lib$es6$promise$utils$$_isArray","isArray","lib$es6$promise$asap$$scheduleFlush","lib$es6$promise$asap$$browserWindow","lib$es6$promise$asap$$browserGlobal","MutationObserver","WebKitMutationObserver","lib$es6$promise$asap$$isNode","lib$es6$promise$asap$$isWorker","Uint8ClampedArray","importScripts","_eachEntry","entry","_settledAt","_willSettleAt","state","lib$es6$promise$promise$all$$default","lib$es6$promise$promise$race$$default","lib$es6$promise$promise$resolve$$default","lib$es6$promise$promise$reject$$default","all","race","_setScheduler","_setAsap","_asap","arguments","catch","lib$es6$promise$polyfill$$default","lib$es6$promise$umd$$ES6Promise","polyfill","define","_process","9","ZStream","Inflate","was","InfBlocks","z","checkfn","hufts","Int32Array","MANY","mode","IB_TYPE","reset","left","table","blens","bb","tb","codes","InfCodes","last","bitk","bitb","read","write","check","inftree","InfTree","inflate_trees_fixed","bd","tl","td","fixed_bl","fixed_bd","fixed_tl","fixed_td","Z_OK","src","srcOffset","dest","destOffset","count","arrayCopy_fast","hasSubarray","subarray","BYTES_PER_ELEMENT","byteOffset","arrayCopy_slow","afterUncOffset","inflateInit","DEF_WBITS","next_in","next_in_index","avail_in","obuf","next_out","next_out_index","avail_out","inflate","Z_NO_FLUSH","Z_STREAM_END","Z_BUF_ERROR","msg","newob","MAX_WBITS","BMAX","PRESET_DICT","Z_FINISH","Z_DEFLATED","Z_NEED_DICT","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","METHOD","FLAG","DICT4","DICT3","DICT2","DICT1","DICT0","BLOCKS","CHECK4","CHECK3","CHECK2","CHECK1","DONE","BAD","inflate_mask","IB_LENS","IB_STORED","IB_TABLE","IB_BTREE","IB_DTREE","IB_CODES","IB_DRY","IB_DONE","IB_BAD","cplens","cplext","cpdist","cpdext","nowrap","istate","inflateEnd","ret","inflateSync","inflateSetDictionary","dictionary","dictLength","inflateReset","total_in","total_out","blocks","free","wbits","method","marker","need","adler","proc","_adler","adler32","set_dictionary","mark","inflateSyncPoint","sync_point","INFBLOCKS_BORDER","inflate_flush","init","inflate_trees_bits","inflate_trees_dynamic","IC_START","IC_LEN","IC_LENEXT","IC_DIST","IC_DISTEXT","IC_COPY","IC_LIT","IC_WASH","IC_END","IC_BADCODE","tl_index","td_index","lbits","dbits","ltree","ltree_index","dtree","dtree_index","tree","tindex","inflate_fast","tree_index","lit","dist","tp","tp_index","ml","md","tp_index_t_3","huft_build","bindex","hp","hn","g","h","mask","xp","initWorkArea","nl","nd","vsize","testArray","10","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","concat","queueIndex","drainQueue","run","Item","array","noop","args","apply","title","browser","env","argv","version","versions","on","once","off","removeAllListeners","emit","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask"],"mappings":"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AA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAEA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EA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","file":"datasource-shim.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// bin.js general binary data support\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var utils = require('./utils');\n    var shallowCopy = utils.shallowCopy;\n\n    var sha1 = require('./sha1');\n    var b64_sha1 = sha1.b64_sha1;\n\n    var Promise = require('es6-promise').Promise;\n}\n\nfunction BlobFetchable(b) {\n    this.blob = b;\n}\n\nBlobFetchable.prototype.slice = function(start, length) {\n    var b;\n\n    if (this.blob.slice) {\n        if (length) {\n            b = this.blob.slice(start, start + length);\n        } else {\n            b = this.blob.slice(start);\n        }\n    } else {\n        if (length) {\n            b = this.blob.webkitSlice(start, start + length);\n        } else {\n            b = this.blob.webkitSlice(start);\n        }\n    }\n    return new BlobFetchable(b);\n}\n\nBlobFetchable.prototype.salted = function() {return this;}\n\nif (typeof(FileReader) !== 'undefined') {\n    // console.log('defining async BlobFetchable.fetch');\n\n    BlobFetchable.prototype.fetch = function(callback) {\n        var reader = new FileReader();\n        reader.onloadend = function(ev) {\n            callback(bstringToBuffer(reader.result));\n        };\n        reader.readAsBinaryString(this.blob);\n    }\n\n} else {\n    // if (console && console.log)\n    //    console.log('defining sync BlobFetchable.fetch');\n\n    BlobFetchable.prototype.fetch = function(callback) {\n        var reader = new FileReaderSync();\n        try {\n            var res = reader.readAsArrayBuffer(this.blob);\n            callback(res);\n        } catch (e) {\n            callback(null, e);\n        }\n    }\n}\n\nfunction URLFetchable(url, start, end, opts) {\n    if (!opts) {\n        if (typeof start === 'object') {\n            opts = start;\n            start = undefined;\n        } else {\n            opts = {};\n        }\n    }\n\n    this.url = url;\n    this.start = start || 0;\n    if (end) {\n        this.end = end;\n    }\n    this.opts = opts;\n}\n\nURLFetchable.prototype.slice = function(s, l) {\n    if (s < 0) {\n        throw 'Bad slice ' + s;\n    }\n\n    var ns = this.start, ne = this.end;\n    if (ns && s) {\n        ns = ns + s;\n    } else {\n        ns = s || ns;\n    }\n    if (l && ns) {\n        ne = ns + l - 1;\n    } else {\n        ne = ne || l - 1;\n    }\n    return new URLFetchable(this.url, ns, ne, this.opts);\n}\n\nvar seed=0;\nvar isSafari = typeof(navigator) !== 'undefined' &&\n    navigator.userAgent.indexOf('Safari') >= 0 &&\n    navigator.userAgent.indexOf('Chrome') < 0 ;\n\nURLFetchable.prototype.fetchAsText = function(callback) {\n    var thisB = this;\n\n    this.getURL().then(function(url) {\n        try {\n            var req = new XMLHttpRequest();\n            var length;\n            if ((isSafari || thisB.opts.salt) && url.indexOf('?') < 0) {\n                url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++seed));\n            }\n            req.open('GET', url, true);\n            \n            if (thisB.end) {\n                if (thisB.end - thisB.start > 100000000) {\n                    throw 'Monster fetch!';\n                }\n                req.setRequestHeader('Range', 'bytes=' + thisB.start + '-' + thisB.end);\n                length = thisB.end - thisB.start + 1;\n            }\n\n            req.onreadystatechange = function() {\n                if (req.readyState == 4) {\n                    if (req.status == 200 || req.status == 206) {\n                        return callback(req.responseText);\n                    } else {\n                        return callback(null);\n                    }\n                }\n            };\n            if (thisB.opts.credentials) {\n                req.withCredentials = true;\n            }\n            req.send();\n        } catch (e) {\n            return callback(null);\n        }\n    }).catch(function(err) {\n        console.log(err);\n        return callback(null, err);\n    });\n}\n\nURLFetchable.prototype.salted = function() {\n    var o = shallowCopy(this.opts);\n    o.salt = true;\n    return new URLFetchable(this.url, this.start, this.end, o);\n}\n\nURLFetchable.prototype.getURL = function() {\n    if (this.opts.resolver) {\n        return this.opts.resolver(this.url).then(function (urlOrObj) {\n            if (typeof urlOrObj === 'string') {\n                return urlOrObj;\n            } else {\n                return urlOrObj.url;\n            }\n        });\n    } else {\n        return Promise.resolve(this.url);\n    }\n}\n\nURLFetchable.prototype.fetch = function(callback, opts) {\n    var thisB = this;\n \n    opts = opts || {};\n    var attempt = opts.attempt || 1;\n    var truncatedLength = opts.truncatedLength;\n    if (attempt > 3) {\n        return callback(null);\n    }\n\n    this.getURL().then(function(url) {\n        try {\n            var timeout;\n            if (opts.timeout && !thisB.opts.credentials) {\n                timeout = setTimeout(\n                    function() {\n                        console.log('timing out ' + url);\n                        req.abort();\n                        return callback(null, 'Timeout');\n                    },\n                    opts.timeout\n                );\n            }\n            \n            var req = new XMLHttpRequest();\n            var length;\n            if ((isSafari || thisB.opts.salt) && url.indexOf('?') < 0) {\n                url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++seed));\n            }\n            req.open('GET', url, true);\n            req.overrideMimeType('text/plain; charset=x-user-defined');\n            if (thisB.end) {\n                if (thisB.end - thisB.start > 100000000) {\n                    throw 'Monster fetch!';\n                }\n                req.setRequestHeader('Range', 'bytes=' + thisB.start + '-' + thisB.end);\n                length = thisB.end - thisB.start + 1;\n            }\n            req.responseType = 'arraybuffer';\n            req.onreadystatechange = function() {\n                if (req.readyState == 4) {\n                    if (timeout)\n                        clearTimeout(timeout);\n                    if (req.status == 200 || req.status == 206) {\n                        if (req.response) {\n                            var bl = req.response.byteLength;\n                            if (length && length != bl && (!truncatedLength || bl != truncatedLength)) {\n                                return thisB.fetch(callback, {attempt: attempt + 1, truncatedLength: bl});\n                            } else {\n                                return callback(req.response);\n                            }\n                        } else if (req.mozResponseArrayBuffer) {\n                            return callback(req.mozResponseArrayBuffer);\n                        } else {\n                            var r = req.responseText;\n                            if (length && length != r.length && (!truncatedLength || r.length != truncatedLength)) {\n                                return thisB.fetch(callback, {attempt: attempt + 1, truncatedLength: r.length});\n                            } else {\n                                return callback(bstringToBuffer(req.responseText));\n                            }\n                        }\n                    } else {\n                        return thisB.fetch(callback, {attempt: attempt + 1});\n                    }\n                }\n            };\n            if (thisB.opts.credentials) {\n                req.withCredentials = true;\n            }\n            req.send();\n        } catch (e) {\n            return callback(null);\n        }\n    }).catch(function(err) {\n        console.log(err);\n        return callback(null, err);\n    });\n}\n                       \nfunction bstringToBuffer(result) {\n    if (!result) {\n        return null;\n    }\n\n    var ba = new Uint8Array(result.length);\n    for (var i = 0; i < ba.length; ++i) {\n        ba[i] = result.charCodeAt(i);\n    }\n    return ba.buffer;\n}\n\n// Read from Uint8Array\n\nvar convertBuffer = new ArrayBuffer(8);\nvar ba = new Uint8Array(convertBuffer);\nvar fa = new Float32Array(convertBuffer);\n\nfunction readFloat(buf, offset) {\n    ba[0] = buf[offset];\n    ba[1] = buf[offset+1];\n    ba[2] = buf[offset+2];\n    ba[3] = buf[offset+3];\n    return fa[0];\n}\n\nfunction readInt64(ba, offset) {\n    return (ba[offset + 7] << 24) | (ba[offset + 6] << 16) | (ba[offset + 5] << 8) | (ba[offset + 4]);\n}\n\nconst M1 = 256,\n      M2 = M1 * 256,\n      M3 = M2 * 256,\n      M4 = M3 * 256,\n      M5 = M4 * 256;\n\nfunction readInt64LE(ba, offset) {\n    return (ba[offset]) + (ba[offset + 1] * M1) + (ba[offset + 2] * M2) + (ba[offset + 3] * M3) + (ba[offset + 4] * M4) + (ba[offset + 5] * M5);\n}\n\nfunction readInt64BE(ba, offset) {\n    return (ba[offset + 7]) + (ba[offset + 6] * M1) + (ba[offset + 5] * M2) + (ba[offset + 4] * M3) + (ba[offset + 3] * M4) + (ba[offset + 2] * M5);\n}\n\nfunction readInt(ba, offset) {\n    return (ba[offset + 3] << 24) | (ba[offset + 2] << 16) | (ba[offset + 1] << 8) | (ba[offset]);\n}\n\nfunction readShort(ba, offset) {\n    return (ba[offset + 1] << 8) | (ba[offset]);\n}\n\nfunction readByte(ba, offset) {\n    return ba[offset];\n}\n\nfunction readIntBE(ba, offset) {\n    return (ba[offset] << 24) | (ba[offset + 1] << 16) | (ba[offset + 2] << 8) | (ba[offset + 3]);\n}\n\n// Exports if we are being used as a module\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        BlobFetchable: BlobFetchable,\n        URLFetchable: URLFetchable,\n\n        readInt: readInt,\n        readIntBE: readIntBE,\n        readInt64: readInt64,\n        readInt64LE: readInt64LE,\n        readInt64BE: readInt64BE,\n        readShort: readShort,\n        readByte: readByte,\n        readFloat: readFloat\n    }\n}\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// bin.js general binary data support\n//\n\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nif (typeof require !== 'undefined') {\n    var utils = require('./utils');\n    var shallowCopy = utils.shallowCopy;\n\n    var sha1 = require('./sha1');\n    var b64_sha1 = sha1.b64_sha1;\n\n    var Promise = require('es6-promise').Promise;\n}\n\nfunction BlobFetchable(b) {\n    this.blob = b;\n}\n\nBlobFetchable.prototype.slice = function (start, length) {\n    var b;\n\n    if (this.blob.slice) {\n        if (length) {\n            b = this.blob.slice(start, start + length);\n        } else {\n            b = this.blob.slice(start);\n        }\n    } else {\n        if (length) {\n            b = this.blob.webkitSlice(start, start + length);\n        } else {\n            b = this.blob.webkitSlice(start);\n        }\n    }\n    return new BlobFetchable(b);\n};\n\nBlobFetchable.prototype.salted = function () {\n    return this;\n};\n\nif (typeof FileReader !== 'undefined') {\n    // console.log('defining async BlobFetchable.fetch');\n\n    BlobFetchable.prototype.fetch = function (callback) {\n        var reader = new FileReader();\n        reader.onloadend = function (ev) {\n            callback(bstringToBuffer(reader.result));\n        };\n        reader.readAsBinaryString(this.blob);\n    };\n} else {\n    // if (console && console.log)\n    //    console.log('defining sync BlobFetchable.fetch');\n\n    BlobFetchable.prototype.fetch = function (callback) {\n        var reader = new FileReaderSync();\n        try {\n            var res = reader.readAsArrayBuffer(this.blob);\n            callback(res);\n        } catch (e) {\n            callback(null, e);\n        }\n    };\n}\n\nfunction URLFetchable(url, start, end, opts) {\n    if (!opts) {\n        if ((typeof start === 'undefined' ? 'undefined' : _typeof(start)) === 'object') {\n            opts = start;\n            start = undefined;\n        } else {\n            opts = {};\n        }\n    }\n\n    this.url = url;\n    this.start = start || 0;\n    if (end) {\n        this.end = end;\n    }\n    this.opts = opts;\n}\n\nURLFetchable.prototype.slice = function (s, l) {\n    if (s < 0) {\n        throw 'Bad slice ' + s;\n    }\n\n    var ns = this.start,\n        ne = this.end;\n    if (ns && s) {\n        ns = ns + s;\n    } else {\n        ns = s || ns;\n    }\n    if (l && ns) {\n        ne = ns + l - 1;\n    } else {\n        ne = ne || l - 1;\n    }\n    return new URLFetchable(this.url, ns, ne, this.opts);\n};\n\nvar seed = 0;\nvar isSafari = typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Safari') >= 0 && navigator.userAgent.indexOf('Chrome') < 0;\n\nURLFetchable.prototype.fetchAsText = function (callback) {\n    var thisB = this;\n\n    this.getURL().then(function (url) {\n        try {\n            var req = new XMLHttpRequest();\n            var length;\n            if ((isSafari || thisB.opts.salt) && url.indexOf('?') < 0) {\n                url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + ++seed);\n            }\n            req.open('GET', url, true);\n\n            if (thisB.end) {\n                if (thisB.end - thisB.start > 100000000) {\n                    throw 'Monster fetch!';\n                }\n                req.setRequestHeader('Range', 'bytes=' + thisB.start + '-' + thisB.end);\n                length = thisB.end - thisB.start + 1;\n            }\n\n            req.onreadystatechange = function () {\n                if (req.readyState == 4) {\n                    if (req.status == 200 || req.status == 206) {\n                        return callback(req.responseText);\n                    } else {\n                        return callback(null);\n                    }\n                }\n            };\n            if (thisB.opts.credentials) {\n                req.withCredentials = true;\n            }\n            req.send();\n        } catch (e) {\n            return callback(null);\n        }\n    }).catch(function (err) {\n        console.log(err);\n        return callback(null, err);\n    });\n};\n\nURLFetchable.prototype.salted = function () {\n    var o = shallowCopy(this.opts);\n    o.salt = true;\n    return new URLFetchable(this.url, this.start, this.end, o);\n};\n\nURLFetchable.prototype.getURL = function () {\n    if (this.opts.resolver) {\n        return this.opts.resolver(this.url).then(function (urlOrObj) {\n            if (typeof urlOrObj === 'string') {\n                return urlOrObj;\n            } else {\n                return urlOrObj.url;\n            }\n        });\n    } else {\n        return Promise.resolve(this.url);\n    }\n};\n\nURLFetchable.prototype.fetch = function (callback, opts) {\n    var thisB = this;\n\n    opts = opts || {};\n    var attempt = opts.attempt || 1;\n    var truncatedLength = opts.truncatedLength;\n    if (attempt > 3) {\n        return callback(null);\n    }\n\n    this.getURL().then(function (url) {\n        try {\n            var timeout;\n            if (opts.timeout && !thisB.opts.credentials) {\n                timeout = setTimeout(function () {\n                    console.log('timing out ' + url);\n                    req.abort();\n                    return callback(null, 'Timeout');\n                }, opts.timeout);\n            }\n\n            var req = new XMLHttpRequest();\n            var length;\n            if ((isSafari || thisB.opts.salt) && url.indexOf('?') < 0) {\n                url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + ++seed);\n            }\n            req.open('GET', url, true);\n            req.overrideMimeType('text/plain; charset=x-user-defined');\n            if (thisB.end) {\n                if (thisB.end - thisB.start > 100000000) {\n                    throw 'Monster fetch!';\n                }\n                req.setRequestHeader('Range', 'bytes=' + thisB.start + '-' + thisB.end);\n                length = thisB.end - thisB.start + 1;\n            }\n            req.responseType = 'arraybuffer';\n            req.onreadystatechange = function () {\n                if (req.readyState == 4) {\n                    if (timeout) clearTimeout(timeout);\n                    if (req.status == 200 || req.status == 206) {\n                        if (req.response) {\n                            var bl = req.response.byteLength;\n                            if (length && length != bl && (!truncatedLength || bl != truncatedLength)) {\n                                return thisB.fetch(callback, { attempt: attempt + 1, truncatedLength: bl });\n                            } else {\n                                return callback(req.response);\n                            }\n                        } else if (req.mozResponseArrayBuffer) {\n                            return callback(req.mozResponseArrayBuffer);\n                        } else {\n                            var r = req.responseText;\n                            if (length && length != r.length && (!truncatedLength || r.length != truncatedLength)) {\n                                return thisB.fetch(callback, { attempt: attempt + 1, truncatedLength: r.length });\n                            } else {\n                                return callback(bstringToBuffer(req.responseText));\n                            }\n                        }\n                    } else {\n                        return thisB.fetch(callback, { attempt: attempt + 1 });\n                    }\n                }\n            };\n            if (thisB.opts.credentials) {\n                req.withCredentials = true;\n            }\n            req.send();\n        } catch (e) {\n            return callback(null);\n        }\n    }).catch(function (err) {\n        console.log(err);\n        return callback(null, err);\n    });\n};\n\nfunction bstringToBuffer(result) {\n    if (!result) {\n        return null;\n    }\n\n    var ba = new Uint8Array(result.length);\n    for (var i = 0; i < ba.length; ++i) {\n        ba[i] = result.charCodeAt(i);\n    }\n    return ba.buffer;\n}\n\n// Read from Uint8Array\n\nvar convertBuffer = new ArrayBuffer(8);\nvar ba = new Uint8Array(convertBuffer);\nvar fa = new Float32Array(convertBuffer);\n\nfunction readFloat(buf, offset) {\n    ba[0] = buf[offset];\n    ba[1] = buf[offset + 1];\n    ba[2] = buf[offset + 2];\n    ba[3] = buf[offset + 3];\n    return fa[0];\n}\n\nfunction readInt64(ba, offset) {\n    return ba[offset + 7] << 24 | ba[offset + 6] << 16 | ba[offset + 5] << 8 | ba[offset + 4];\n}\n\nvar M1 = 256,\n    M2 = M1 * 256,\n    M3 = M2 * 256,\n    M4 = M3 * 256,\n    M5 = M4 * 256;\n\nfunction readInt64LE(ba, offset) {\n    return ba[offset] + ba[offset + 1] * M1 + ba[offset + 2] * M2 + ba[offset + 3] * M3 + ba[offset + 4] * M4 + ba[offset + 5] * M5;\n}\n\nfunction readInt64BE(ba, offset) {\n    return ba[offset + 7] + ba[offset + 6] * M1 + ba[offset + 5] * M2 + ba[offset + 4] * M3 + ba[offset + 3] * M4 + ba[offset + 2] * M5;\n}\n\nfunction readInt(ba, offset) {\n    return ba[offset + 3] << 24 | ba[offset + 2] << 16 | ba[offset + 1] << 8 | ba[offset];\n}\n\nfunction readShort(ba, offset) {\n    return ba[offset + 1] << 8 | ba[offset];\n}\n\nfunction readByte(ba, offset) {\n    return ba[offset];\n}\n\nfunction readIntBE(ba, offset) {\n    return ba[offset] << 24 | ba[offset + 1] << 16 | ba[offset + 2] << 8 | ba[offset + 3];\n}\n\n// Exports if we are being used as a module\n\nif (typeof module !== 'undefined') {\n    module.exports = {\n        BlobFetchable: BlobFetchable,\n        URLFetchable: URLFetchable,\n\n        readInt: readInt,\n        readIntBE: readIntBE,\n        readInt64: readInt64,\n        readInt64LE: readInt64LE,\n        readInt64BE: readInt64BE,\n        readShort: readShort,\n        readByte: readByte,\n        readFloat: readFloat\n    };\n}\n\n},{\"./sha1\":4,\"./utils\":7,\"es6-promise\":8}],2:[function(require,module,exports){\n'use strict';\n\nvar connectTabix = require('../js/tabix').connectTabix;\nvar URLFetchable = require('../js/bin').URLFetchable;\nvar BlobFetchable = require('../js/bin').BlobFetchable;\n\n// Wrap the reader in a Promise API for LZ compatibility\nfunction urlReader(dataUrl, indexUrl) {\n    return new Promise(function (resolve, reject) {\n        connectTabix(new URLFetchable(dataUrl), new URLFetchable(indexUrl), function (reader, err) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(reader);\n            }\n        });\n    });\n}\n\nfunction blobReader(data_file, tabix_file) {\n    return new Promise(function (resolve, reject) {\n        connectTabix(new BlobFetchable(data_file), new BlobFetchable(tabix_file), function (reader, err) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(reader);\n            }\n        });\n    });\n}\n\nwindow.urlReader = urlReader;\nwindow.blobReader = blobReader;\n\n},{\"../js/bin\":1,\"../js/tabix\":6}],3:[function(require,module,exports){\n'use strict';\n\n/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// lh3utils.js: common support for lh3's file formats\n//\n\nif (typeof require !== 'undefined') {\n    var jszlib = require('jszlib');\n    var jszlib_inflate_buffer = jszlib.inflateBuffer;\n    var arrayCopy = jszlib.arrayCopy;\n}\n\nfunction Vob(b, o) {\n    this.block = b;\n    this.offset = o;\n}\n\nVob.prototype.toString = function () {\n    return '' + this.block + ':' + this.offset;\n};\n\nfunction readVob(ba, offset, allowZero) {\n    var block = (ba[offset + 6] & 0xff) * 0x100000000 + (ba[offset + 5] & 0xff) * 0x1000000 + (ba[offset + 4] & 0xff) * 0x10000 + (ba[offset + 3] & 0xff) * 0x100 + (ba[offset + 2] & 0xff);\n    var bint = ba[offset + 1] << 8 | ba[offset];\n    if (block == 0 && bint == 0 && !allowZero) {\n        return null; // Should only happen in the linear index?\n    } else {\n        return new Vob(block, bint);\n    }\n}\n\nfunction unbgzf(data, lim) {\n    lim = Math.min(lim || 1, data.byteLength - 50);\n    var oBlockList = [];\n    var ptr = [0];\n    var totalSize = 0;\n\n    while (ptr[0] < lim) {\n        var ba = new Uint8Array(data, ptr[0], 12); // FIXME is this enough for all credible BGZF block headers?\n        var xlen = ba[11] << 8 | ba[10];\n        // dlog('xlen[' + (ptr[0]) +']=' + xlen);\n        var unc = jszlib_inflate_buffer(data, 12 + xlen + ptr[0], Math.min(65536, data.byteLength - 12 - xlen - ptr[0]), ptr);\n        ptr[0] += 8;\n        totalSize += unc.byteLength;\n        oBlockList.push(unc);\n    }\n\n    if (oBlockList.length == 1) {\n        return oBlockList[0];\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = new Uint8Array(oBlockList[i]);\n            arrayCopy(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n}\n\nfunction Chunk(minv, maxv) {\n    this.minv = minv;this.maxv = maxv;\n}\n\n//\n// Binning (transliterated from SAM1.3 spec)\n//\n\n/* calculate bin given an alignment covering [beg,end) (zero-based, half-close-half-open) */\nfunction reg2bin(beg, end) {\n    --end;\n    if (beg >> 14 == end >> 14) return ((1 << 15) - 1) / 7 + (beg >> 14);\n    if (beg >> 17 == end >> 17) return ((1 << 12) - 1) / 7 + (beg >> 17);\n    if (beg >> 20 == end >> 20) return ((1 << 9) - 1) / 7 + (beg >> 20);\n    if (beg >> 23 == end >> 23) return ((1 << 6) - 1) / 7 + (beg >> 23);\n    if (beg >> 26 == end >> 26) return ((1 << 3) - 1) / 7 + (beg >> 26);\n    return 0;\n}\n\n/* calculate the list of bins that may overlap with region [beg,end) (zero-based) */\nvar MAX_BIN = ((1 << 18) - 1) / 7;\nfunction reg2bins(beg, end) {\n    var i = 0,\n        k,\n        list = [];\n    --end;\n    list.push(0);\n    for (k = 1 + (beg >> 26); k <= 1 + (end >> 26); ++k) {\n        list.push(k);\n    }for (k = 9 + (beg >> 23); k <= 9 + (end >> 23); ++k) {\n        list.push(k);\n    }for (k = 73 + (beg >> 20); k <= 73 + (end >> 20); ++k) {\n        list.push(k);\n    }for (k = 585 + (beg >> 17); k <= 585 + (end >> 17); ++k) {\n        list.push(k);\n    }for (k = 4681 + (beg >> 14); k <= 4681 + (end >> 14); ++k) {\n        list.push(k);\n    }return list;\n}\n\nif (typeof module !== 'undefined') {\n    module.exports = {\n        unbgzf: unbgzf,\n        readVob: readVob,\n        reg2bin: reg2bin,\n        reg2bins: reg2bins,\n        Chunk: Chunk\n    };\n}\n\n},{\"jszlib\":9}],4:[function(require,module,exports){\n/*\r\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n * in FIPS 180-1\r\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\r\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n * Distributed under the BSD License\r\n * See http://pajhome.org.uk/crypt/md5 for details.\r\n */\n\n\"use strict\";\n\n/*\r\n * Configurable variables. You may need to tweak these to be compatible with\r\n * the server-side, but the defaults work in most cases.\r\n */\n\nvar hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase        */\nvar b64pad = \"\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\n\n/*\r\n * These are the functions you'll usually want to call\r\n * They take string arguments and return either hex or base-64 encoded strings\r\n */\nfunction hex_sha1(s) {\n  return rstr2hex(rstr_sha1(str2rstr_utf8(s)));\n}\nfunction b64_sha1(s) {\n  return rstr2b64(rstr_sha1(str2rstr_utf8(s)));\n}\nfunction any_sha1(s, e) {\n  return rstr2any(rstr_sha1(str2rstr_utf8(s)), e);\n}\nfunction hex_hmac_sha1(k, d) {\n  return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\nfunction b64_hmac_sha1(k, d) {\n  return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\nfunction any_hmac_sha1(k, d, e) {\n  return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e);\n}\n\n/*\r\n * Perform a simple self-test to see if the VM is working\r\n */\nfunction sha1_vm_test() {\n  return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\n}\n\n/*\r\n * Calculate the SHA1 of a raw string\r\n */\nfunction rstr_sha1(s) {\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\n}\n\n/*\r\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\r\n */\nfunction rstr_hmac_sha1(key, data) {\n  var bkey = rstr2binb(key);\n  if (bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\n\n  var ipad = Array(16),\n      opad = Array(16);\n  for (var i = 0; i < 16; i++) {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\n}\n\n/*\r\n * Convert a raw string to a hex string\r\n */\nfunction rstr2hex(input) {\n  // try { hexcase } catch(e) { hexcase=0; }\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n  var output = \"\";\n  var x;\n  for (var i = 0; i < input.length; i++) {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt(x >>> 4 & 0x0F) + hex_tab.charAt(x & 0x0F);\n  }\n  return output;\n}\n\n/*\r\n * Convert a raw string to a base-64 string\r\n */\nfunction rstr2b64(input) {\n  // try { b64pad } catch(e) { b64pad=''; }\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var output = \"\";\n  var len = input.length;\n  for (var i = 0; i < len; i += 3) {\n    var triplet = input.charCodeAt(i) << 16 | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);\n    for (var j = 0; j < 4; j++) {\n      if (i * 8 + j * 6 > input.length * 8) output += b64pad;else output += tab.charAt(triplet >>> 6 * (3 - j) & 0x3F);\n    }\n  }\n  return output;\n}\n\n/*\r\n * Convert a raw string to an arbitrary string encoding\r\n */\nfunction rstr2any(input, encoding) {\n  var divisor = encoding.length;\n  var remainders = Array();\n  var i, q, x, quotient;\n\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\n  var dividend = Array(Math.ceil(input.length / 2));\n  for (i = 0; i < dividend.length; i++) {\n    dividend[i] = input.charCodeAt(i * 2) << 8 | input.charCodeAt(i * 2 + 1);\n  }\n\n  /*\r\n   * Repeatedly perform a long division. The binary array forms the dividend,\r\n   * the length of the encoding is the divisor. Once computed, the quotient\r\n   * forms the dividend for the next step. We stop when the dividend is zero.\r\n   * All remainders are stored for later use.\r\n   */\n  while (dividend.length > 0) {\n    quotient = Array();\n    x = 0;\n    for (i = 0; i < dividend.length; i++) {\n      x = (x << 16) + dividend[i];\n      q = Math.floor(x / divisor);\n      x -= q * divisor;\n      if (quotient.length > 0 || q > 0) quotient[quotient.length] = q;\n    }\n    remainders[remainders.length] = x;\n    dividend = quotient;\n  }\n\n  /* Convert the remainders to the output string */\n  var output = \"\";\n  for (i = remainders.length - 1; i >= 0; i--) {\n    output += encoding.charAt(remainders[i]);\n  } /* Append leading zero equivalents */\n  var full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));\n  for (i = output.length; i < full_length; i++) {\n    output = encoding[0] + output;\n  }return output;\n}\n\n/*\r\n * Encode a string as utf-8.\r\n * For efficiency, this assumes the input is valid utf-16.\r\n */\nfunction str2rstr_utf8(input) {\n  var output = \"\";\n  var i = -1;\n  var x, y;\n\n  while (++i < input.length) {\n    /* Decode utf-16 surrogate pairs */\n    x = input.charCodeAt(i);\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n    if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n      i++;\n    }\n\n    /* Encode output as utf-8 */\n    if (x <= 0x7F) output += String.fromCharCode(x);else if (x <= 0x7FF) output += String.fromCharCode(0xC0 | x >>> 6 & 0x1F, 0x80 | x & 0x3F);else if (x <= 0xFFFF) output += String.fromCharCode(0xE0 | x >>> 12 & 0x0F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);else if (x <= 0x1FFFFF) output += String.fromCharCode(0xF0 | x >>> 18 & 0x07, 0x80 | x >>> 12 & 0x3F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);\n  }\n  return output;\n}\n\n/*\r\n * Encode a string as utf-16\r\n */\nfunction str2rstr_utf16le(input) {\n  var output = \"\";\n  for (var i = 0; i < input.length; i++) {\n    output += String.fromCharCode(input.charCodeAt(i) & 0xFF, input.charCodeAt(i) >>> 8 & 0xFF);\n  }return output;\n}\n\nfunction str2rstr_utf16be(input) {\n  var output = \"\";\n  for (var i = 0; i < input.length; i++) {\n    output += String.fromCharCode(input.charCodeAt(i) >>> 8 & 0xFF, input.charCodeAt(i) & 0xFF);\n  }return output;\n}\n\n/*\r\n * Convert a raw string to an array of big-endian words\r\n * Characters >255 have their high-byte silently ignored.\r\n */\nfunction rstr2binb(input) {\n  var output = Array(input.length >> 2);\n  for (var i = 0; i < output.length; i++) {\n    output[i] = 0;\n  }for (var i = 0; i < input.length * 8; i += 8) {\n    output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << 24 - i % 32;\n  }return output;\n}\n\n/*\r\n * Convert an array of big-endian words to a string\r\n */\nfunction binb2rstr(input) {\n  var output = \"\";\n  for (var i = 0; i < input.length * 32; i += 8) {\n    output += String.fromCharCode(input[i >> 5] >>> 24 - i % 32 & 0xFF);\n  }return output;\n}\n\n/*\r\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n */\nfunction binb_sha1(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << 24 - len % 32;\n  x[(len + 64 >> 9 << 4) + 15] = len;\n\n  var w = Array(80);\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n  var e = -1009589776;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n\n    for (var j = 0; j < 80; j++) {\n      if (j < 16) w[j] = x[i + j];else w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = bit_rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return Array(a, b, c, d, e);\n}\n\n/*\r\n * Perform the appropriate triplet combination function for the current\r\n * iteration\r\n */\nfunction sha1_ft(t, b, c, d) {\n  if (t < 20) return b & c | ~b & d;\n  if (t < 40) return b ^ c ^ d;\n  if (t < 60) return b & c | b & d | c & d;\n  return b ^ c ^ d;\n}\n\n/*\r\n * Determine the appropriate additive constant for the current iteration\r\n */\nfunction sha1_kt(t) {\n  return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n}\n\n/*\r\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n * to work around bugs in some JS interpreters.\r\n */\nfunction safe_add(x, y) {\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xFFFF;\n}\n\n/*\r\n * Bitwise rotate a 32-bit number to the left.\r\n */\nfunction bit_rol(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n\nif (typeof module !== 'undefined') {\n  module.exports = {\n    b64_sha1: b64_sha1,\n    hex_sha1: hex_sha1\n  };\n}\n\n},{}],5:[function(require,module,exports){\n/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// spans.js: JavaScript Intset/Location port.\n//\n\n\"use strict\";\n\nfunction Range(min, max) {\n    if (typeof min != 'number' || typeof max != 'number') throw 'Bad range ' + min + ',' + max;\n    this._min = min;\n    this._max = max;\n}\n\nRange.prototype.min = function () {\n    return this._min;\n};\n\nRange.prototype.max = function () {\n    return this._max;\n};\n\nRange.prototype.contains = function (pos) {\n    return pos >= this._min && pos <= this._max;\n};\n\nRange.prototype.isContiguous = function () {\n    return true;\n};\n\nRange.prototype.ranges = function () {\n    return [this];\n};\n\nRange.prototype._pushRanges = function (ranges) {\n    ranges.push(this);\n};\n\nRange.prototype.toString = function () {\n    return '[' + this._min + '-' + this._max + ']';\n};\n\nfunction _Compound(ranges) {\n    // given: a set of unsorted possibly overlapping ranges\n    // sort the input ranges\n    var sorted = ranges.sort(_rangeOrder);\n    // merge overlaps between adjacent ranges\n    var merged = [];\n    var current = sorted.shift();\n    sorted.forEach(function (range) {\n        if (range._min <= current._max) {\n            if (range._max > current._max) {\n                current._max = range._max;\n            }\n        } else {\n            merged.push(current);\n            current = range;\n        }\n    });\n    merged.push(current);\n    this._ranges = merged;\n}\n\n_Compound.prototype.min = function () {\n    return this._ranges[0].min();\n};\n\n_Compound.prototype.max = function () {\n    return this._ranges[this._ranges.length - 1].max();\n};\n\n// returns the index of the first range that is not less than pos\n_Compound.prototype.lower_bound = function (pos) {\n    // first check if pos is out of range\n    var r = this.ranges();\n    if (pos > this.max()) return r.length;\n    if (pos < this.min()) return 0;\n    // do a binary search\n    var a = 0,\n        b = r.length - 1;\n    while (a <= b) {\n        var m = Math.floor((a + b) / 2);\n        if (pos > r[m]._max) {\n            a = m + 1;\n        } else if (pos < r[m]._min) {\n            b = m - 1;\n        } else {\n            return m;\n        }\n    }\n    return a;\n};\n\n_Compound.prototype.contains = function (pos) {\n    var lb = this.lower_bound(pos);\n    if (lb < this._ranges.length && this._ranges[lb].contains(pos)) {\n        return true;\n    }\n    return false;\n};\n\n_Compound.prototype.insertRange = function (range) {\n    var lb = this.lower_bound(range._min);\n    if (lb === this._ranges.length) {\n        // range follows this\n        this._ranges.push(range);\n        return;\n    }\n\n    var r = this.ranges();\n    if (range._max < r[lb]._min) {\n        // range preceeds lb\n        this._ranges.splice(lb, 0, range);\n        return;\n    }\n\n    // range overlaps lb (at least)\n    if (r[lb]._min < range._min) range._min = r[lb]._min;\n    var ub = lb + 1;\n    while (ub < r.length && r[ub]._min <= range._max) {\n        ub++;\n    }\n    ub--;\n    // ub is the upper bound of the new range\n    if (r[ub]._max > range._max) range._max = r[ub]._max;\n\n    // splice range into this._ranges\n    this._ranges.splice(lb, ub - lb + 1, range);\n    return;\n};\n\n_Compound.prototype.isContiguous = function () {\n    return this._ranges.length > 1;\n};\n\n_Compound.prototype.ranges = function () {\n    return this._ranges;\n};\n\n_Compound.prototype._pushRanges = function (ranges) {\n    for (var ri = 0; ri < this._ranges.length; ++ri) {\n        ranges.push(this._ranges[ri]);\n    }\n};\n\n_Compound.prototype.toString = function () {\n    var s = '';\n    for (var r = 0; r < this._ranges.length; ++r) {\n        if (r > 0) {\n            s = s + ',';\n        }\n        s = s + this._ranges[r].toString();\n    }\n    return s;\n};\n\nfunction union(s0, s1) {\n    if (!(s0 instanceof _Compound)) {\n        if (!(s0 instanceof Array)) s0 = [s0];\n        s0 = new _Compound(s0);\n    }\n\n    if (s1) s0.insertRange(s1);\n\n    return s0;\n}\n\nfunction intersection(s0, s1) {\n    var r0 = s0.ranges();\n    var r1 = s1.ranges();\n    var l0 = r0.length,\n        l1 = r1.length;\n    var i0 = 0,\n        i1 = 0;\n    var or = [];\n\n    while (i0 < l0 && i1 < l1) {\n        var s0 = r0[i0],\n            s1 = r1[i1];\n        var lapMin = Math.max(s0.min(), s1.min());\n        var lapMax = Math.min(s0.max(), s1.max());\n        if (lapMax >= lapMin) {\n            or.push(new Range(lapMin, lapMax));\n        }\n        if (s0.max() > s1.max()) {\n            ++i1;\n        } else {\n            ++i0;\n        }\n    }\n\n    if (or.length == 0) {\n        return null; // FIXME\n    } else if (or.length == 1) {\n        return or[0];\n    } else {\n        return new _Compound(or);\n    }\n}\n\nfunction coverage(s) {\n    var tot = 0;\n    var rl = s.ranges();\n    for (var ri = 0; ri < rl.length; ++ri) {\n        var r = rl[ri];\n        tot += r.max() - r.min() + 1;\n    }\n    return tot;\n}\n\nfunction rangeOrder(a, b) {\n    if (a.min() < b.min()) {\n        return -1;\n    } else if (a.min() > b.min()) {\n        return 1;\n    } else if (a.max() < b.max()) {\n        return -1;\n    } else if (b.max() > a.max()) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nfunction _rangeOrder(a, b) {\n    if (a._min < b._min) {\n        return -1;\n    } else if (a._min > b._min) {\n        return 1;\n    } else if (a._max < b._max) {\n        return -1;\n    } else if (b._max > a._max) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nif (typeof module !== 'undefined') {\n    module.exports = {\n        Range: Range,\n        union: union,\n        intersection: intersection,\n        coverage: coverage,\n        rangeOver: rangeOrder,\n        _rangeOrder: _rangeOrder\n    };\n}\n\n},{}],6:[function(require,module,exports){\n/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n//\n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// tabix.js: basic support for tabix-indexed flatfiles\n//\n\n\"use strict\";\n\nvar TABIX_MAGIC = 0x01494254;\n\nif (typeof require !== 'undefined') {\n    var spans = require('./spans');\n    var Range = spans.Range;\n    var union = spans.union;\n    var intersection = spans.intersection;\n\n    var bin = require('./bin');\n    var readInt = bin.readInt;\n    var readShort = bin.readShort;\n    var readByte = bin.readByte;\n    var readInt64 = bin.readInt64;\n    var readFloat = bin.readFloat;\n\n    var lh3utils = require('./lh3utils');\n    var readVob = lh3utils.readVob;\n    var unbgzf = lh3utils.unbgzf;\n    var reg2bins = lh3utils.reg2bins;\n    var Chunk = lh3utils.Chunk;\n}\n\nfunction TabixFile() {}\n\nfunction connectTabix(data, tbi, callback) {\n    var tabix = new TabixFile();\n    tabix.data = data;\n    tabix.tbi = tbi;\n\n    tabix.tbi.fetch(function (header) {\n        // Do we really need to fetch the whole thing? :-(\n        if (!header) {\n            return callback(null, \"Couldn't access Tabix\");\n        }\n\n        var unchead = unbgzf(header, header.byteLength);\n        var uncba = new Uint8Array(unchead);\n        var magic = readInt(uncba, 0);\n        if (magic != TABIX_MAGIC) {\n            return callback(null, 'Not a tabix index');\n        }\n\n        var nref = readInt(uncba, 4);\n        tabix.format = readInt(uncba, 8);\n        tabix.colSeq = readInt(uncba, 12);\n        tabix.colStart = readInt(uncba, 16);\n        tabix.colEnd = readInt(uncba, 20);\n        tabix.meta = readInt(uncba, 24);\n        tabix.skip = readInt(uncba, 28);\n        var nameLength = readInt(uncba, 32);\n\n        tabix.indices = [];\n\n        var p = 36;\n        tabix.chrToIndex = {};\n        tabix.indexToChr = [];\n        for (var i = 0; i < nref; ++i) {\n            var name = '';\n\n            while (true) {\n                var ch = uncba[p++];\n                if (ch == 0) break;\n\n                name += String.fromCharCode(ch);\n            }\n\n            tabix.chrToIndex[name] = i;\n            if (name.indexOf('chr') == 0) {\n                tabix.chrToIndex[name.substring(3)] = i;\n            } else {\n                tabix.chrToIndex['chr' + name] = i;\n            }\n            tabix.indexToChr.push(name);\n        }\n\n        var minBlockIndex = 1000000000;\n        for (var ref = 0; ref < nref; ++ref) {\n            var blockStart = p;\n            var nbin = readInt(uncba, p);p += 4;\n            for (var b = 0; b < nbin; ++b) {\n                var bin = readInt(uncba, p);\n                var nchnk = readInt(uncba, p + 4);\n                p += 8 + nchnk * 16;\n            }\n            var nintv = readInt(uncba, p);p += 4;\n\n            var q = p;\n            for (var i = 0; i < nintv; ++i) {\n                var v = readVob(uncba, q);q += 8;\n                if (v) {\n                    var bi = v.block;\n                    if (v.offset > 0) bi += 65536;\n\n                    if (bi < minBlockIndex) minBlockIndex = bi;\n                    break;\n                }\n            }\n            p += nintv * 8;\n\n            var ub = uncba;\n            if (nbin > 0) {\n                tabix.indices[ref] = new Uint8Array(unchead, blockStart, p - blockStart);\n            }\n        }\n\n        tabix.headerMax = minBlockIndex;\n\n        callback(tabix);\n    }, { timeout: 50000 });\n}\n\n// Copy-paste from BamFile\n\nTabixFile.prototype.blocksForRange = function (refId, min, max) {\n    var index = this.indices[refId];\n    if (!index) {\n        return [];\n    }\n\n    var intBinsL = reg2bins(min, max);\n    var intBins = [];\n    for (var i = 0; i < intBinsL.length; ++i) {\n        intBins[intBinsL[i]] = true;\n    }\n    var leafChunks = [],\n        otherChunks = [];\n\n    var nbin = readInt(index, 0);\n    var p = 4;\n    for (var b = 0; b < nbin; ++b) {\n        var bin = readInt(index, p);\n        var nchnk = readInt(index, p + 4);\n        p += 8;\n        if (intBins[bin]) {\n            for (var c = 0; c < nchnk; ++c) {\n                var cs = readVob(index, p, true);\n                var ce = readVob(index, p + 8, true);\n                (bin < 4681 ? otherChunks : leafChunks).push(new Chunk(cs, ce));\n                p += 16;\n            }\n        } else {\n            p += nchnk * 16;\n        }\n    }\n\n    var nintv = readInt(index, p);\n    var lowest = null;\n    var minLin = Math.min(min >> 14, nintv - 1),\n        maxLin = Math.min(max >> 14, nintv - 1);\n    for (var i = minLin; i <= maxLin; ++i) {\n        var lb = readVob(index, p + 4 + i * 8);\n        if (!lb) {\n            continue;\n        }\n        if (!lowest || lb.block < lowest.block || lb.offset < lowest.offset) {\n            lowest = lb;\n        }\n    }\n\n    var prunedOtherChunks = [];\n    if (lowest != null) {\n        for (var i = 0; i < otherChunks.length; ++i) {\n            var chnk = otherChunks[i];\n            if (chnk.maxv.block >= lowest.block && chnk.maxv.offset >= lowest.offset) {\n                prunedOtherChunks.push(chnk);\n            }\n        }\n    }\n    otherChunks = prunedOtherChunks;\n\n    var intChunks = [];\n    for (var i = 0; i < otherChunks.length; ++i) {\n        intChunks.push(otherChunks[i]);\n    }\n    for (var i = 0; i < leafChunks.length; ++i) {\n        intChunks.push(leafChunks[i]);\n    }\n\n    intChunks.sort(function (c0, c1) {\n        var dif = c0.minv.block - c1.minv.block;\n        if (dif != 0) {\n            return dif;\n        } else {\n            return c0.minv.offset - c1.minv.offset;\n        }\n    });\n    var mergedChunks = [];\n    if (intChunks.length > 0) {\n        var cur = intChunks[0];\n        for (var i = 1; i < intChunks.length; ++i) {\n            var nc = intChunks[i];\n            if (nc.minv.block == cur.maxv.block /* && nc.minv.offset == cur.maxv.offset */) {\n                    // no point splitting mid-block\n                    cur = new Chunk(cur.minv, nc.maxv);\n                } else {\n                mergedChunks.push(cur);\n                cur = nc;\n            }\n        }\n        mergedChunks.push(cur);\n    }\n\n    return mergedChunks;\n};\n\nTabixFile.prototype.fetch = function (chr, min, max, callback) {\n    var thisB = this;\n\n    var chrId = this.chrToIndex[chr];\n    if (chrId == undefined) return callback([]);\n\n    var canonicalChr = this.indexToChr[chrId];\n\n    var chunks;\n    if (chrId === undefined) {\n        chunks = [];\n    } else {\n        chunks = this.blocksForRange(chrId, min, max);\n        if (!chunks) {\n            callback(null, 'Error in index fetch');\n        }\n    }\n\n    var records = [];\n    var index = 0;\n    var data;\n\n    function tramp() {\n        if (index >= chunks.length) {\n            return callback(records);\n        } else if (!data) {\n            var c = chunks[index];\n            var fetchMin = c.minv.block;\n            var fetchMax = c.maxv.block + (1 << 16); // *sigh*\n            thisB.data.slice(fetchMin, fetchMax - fetchMin).fetch(function (r) {\n                //2^16 fetch, 65536 bytes\n                try {\n                    data = unbgzf(r, c.maxv.block - c.minv.block + 1);\n                    return tramp();\n                } catch (e) {\n                    return callback(null, e);\n                }\n            });\n        } else {\n            var ba = new Uint8Array(data);\n            thisB.readRecords(ba, chunks[index].minv.offset, records, min, max, canonicalChr);\n            data = null;\n            ++index;\n            return tramp();\n        }\n    }\n\n    try {\n        tramp();\n    } catch (e) {\n        callback(null, e);\n    }\n};\n\nTabixFile.prototype.readRecords = function (ba, offset, sink, min, max, chr) {\n    LINE_LOOP: while (true) {\n        var line = '';\n        while (offset < ba.length) {\n            var ch = ba[offset++];\n            if (ch == 10) {\n                var toks = line.split('\\t');\n\n                if (toks[this.colSeq - 1] == chr) {\n                    var fmin = parseInt(toks[this.colStart - 1]);\n                    var fmax = fmin;\n                    if (this.colEnd > 0) fmax = parseInt(toks[this.colEnd - 1]);\n                    if (this.format & 0x10000) ++fmin;\n\n                    if (fmin <= max && fmax >= min) sink.push(line);\n                }\n                continue LINE_LOOP;\n            } else {\n                line += String.fromCharCode(ch);\n            }\n        }\n        return;\n    }\n};\n\nTabixFile.prototype.fetchHeader = function (callback, opts) {\n    // This routine fetches a large block of data from the start of the file, and then selects \"headers\" based\n    //  on one of three possible criteria:\n    // - metaOnly (tabix -H compatible): only lines that begin with the meta character are accepted\n    // - skipped (get all \"skipped\" rows, based on tabix -S parameter when indexing)\n    // - nLines (peek at the first x lines, which may return data as well as headers)\n\n    // In all cases, the callback will return as soon as we reach the first line that does not meet these conditions.\n    var defaults = { metaOnly: true, skipped: false, nLines: 0 };\n    opts = opts || defaults;\n    Object.keys(defaults).forEach(function (key) {\n        if (!opts.hasOwnProperty(key)) {\n            opts[key] = defaults[key];\n        }\n    });\n\n    var self = this;\n    var fetchPtr = 0,\n        ptr = 0,\n        line = '';\n    var lines = [];\n\n    self.data.slice(0, self.headerMax).fetch(function (chnk) {\n        if (!chnk) {\n            return callback(null, \"Fetch failed\");\n        }\n        var ba = new Uint8Array(unbgzf(chnk, chnk.byteLength));\n        var ptr = 0,\n            line = '',\n            lines = [];\n        while (ptr < ba.length) {\n            var ch = ba[ptr++];\n            if (ch == 10) {\n                if (opts.metaOnly && line.charCodeAt(0) == self.meta || opts.skipped && lines.length < self.skip || opts.nLines && lines.length < opts.nLines) {\n                    lines.push(line);\n                    line = '';\n                } else {\n                    return callback(lines);\n                }\n            } else {\n                line += String.fromCharCode(ch);\n            }\n        }\n        callback(lines);\n    });\n};\n\nif (typeof module !== 'undefined') {\n    module.exports = {\n        connectTabix: connectTabix,\n        TABIX_MAGIC: TABIX_MAGIC\n    };\n}\n\n},{\"./bin\":1,\"./lh3utils\":3,\"./spans\":5}],7:[function(require,module,exports){\n/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// utils.js: odds, sods, and ends.\n//\n\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nif (typeof require !== 'undefined') {\n    var sha1 = require('./sha1');\n    var b64_sha1 = sha1.b64_sha1;\n}\n\nvar NUM_REGEXP = new RegExp('[0-9]+');\n\nfunction stringToNumbersArray(str) {\n    var nums = new Array();\n    var m;\n    while (m = NUM_REGEXP.exec(str)) {\n        nums.push(m[0]);\n        str = str.substring(m.index + m[0].length);\n    }\n    return nums;\n}\n\nvar STRICT_NUM_REGEXP = new RegExp('^[0-9]+$');\n\nfunction stringToInt(str) {\n    str = str.replace(new RegExp(',', 'g'), '');\n    if (!STRICT_NUM_REGEXP.test(str)) {\n        return null;\n    }\n    return str | 0;\n}\n\nfunction pushnew(a, v) {\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] == v) {\n            return;\n        }\n    }\n    a.push(v);\n}\n\nfunction pusho(obj, k, v) {\n    if (obj[k]) {\n        obj[k].push(v);\n    } else {\n        obj[k] = [v];\n    }\n}\n\nfunction pushnewo(obj, k, v) {\n    var a = obj[k];\n    if (a) {\n        for (var i = 0; i < a.length; ++i) {\n            // indexOf requires JS16 :-(.\n            if (a[i] == v) {\n                return;\n            }\n        }\n        a.push(v);\n    } else {\n        obj[k] = [v];\n    }\n}\n\nfunction pick(a, b, c, d) {\n    if (a) {\n        return a;\n    } else if (b) {\n        return b;\n    } else if (c) {\n        return c;\n    } else if (d) {\n        return d;\n    }\n}\n\nfunction pushnew(l, o) {\n    for (var i = 0; i < l.length; ++i) {\n        if (l[i] == o) {\n            return;\n        }\n    }\n    l.push(o);\n}\n\nfunction arrayEquals(a, b) {\n    if (!a || !b || a.length !== b.length) return false;\n\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n}\n\nfunction arrayIndexOf(a, x) {\n    if (!a) {\n        return -1;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] === x) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction arrayRemove(a, x) {\n    var i = arrayIndexOf(a, x);\n    if (i >= 0) {\n        a.splice(i, 1);\n        return true;\n    }\n    return false;\n}\n\n//\n// DOM utilities\n//\n\n\nfunction makeElement(tag, children, attribs, styles) {\n    var ele = document.createElement(tag);\n    if (children) {\n        if (!(children instanceof Array)) {\n            children = [children];\n        }\n        for (var i = 0; i < children.length; ++i) {\n            var c = children[i];\n            if (c) {\n                if (typeof c == 'string') {\n                    c = document.createTextNode(c);\n                } else if (typeof c == 'number') {\n                    c = document.createTextNode('' + c);\n                }\n                ele.appendChild(c);\n            }\n        }\n    }\n\n    if (attribs) {\n        for (var l in attribs) {\n            try {\n                ele[l] = attribs[l];\n            } catch (e) {\n                console.log('error setting ' + l);\n                throw e;\n            }\n        }\n    }\n    if (styles) {\n        for (var l in styles) {\n            ele.style[l] = styles[l];\n        }\n    }\n    return ele;\n}\n\nfunction makeElementNS(namespace, tag, children, attribs) {\n    var ele = document.createElementNS(namespace, tag);\n    if (children) {\n        if (!(children instanceof Array)) {\n            children = [children];\n        }\n        for (var i = 0; i < children.length; ++i) {\n            var c = children[i];\n            if (typeof c == 'string') {\n                c = document.createTextNode(c);\n            }\n            ele.appendChild(c);\n        }\n    }\n\n    setAttrs(ele, attribs);\n    return ele;\n}\n\nvar attr_name_cache = {};\n\nfunction setAttr(node, key, value) {\n    var attr = attr_name_cache[key];\n    if (!attr) {\n        var _attr = '';\n        for (var c = 0; c < key.length; ++c) {\n            var cc = key.substring(c, c + 1);\n            var lcc = cc.toLowerCase();\n            if (lcc != cc) {\n                _attr = _attr + '-' + lcc;\n            } else {\n                _attr = _attr + cc;\n            }\n        }\n        attr_name_cache[key] = _attr;\n        attr = _attr;\n    }\n    node.setAttribute(attr, value);\n}\n\nfunction setAttrs(node, attribs) {\n    if (attribs) {\n        for (var l in attribs) {\n            setAttr(node, l, attribs[l]);\n        }\n    }\n}\n\nfunction removeChildren(node) {\n    if (!node || !node.childNodes) {\n        return;\n    }\n\n    while (node.childNodes.length > 0) {\n        node.removeChild(node.firstChild);\n    }\n}\n\n//\n// WARNING: not for general use!\n//\n\nfunction miniJSONify(o, exc) {\n    if (typeof o === 'undefined') {\n        return 'undefined';\n    } else if (o == null) {\n        return 'null';\n    } else if (typeof o == 'string') {\n        return \"'\" + o + \"'\";\n    } else if (typeof o == 'number') {\n        return \"\" + o;\n    } else if (typeof o == 'boolean') {\n        return \"\" + o;\n    } else if ((typeof o === 'undefined' ? 'undefined' : _typeof(o)) == 'object') {\n        if (o instanceof Array) {\n            var s = null;\n            for (var i = 0; i < o.length; ++i) {\n                s = (s == null ? '' : s + ', ') + miniJSONify(o[i], exc);\n            }\n            return '[' + (s ? s : '') + ']';\n        } else {\n            exc = exc || {};\n            var s = null;\n            for (var k in o) {\n                if (exc[k]) continue;\n                if (k != undefined && typeof o[k] != 'function') {\n                    s = (s == null ? '' : s + ', ') + k + ': ' + miniJSONify(o[k], exc);\n                }\n            }\n            return '{' + (s ? s : '') + '}';\n        }\n    } else {\n        return typeof o === 'undefined' ? 'undefined' : _typeof(o);\n    }\n}\n\nfunction shallowCopy(o) {\n    var n = {};\n    for (var k in o) {\n        n[k] = o[k];\n    }\n    return n;\n}\n\nfunction Observed(x) {\n    this.value = x;\n    this.listeners = [];\n}\n\nObserved.prototype.addListener = function (f) {\n    this.listeners.push(f);\n};\n\nObserved.prototype.addListenerAndFire = function (f) {\n    this.listeners.push(f);\n    f(this.value);\n};\n\nObserved.prototype.removeListener = function (f) {\n    arrayRemove(this.listeners, f);\n};\n\nObserved.prototype.get = function () {\n    return this.value;\n};\n\nObserved.prototype.set = function (x) {\n    this.value = x;\n    for (var i = 0; i < this.listeners.length; ++i) {\n        this.listeners[i](x);\n    }\n};\n\nfunction Awaited() {\n    this.queue = [];\n}\n\nAwaited.prototype.provide = function (x) {\n    if (this.res !== undefined) {\n        throw \"Resource has already been provided.\";\n    }\n\n    this.res = x;\n    for (var i = 0; i < this.queue.length; ++i) {\n        this.queue[i](x);\n    }\n    this.queue = null; // avoid leaking closures.\n};\n\nAwaited.prototype.await = function (f) {\n    if (this.res !== undefined) {\n        f(this.res);\n        return this.res;\n    } else {\n        this.queue.push(f);\n    }\n};\n\nvar __dalliance_saltSeed = 0;\n\nfunction saltURL(url) {\n    return url + '?salt=' + b64_sha1('' + Date.now() + ',' + ++__dalliance_saltSeed);\n}\n\nfunction textXHR(url, callback, opts) {\n    if (opts && opts.salt) url = saltURL(url);\n\n    try {\n        var timeout;\n        if (opts && opts.timeout) {\n            timeout = setTimeout(function () {\n                console.log('timing out ' + url);\n                req.abort();\n                return callback(null, 'Timeout');\n            }, opts.timeout);\n        }\n\n        var req = new XMLHttpRequest();\n        req.onreadystatechange = function () {\n            if (req.readyState == 4) {\n                if (timeout) clearTimeout(timeout);\n                if (req.status < 200 || req.status >= 300) {\n                    callback(null, 'Error code ' + req.status);\n                } else {\n                    callback(req.responseText);\n                }\n            }\n        };\n\n        req.open('GET', url, true);\n        req.responseType = 'text';\n\n        if (opts && opts.credentials) {\n            req.withCredentials = true;\n        }\n        req.send();\n    } catch (e) {\n        callback(null, 'Exception ' + e);\n    }\n}\n\nfunction relativeURL(base, rel) {\n    // FIXME quite naive -- good enough for trackhubs?\n\n    if (rel.indexOf('http:') == 0 || rel.indexOf('https:') == 0) {\n        return rel;\n    }\n\n    var li = base.lastIndexOf('/');\n    if (li >= 0) {\n        return base.substr(0, li + 1) + rel;\n    } else {\n        return rel;\n    }\n}\n\nvar AMINO_ACID_TRANSLATION = {\n    'TTT': 'F',\n    'TTC': 'F',\n    'TTA': 'L',\n    'TTG': 'L',\n    'CTT': 'L',\n    'CTC': 'L',\n    'CTA': 'L',\n    'CTG': 'L',\n    'ATT': 'I',\n    'ATC': 'I',\n    'ATA': 'I',\n    'ATG': 'M',\n    'GTT': 'V',\n    'GTC': 'V',\n    'GTA': 'V',\n    'GTG': 'V',\n    'TCT': 'S',\n    'TCC': 'S',\n    'TCA': 'S',\n    'TCG': 'S',\n    'CCT': 'P',\n    'CCC': 'P',\n    'CCA': 'P',\n    'CCG': 'P',\n    'ACT': 'T',\n    'ACC': 'T',\n    'ACA': 'T',\n    'ACG': 'T',\n    'GCT': 'A',\n    'GCC': 'A',\n    'GCA': 'A',\n    'GCG': 'A',\n    'TAT': 'Y',\n    'TAC': 'Y',\n    'TAA': '*', // stop\n    'TAG': '*', // stop\n    'CAT': 'H',\n    'CAC': 'H',\n    'CAA': 'Q',\n    'CAG': 'Q',\n    'AAT': 'N',\n    'AAC': 'N',\n    'AAA': 'K',\n    'AAG': 'K',\n    'GAT': 'D',\n    'GAC': 'D',\n    'GAA': 'E',\n    'GAG': 'E',\n    'TGT': 'C',\n    'TGC': 'C',\n    'TGA': '*', // stop\n    'TGG': 'W',\n    'CGT': 'R',\n    'CGC': 'R',\n    'CGA': 'R',\n    'CGG': 'R',\n    'AGT': 'S',\n    'AGC': 'S',\n    'AGA': 'R',\n    'AGG': 'R',\n    'GGT': 'G',\n    'GGC': 'G',\n    'GGA': 'G',\n    'GGG': 'G'\n};\n\nfunction resolveUrlToPage(rel) {\n    return makeElement('a', null, { href: rel }).href;\n}\n\n//\n// Missing APIs\n// \n\nif (!('trim' in String.prototype)) {\n    String.prototype.trim = function () {\n        return this.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    };\n}\n\nif (typeof module !== 'undefined') {\n    module.exports = {\n        textXHR: textXHR,\n        relativeURL: relativeURL,\n        resolveUrlToPage: resolveUrlToPage,\n        shallowCopy: shallowCopy,\n        pusho: pusho,\n        pushnew: pushnew,\n        pushnewo: pushnewo,\n        arrayIndexOf: arrayIndexOf,\n        arrayEquals: arrayEquals,\n        pick: pick,\n\n        makeElement: makeElement,\n        makeElementNS: makeElementNS,\n        removeChildren: removeChildren,\n\n        miniJSONify: miniJSONify,\n\n        Observed: Observed,\n        Awaited: Awaited,\n\n        AMINO_ACID_TRANSLATION: AMINO_ACID_TRANSLATION\n    };\n}\n\n},{\"./sha1\":4}],8:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE\n * @version   3.0.2\n */\n\n(function() {\n    \"use strict\";\n    function lib$es6$promise$utils$$objectOrFunction(x) {\n      return typeof x === 'function' || (typeof x === 'object' && x !== null);\n    }\n\n    function lib$es6$promise$utils$$isFunction(x) {\n      return typeof x === 'function';\n    }\n\n    function lib$es6$promise$utils$$isMaybeThenable(x) {\n      return typeof x === 'object' && x !== null;\n    }\n\n    var lib$es6$promise$utils$$_isArray;\n    if (!Array.isArray) {\n      lib$es6$promise$utils$$_isArray = function (x) {\n        return Object.prototype.toString.call(x) === '[object Array]';\n      };\n    } else {\n      lib$es6$promise$utils$$_isArray = Array.isArray;\n    }\n\n    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;\n    var lib$es6$promise$asap$$len = 0;\n    var lib$es6$promise$asap$$toString = {}.toString;\n    var lib$es6$promise$asap$$vertxNext;\n    var lib$es6$promise$asap$$customSchedulerFn;\n\n    var lib$es6$promise$asap$$asap = function asap(callback, arg) {\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;\n      lib$es6$promise$asap$$len += 2;\n      if (lib$es6$promise$asap$$len === 2) {\n        // If len is 2, that means that we need to schedule an async flush.\n        // If additional callbacks are queued before the queue is flushed, they\n        // will be processed by this flush that we are scheduling.\n        if (lib$es6$promise$asap$$customSchedulerFn) {\n          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);\n        } else {\n          lib$es6$promise$asap$$scheduleFlush();\n        }\n      }\n    }\n\n    function lib$es6$promise$asap$$setScheduler(scheduleFn) {\n      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;\n    }\n\n    function lib$es6$promise$asap$$setAsap(asapFn) {\n      lib$es6$promise$asap$$asap = asapFn;\n    }\n\n    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;\n    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};\n    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;\n    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n    // test for web worker but not in IE10\n    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&\n      typeof importScripts !== 'undefined' &&\n      typeof MessageChannel !== 'undefined';\n\n    // node\n    function lib$es6$promise$asap$$useNextTick() {\n      // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n      // see https://github.com/cujojs/when/issues/410 for details\n      return function() {\n        process.nextTick(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    // vertx\n    function lib$es6$promise$asap$$useVertxTimer() {\n      return function() {\n        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    function lib$es6$promise$asap$$useMutationObserver() {\n      var iterations = 0;\n      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);\n      var node = document.createTextNode('');\n      observer.observe(node, { characterData: true });\n\n      return function() {\n        node.data = (iterations = ++iterations % 2);\n      };\n    }\n\n    // web worker\n    function lib$es6$promise$asap$$useMessageChannel() {\n      var channel = new MessageChannel();\n      channel.port1.onmessage = lib$es6$promise$asap$$flush;\n      return function () {\n        channel.port2.postMessage(0);\n      };\n    }\n\n    function lib$es6$promise$asap$$useSetTimeout() {\n      return function() {\n        setTimeout(lib$es6$promise$asap$$flush, 1);\n      };\n    }\n\n    var lib$es6$promise$asap$$queue = new Array(1000);\n    function lib$es6$promise$asap$$flush() {\n      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {\n        var callback = lib$es6$promise$asap$$queue[i];\n        var arg = lib$es6$promise$asap$$queue[i+1];\n\n        callback(arg);\n\n        lib$es6$promise$asap$$queue[i] = undefined;\n        lib$es6$promise$asap$$queue[i+1] = undefined;\n      }\n\n      lib$es6$promise$asap$$len = 0;\n    }\n\n    function lib$es6$promise$asap$$attemptVertx() {\n      try {\n        var r = require;\n        var vertx = r('vertx');\n        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;\n        return lib$es6$promise$asap$$useVertxTimer();\n      } catch(e) {\n        return lib$es6$promise$asap$$useSetTimeout();\n      }\n    }\n\n    var lib$es6$promise$asap$$scheduleFlush;\n    // Decide what async method to use to triggering processing of queued callbacks:\n    if (lib$es6$promise$asap$$isNode) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();\n    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();\n    } else if (lib$es6$promise$asap$$isWorker) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();\n    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();\n    } else {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();\n    }\n\n    function lib$es6$promise$$internal$$noop() {}\n\n    var lib$es6$promise$$internal$$PENDING   = void 0;\n    var lib$es6$promise$$internal$$FULFILLED = 1;\n    var lib$es6$promise$$internal$$REJECTED  = 2;\n\n    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$selfFulfillment() {\n      return new TypeError(\"You cannot resolve a promise with itself\");\n    }\n\n    function lib$es6$promise$$internal$$cannotReturnOwn() {\n      return new TypeError('A promises callback cannot return that same promise.');\n    }\n\n    function lib$es6$promise$$internal$$getThen(promise) {\n      try {\n        return promise.then;\n      } catch(error) {\n        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;\n        return lib$es6$promise$$internal$$GET_THEN_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n      try {\n        then.call(value, fulfillmentHandler, rejectionHandler);\n      } catch(e) {\n        return e;\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {\n       lib$es6$promise$asap$$asap(function(promise) {\n        var sealed = false;\n        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {\n          if (sealed) { return; }\n          sealed = true;\n          if (thenable !== value) {\n            lib$es6$promise$$internal$$resolve(promise, value);\n          } else {\n            lib$es6$promise$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          if (sealed) { return; }\n          sealed = true;\n\n          lib$es6$promise$$internal$$reject(promise, reason);\n        }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n        if (!sealed && error) {\n          sealed = true;\n          lib$es6$promise$$internal$$reject(promise, error);\n        }\n      }, promise);\n    }\n\n    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {\n      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, thenable._result);\n      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, thenable._result);\n      } else {\n        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {\n      if (maybeThenable.constructor === promise.constructor) {\n        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);\n      } else {\n        var then = lib$es6$promise$$internal$$getThen(maybeThenable);\n\n        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);\n        } else if (then === undefined) {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        } else if (lib$es6$promise$utils$$isFunction(then)) {\n          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);\n        } else {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        }\n      }\n    }\n\n    function lib$es6$promise$$internal$$resolve(promise, value) {\n      if (promise === value) {\n        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());\n      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {\n        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);\n      } else {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publishRejection(promise) {\n      if (promise._onerror) {\n        promise._onerror(promise._result);\n      }\n\n      lib$es6$promise$$internal$$publish(promise);\n    }\n\n    function lib$es6$promise$$internal$$fulfill(promise, value) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n\n      promise._result = value;\n      promise._state = lib$es6$promise$$internal$$FULFILLED;\n\n      if (promise._subscribers.length !== 0) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);\n      }\n    }\n\n    function lib$es6$promise$$internal$$reject(promise, reason) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n      promise._state = lib$es6$promise$$internal$$REJECTED;\n      promise._result = reason;\n\n      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);\n    }\n\n    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {\n      var subscribers = parent._subscribers;\n      var length = subscribers.length;\n\n      parent._onerror = null;\n\n      subscribers[length] = child;\n      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;\n      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;\n\n      if (length === 0 && parent._state) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publish(promise) {\n      var subscribers = promise._subscribers;\n      var settled = promise._state;\n\n      if (subscribers.length === 0) { return; }\n\n      var child, callback, detail = promise._result;\n\n      for (var i = 0; i < subscribers.length; i += 3) {\n        child = subscribers[i];\n        callback = subscribers[i + settled];\n\n        if (child) {\n          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);\n        } else {\n          callback(detail);\n        }\n      }\n\n      promise._subscribers.length = 0;\n    }\n\n    function lib$es6$promise$$internal$$ErrorObject() {\n      this.error = null;\n    }\n\n    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$tryCatch(callback, detail) {\n      try {\n        return callback(detail);\n      } catch(e) {\n        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;\n        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {\n      var hasCallback = lib$es6$promise$utils$$isFunction(callback),\n          value, error, succeeded, failed;\n\n      if (hasCallback) {\n        value = lib$es6$promise$$internal$$tryCatch(callback, detail);\n\n        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {\n          failed = true;\n          error = value.error;\n          value = null;\n        } else {\n          succeeded = true;\n        }\n\n        if (promise === value) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());\n          return;\n        }\n\n      } else {\n        value = detail;\n        succeeded = true;\n      }\n\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) {\n        // noop\n      } else if (hasCallback && succeeded) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      } else if (failed) {\n        lib$es6$promise$$internal$$reject(promise, error);\n      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      } else if (settled === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {\n      try {\n        resolver(function resolvePromise(value){\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function rejectPromise(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      } catch(e) {\n        lib$es6$promise$$internal$$reject(promise, e);\n      }\n    }\n\n    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {\n      var enumerator = this;\n\n      enumerator._instanceConstructor = Constructor;\n      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (enumerator._validateInput(input)) {\n        enumerator._input     = input;\n        enumerator.length     = input.length;\n        enumerator._remaining = input.length;\n\n        enumerator._init();\n\n        if (enumerator.length === 0) {\n          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n        } else {\n          enumerator.length = enumerator.length || 0;\n          enumerator._enumerate();\n          if (enumerator._remaining === 0) {\n            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n          }\n        }\n      } else {\n        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());\n      }\n    }\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {\n      return lib$es6$promise$utils$$isArray(input);\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {\n      return new Error('Array Methods must be provided an Array');\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {\n      this._result = new Array(this.length);\n    };\n\n    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {\n      var enumerator = this;\n\n      var length  = enumerator.length;\n      var promise = enumerator.promise;\n      var input   = enumerator._input;\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        enumerator._eachEntry(input[i], i);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {\n      var enumerator = this;\n      var c = enumerator._instanceConstructor;\n\n      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {\n        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {\n          entry._onerror = null;\n          enumerator._settledAt(entry._state, i, entry._result);\n        } else {\n          enumerator._willSettleAt(c.resolve(entry), i);\n        }\n      } else {\n        enumerator._remaining--;\n        enumerator._result[i] = entry;\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {\n      var enumerator = this;\n      var promise = enumerator.promise;\n\n      if (promise._state === lib$es6$promise$$internal$$PENDING) {\n        enumerator._remaining--;\n\n        if (state === lib$es6$promise$$internal$$REJECTED) {\n          lib$es6$promise$$internal$$reject(promise, value);\n        } else {\n          enumerator._result[i] = value;\n        }\n      }\n\n      if (enumerator._remaining === 0) {\n        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {\n      var enumerator = this;\n\n      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {\n        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);\n      }, function(reason) {\n        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);\n      });\n    };\n    function lib$es6$promise$promise$all$$all(entries) {\n      return new lib$es6$promise$enumerator$$default(this, entries).promise;\n    }\n    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;\n    function lib$es6$promise$promise$race$$race(entries) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (!lib$es6$promise$utils$$isArray(entries)) {\n        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));\n        return promise;\n      }\n\n      var length = entries.length;\n\n      function onFulfillment(value) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      }\n\n      function onRejection(reason) {\n        lib$es6$promise$$internal$$reject(promise, reason);\n      }\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n      }\n\n      return promise;\n    }\n    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;\n    function lib$es6$promise$promise$resolve$$resolve(object) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      if (object && typeof object === 'object' && object.constructor === Constructor) {\n        return object;\n      }\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$resolve(promise, object);\n      return promise;\n    }\n    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;\n    function lib$es6$promise$promise$reject$$reject(reason) {\n      /*jshint validthis:true */\n      var Constructor = this;\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$reject(promise, reason);\n      return promise;\n    }\n    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;\n\n    var lib$es6$promise$promise$$counter = 0;\n\n    function lib$es6$promise$promise$$needsResolver() {\n      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n    }\n\n    function lib$es6$promise$promise$$needsNew() {\n      throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }\n\n    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;\n    /**\n      Promise objects represent the eventual result of an asynchronous operation. The\n      primary way of interacting with a promise is through its `then` method, which\n      registers callbacks to receive either a promise's eventual value or the reason\n      why the promise cannot be fulfilled.\n\n      Terminology\n      -----------\n\n      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n      - `thenable` is an object or function that defines a `then` method.\n      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n      - `exception` is a value that is thrown using the throw statement.\n      - `reason` is a value that indicates why a promise was rejected.\n      - `settled` the final resting state of a promise, fulfilled or rejected.\n\n      A promise can be in one of three states: pending, fulfilled, or rejected.\n\n      Promises that are fulfilled have a fulfillment value and are in the fulfilled\n      state.  Promises that are rejected have a rejection reason and are in the\n      rejected state.  A fulfillment value is never a thenable.\n\n      Promises can also be said to *resolve* a value.  If this value is also a\n      promise, then the original promise's settled state will match the value's\n      settled state.  So a promise that *resolves* a promise that rejects will\n      itself reject, and a promise that *resolves* a promise that fulfills will\n      itself fulfill.\n\n\n      Basic Usage:\n      ------------\n\n      ```js\n      var promise = new Promise(function(resolve, reject) {\n        // on success\n        resolve(value);\n\n        // on failure\n        reject(reason);\n      });\n\n      promise.then(function(value) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Advanced Usage:\n      ---------------\n\n      Promises shine when abstracting away asynchronous interactions such as\n      `XMLHttpRequest`s.\n\n      ```js\n      function getJSON(url) {\n        return new Promise(function(resolve, reject){\n          var xhr = new XMLHttpRequest();\n\n          xhr.open('GET', url);\n          xhr.onreadystatechange = handler;\n          xhr.responseType = 'json';\n          xhr.setRequestHeader('Accept', 'application/json');\n          xhr.send();\n\n          function handler() {\n            if (this.readyState === this.DONE) {\n              if (this.status === 200) {\n                resolve(this.response);\n              } else {\n                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n              }\n            }\n          };\n        });\n      }\n\n      getJSON('/posts.json').then(function(json) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Unlike callbacks, promises are great composable primitives.\n\n      ```js\n      Promise.all([\n        getJSON('/posts'),\n        getJSON('/comments')\n      ]).then(function(values){\n        values[0] // => postsJSON\n        values[1] // => commentsJSON\n\n        return values;\n      });\n      ```\n\n      @class Promise\n      @param {function} resolver\n      Useful for tooling.\n      @constructor\n    */\n    function lib$es6$promise$promise$$Promise(resolver) {\n      this._id = lib$es6$promise$promise$$counter++;\n      this._state = undefined;\n      this._result = undefined;\n      this._subscribers = [];\n\n      if (lib$es6$promise$$internal$$noop !== resolver) {\n        if (!lib$es6$promise$utils$$isFunction(resolver)) {\n          lib$es6$promise$promise$$needsResolver();\n        }\n\n        if (!(this instanceof lib$es6$promise$promise$$Promise)) {\n          lib$es6$promise$promise$$needsNew();\n        }\n\n        lib$es6$promise$$internal$$initializePromise(this, resolver);\n      }\n    }\n\n    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;\n    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;\n    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;\n    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;\n    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;\n    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;\n    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;\n\n    lib$es6$promise$promise$$Promise.prototype = {\n      constructor: lib$es6$promise$promise$$Promise,\n\n    /**\n      The primary way of interacting with a promise is through its `then` method,\n      which registers callbacks to receive either a promise's eventual value or the\n      reason why the promise cannot be fulfilled.\n\n      ```js\n      findUser().then(function(user){\n        // user is available\n      }, function(reason){\n        // user is unavailable, and you are given the reason why\n      });\n      ```\n\n      Chaining\n      --------\n\n      The return value of `then` is itself a promise.  This second, 'downstream'\n      promise is resolved with the return value of the first promise's fulfillment\n      or rejection handler, or rejected if the handler throws an exception.\n\n      ```js\n      findUser().then(function (user) {\n        return user.name;\n      }, function (reason) {\n        return 'default name';\n      }).then(function (userName) {\n        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n        // will be `'default name'`\n      });\n\n      findUser().then(function (user) {\n        throw new Error('Found user, but still unhappy');\n      }, function (reason) {\n        throw new Error('`findUser` rejected and we're unhappy');\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n      });\n      ```\n      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n      ```js\n      findUser().then(function (user) {\n        throw new PedagogicalException('Upstream error');\n      }).then(function (value) {\n        // never reached\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // The `PedgagocialException` is propagated all the way down to here\n      });\n      ```\n\n      Assimilation\n      ------------\n\n      Sometimes the value you want to propagate to a downstream promise can only be\n      retrieved asynchronously. This can be achieved by returning a promise in the\n      fulfillment or rejection handler. The downstream promise will then be pending\n      until the returned promise is settled. This is called *assimilation*.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // The user's comments are now available\n      });\n      ```\n\n      If the assimliated promise rejects, then the downstream promise will also reject.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // If `findCommentsByAuthor` fulfills, we'll have the value here\n      }, function (reason) {\n        // If `findCommentsByAuthor` rejects, we'll have the reason here\n      });\n      ```\n\n      Simple Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var result;\n\n      try {\n        result = findResult();\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n      findResult(function(result, err){\n        if (err) {\n          // failure\n        } else {\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findResult().then(function(result){\n        // success\n      }, function(reason){\n        // failure\n      });\n      ```\n\n      Advanced Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var author, books;\n\n      try {\n        author = findAuthor();\n        books  = findBooksByAuthor(author);\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n\n      function foundBooks(books) {\n\n      }\n\n      function failure(reason) {\n\n      }\n\n      findAuthor(function(author, err){\n        if (err) {\n          failure(err);\n          // failure\n        } else {\n          try {\n            findBoooksByAuthor(author, function(books, err) {\n              if (err) {\n                failure(err);\n              } else {\n                try {\n                  foundBooks(books);\n                } catch(reason) {\n                  failure(reason);\n                }\n              }\n            });\n          } catch(error) {\n            failure(err);\n          }\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findAuthor().\n        then(findBooksByAuthor).\n        then(function(books){\n          // found books\n      }).catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method then\n      @param {Function} onFulfilled\n      @param {Function} onRejected\n      Useful for tooling.\n      @return {Promise}\n    */\n      then: function(onFulfillment, onRejection) {\n        var parent = this;\n        var state = parent._state;\n\n        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {\n          return this;\n        }\n\n        var child = new this.constructor(lib$es6$promise$$internal$$noop);\n        var result = parent._result;\n\n        if (state) {\n          var callback = arguments[state - 1];\n          lib$es6$promise$asap$$asap(function(){\n            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);\n          });\n        } else {\n          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);\n        }\n\n        return child;\n      },\n\n    /**\n      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n      as the catch block of a try/catch statement.\n\n      ```js\n      function findAuthor(){\n        throw new Error('couldn't find that author');\n      }\n\n      // synchronous\n      try {\n        findAuthor();\n      } catch(reason) {\n        // something went wrong\n      }\n\n      // async with promises\n      findAuthor().catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method catch\n      @param {Function} onRejection\n      Useful for tooling.\n      @return {Promise}\n    */\n      'catch': function(onRejection) {\n        return this.then(null, onRejection);\n      }\n    };\n    function lib$es6$promise$polyfill$$polyfill() {\n      var local;\n\n      if (typeof global !== 'undefined') {\n          local = global;\n      } else if (typeof self !== 'undefined') {\n          local = self;\n      } else {\n          try {\n              local = Function('return this')();\n          } catch (e) {\n              throw new Error('polyfill failed because global object is unavailable in this environment');\n          }\n      }\n\n      var P = local.Promise;\n\n      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {\n        return;\n      }\n\n      local.Promise = lib$es6$promise$promise$$default;\n    }\n    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;\n\n    var lib$es6$promise$umd$$ES6Promise = {\n      'Promise': lib$es6$promise$promise$$default,\n      'polyfill': lib$es6$promise$polyfill$$default\n    };\n\n    /* global define:true module:true window: true */\n    if (typeof define === 'function' && define['amd']) {\n      define(function() { return lib$es6$promise$umd$$ES6Promise; });\n    } else if (typeof module !== 'undefined' && module['exports']) {\n      module['exports'] = lib$es6$promise$umd$$ES6Promise;\n    } else if (typeof this !== 'undefined') {\n      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;\n    }\n\n    lib$es6$promise$polyfill$$default();\n}).call(this);\n\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":10}],9:[function(require,module,exports){\n/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Javascript ZLib\n// By Thomas Down 2010-2011\n//\n// Based very heavily on portions of jzlib (by ymnk@jcraft.com), who in\n// turn credits Jean-loup Gailly and Mark Adler for the original zlib code.\n//\n// inflate.js: ZLib inflate code\n//\n\n//\n// Shared constants\n//\n\nvar MAX_WBITS=15; // 32K LZ77 window\nvar DEF_WBITS=MAX_WBITS;\nvar MAX_MEM_LEVEL=9;\nvar MANY=1440;\nvar BMAX = 15;\n\n// preset dictionary flag in zlib header\nvar PRESET_DICT=0x20;\n\nvar Z_NO_FLUSH=0;\nvar Z_PARTIAL_FLUSH=1;\nvar Z_SYNC_FLUSH=2;\nvar Z_FULL_FLUSH=3;\nvar Z_FINISH=4;\n\nvar Z_DEFLATED=8;\n\nvar Z_OK=0;\nvar Z_STREAM_END=1;\nvar Z_NEED_DICT=2;\nvar Z_ERRNO=-1;\nvar Z_STREAM_ERROR=-2;\nvar Z_DATA_ERROR=-3;\nvar Z_MEM_ERROR=-4;\nvar Z_BUF_ERROR=-5;\nvar Z_VERSION_ERROR=-6;\n\nvar METHOD=0;   // waiting for method byte\nvar FLAG=1;     // waiting for flag byte\nvar DICT4=2;    // four dictionary check bytes to go\nvar DICT3=3;    // three dictionary check bytes to go\nvar DICT2=4;    // two dictionary check bytes to go\nvar DICT1=5;    // one dictionary check byte to go\nvar DICT0=6;    // waiting for inflateSetDictionary\nvar BLOCKS=7;   // decompressing blocks\nvar CHECK4=8;   // four check bytes to go\nvar CHECK3=9;   // three check bytes to go\nvar CHECK2=10;  // two check bytes to go\nvar CHECK1=11;  // one check byte to go\nvar DONE=12;    // finished check, done\nvar BAD=13;     // got an error--stay here\n\nvar inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\n\nvar IB_TYPE=0;  // get type bits (3, including end bit)\nvar IB_LENS=1;  // get lengths for stored\nvar IB_STORED=2;// processing stored block\nvar IB_TABLE=3; // get table lengths\nvar IB_BTREE=4; // get bit lengths tree for a dynamic block\nvar IB_DTREE=5; // get length, distance trees for a dynamic block\nvar IB_CODES=6; // processing fixed or dynamic block\nvar IB_DRY=7;   // output remaining window bytes\nvar IB_DONE=8;  // finished last block, done\nvar IB_BAD=9;   // ot a data error--stuck here\n\nvar fixed_bl = 9;\nvar fixed_bd = 5;\n\nvar fixed_tl = [\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,192,\n    80,7,10, 0,8,96, 0,8,32, 0,9,160,\n    0,8,0, 0,8,128, 0,8,64, 0,9,224,\n    80,7,6, 0,8,88, 0,8,24, 0,9,144,\n    83,7,59, 0,8,120, 0,8,56, 0,9,208,\n    81,7,17, 0,8,104, 0,8,40, 0,9,176,\n    0,8,8, 0,8,136, 0,8,72, 0,9,240,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,200,\n    81,7,13, 0,8,100, 0,8,36, 0,9,168,\n    0,8,4, 0,8,132, 0,8,68, 0,9,232,\n    80,7,8, 0,8,92, 0,8,28, 0,9,152,\n    84,7,83, 0,8,124, 0,8,60, 0,9,216,\n    82,7,23, 0,8,108, 0,8,44, 0,9,184,\n    0,8,12, 0,8,140, 0,8,76, 0,9,248,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,196,\n    81,7,11, 0,8,98, 0,8,34, 0,9,164,\n    0,8,2, 0,8,130, 0,8,66, 0,9,228,\n    80,7,7, 0,8,90, 0,8,26, 0,9,148,\n    84,7,67, 0,8,122, 0,8,58, 0,9,212,\n    82,7,19, 0,8,106, 0,8,42, 0,9,180,\n    0,8,10, 0,8,138, 0,8,74, 0,9,244,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,204,\n    81,7,15, 0,8,102, 0,8,38, 0,9,172,\n    0,8,6, 0,8,134, 0,8,70, 0,9,236,\n    80,7,9, 0,8,94, 0,8,30, 0,9,156,\n    84,7,99, 0,8,126, 0,8,62, 0,9,220,\n    82,7,27, 0,8,110, 0,8,46, 0,9,188,\n    0,8,14, 0,8,142, 0,8,78, 0,9,252,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,194,\n    80,7,10, 0,8,97, 0,8,33, 0,9,162,\n    0,8,1, 0,8,129, 0,8,65, 0,9,226,\n    80,7,6, 0,8,89, 0,8,25, 0,9,146,\n    83,7,59, 0,8,121, 0,8,57, 0,9,210,\n    81,7,17, 0,8,105, 0,8,41, 0,9,178,\n    0,8,9, 0,8,137, 0,8,73, 0,9,242,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,202,\n    81,7,13, 0,8,101, 0,8,37, 0,9,170,\n    0,8,5, 0,8,133, 0,8,69, 0,9,234,\n    80,7,8, 0,8,93, 0,8,29, 0,9,154,\n    84,7,83, 0,8,125, 0,8,61, 0,9,218,\n    82,7,23, 0,8,109, 0,8,45, 0,9,186,\n    0,8,13, 0,8,141, 0,8,77, 0,9,250,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,198,\n    81,7,11, 0,8,99, 0,8,35, 0,9,166,\n    0,8,3, 0,8,131, 0,8,67, 0,9,230,\n    80,7,7, 0,8,91, 0,8,27, 0,9,150,\n    84,7,67, 0,8,123, 0,8,59, 0,9,214,\n    82,7,19, 0,8,107, 0,8,43, 0,9,182,\n    0,8,11, 0,8,139, 0,8,75, 0,9,246,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,206,\n    81,7,15, 0,8,103, 0,8,39, 0,9,174,\n    0,8,7, 0,8,135, 0,8,71, 0,9,238,\n    80,7,9, 0,8,95, 0,8,31, 0,9,158,\n    84,7,99, 0,8,127, 0,8,63, 0,9,222,\n    82,7,27, 0,8,111, 0,8,47, 0,9,190,\n    0,8,15, 0,8,143, 0,8,79, 0,9,254,\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,193,\n\n    80,7,10, 0,8,96, 0,8,32, 0,9,161,\n    0,8,0, 0,8,128, 0,8,64, 0,9,225,\n    80,7,6, 0,8,88, 0,8,24, 0,9,145,\n    83,7,59, 0,8,120, 0,8,56, 0,9,209,\n    81,7,17, 0,8,104, 0,8,40, 0,9,177,\n    0,8,8, 0,8,136, 0,8,72, 0,9,241,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,201,\n    81,7,13, 0,8,100, 0,8,36, 0,9,169,\n    0,8,4, 0,8,132, 0,8,68, 0,9,233,\n    80,7,8, 0,8,92, 0,8,28, 0,9,153,\n    84,7,83, 0,8,124, 0,8,60, 0,9,217,\n    82,7,23, 0,8,108, 0,8,44, 0,9,185,\n    0,8,12, 0,8,140, 0,8,76, 0,9,249,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,197,\n    81,7,11, 0,8,98, 0,8,34, 0,9,165,\n    0,8,2, 0,8,130, 0,8,66, 0,9,229,\n    80,7,7, 0,8,90, 0,8,26, 0,9,149,\n    84,7,67, 0,8,122, 0,8,58, 0,9,213,\n    82,7,19, 0,8,106, 0,8,42, 0,9,181,\n    0,8,10, 0,8,138, 0,8,74, 0,9,245,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,205,\n    81,7,15, 0,8,102, 0,8,38, 0,9,173,\n    0,8,6, 0,8,134, 0,8,70, 0,9,237,\n    80,7,9, 0,8,94, 0,8,30, 0,9,157,\n    84,7,99, 0,8,126, 0,8,62, 0,9,221,\n    82,7,27, 0,8,110, 0,8,46, 0,9,189,\n    0,8,14, 0,8,142, 0,8,78, 0,9,253,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,195,\n    80,7,10, 0,8,97, 0,8,33, 0,9,163,\n    0,8,1, 0,8,129, 0,8,65, 0,9,227,\n    80,7,6, 0,8,89, 0,8,25, 0,9,147,\n    83,7,59, 0,8,121, 0,8,57, 0,9,211,\n    81,7,17, 0,8,105, 0,8,41, 0,9,179,\n    0,8,9, 0,8,137, 0,8,73, 0,9,243,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,203,\n    81,7,13, 0,8,101, 0,8,37, 0,9,171,\n    0,8,5, 0,8,133, 0,8,69, 0,9,235,\n    80,7,8, 0,8,93, 0,8,29, 0,9,155,\n    84,7,83, 0,8,125, 0,8,61, 0,9,219,\n    82,7,23, 0,8,109, 0,8,45, 0,9,187,\n    0,8,13, 0,8,141, 0,8,77, 0,9,251,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,199,\n    81,7,11, 0,8,99, 0,8,35, 0,9,167,\n    0,8,3, 0,8,131, 0,8,67, 0,9,231,\n    80,7,7, 0,8,91, 0,8,27, 0,9,151,\n    84,7,67, 0,8,123, 0,8,59, 0,9,215,\n    82,7,19, 0,8,107, 0,8,43, 0,9,183,\n    0,8,11, 0,8,139, 0,8,75, 0,9,247,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,207,\n    81,7,15, 0,8,103, 0,8,39, 0,9,175,\n    0,8,7, 0,8,135, 0,8,71, 0,9,239,\n    80,7,9, 0,8,95, 0,8,31, 0,9,159,\n    84,7,99, 0,8,127, 0,8,63, 0,9,223,\n    82,7,27, 0,8,111, 0,8,47, 0,9,191,\n    0,8,15, 0,8,143, 0,8,79, 0,9,255\n];\nvar fixed_td = [\n    80,5,1, 87,5,257, 83,5,17, 91,5,4097,\n    81,5,5, 89,5,1025, 85,5,65, 93,5,16385,\n    80,5,3, 88,5,513, 84,5,33, 92,5,8193,\n    82,5,9, 90,5,2049, 86,5,129, 192,5,24577,\n    80,5,2, 87,5,385, 83,5,25, 91,5,6145,\n    81,5,7, 89,5,1537, 85,5,97, 93,5,24577,\n    80,5,4, 88,5,769, 84,5,49, 92,5,12289,\n    82,5,13, 90,5,3073, 86,5,193, 192,5,24577\n];\n\n  // Tables for deflate from PKZIP's appnote.txt.\n  var cplens = [ // Copy lengths for literal codes 257..285\n        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n  ];\n\n  // see note #13 above about 258\n  var cplext = [ // Extra bits for literal codes 257..285\n        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,\n        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112  // 112==invalid\n  ];\n\n var cpdist = [ // Copy offsets for distance codes 0..29\n        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n        8193, 12289, 16385, 24577\n  ];\n\n  var cpdext = [ // Extra bits for distance codes\n        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\n        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,\n        12, 12, 13, 13];\n\n//\n// ZStream.java\n//\n\nfunction ZStream() {\n}\n\n\nZStream.prototype.inflateInit = function(w, nowrap) {\n    if (!w) {\n\tw = DEF_WBITS;\n    }\n    if (nowrap) {\n\tnowrap = false;\n    }\n    this.istate = new Inflate();\n    return this.istate.inflateInit(this, nowrap?-w:w);\n}\n\nZStream.prototype.inflate = function(f) {\n    if(this.istate==null) return Z_STREAM_ERROR;\n    return this.istate.inflate(this, f);\n}\n\nZStream.prototype.inflateEnd = function(){\n    if(this.istate==null) return Z_STREAM_ERROR;\n    var ret=istate.inflateEnd(this);\n    this.istate = null;\n    return ret;\n}\nZStream.prototype.inflateSync = function(){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSync(this);\n}\nZStream.prototype.inflateSetDictionary = function(dictionary, dictLength){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSetDictionary(this, dictionary, dictLength);\n}\n\n/*\n\n  public int deflateInit(int level){\n    return deflateInit(level, MAX_WBITS);\n  }\n  public int deflateInit(int level, boolean nowrap){\n    return deflateInit(level, MAX_WBITS, nowrap);\n  }\n  public int deflateInit(int level, int bits){\n    return deflateInit(level, bits, false);\n  }\n  public int deflateInit(int level, int bits, boolean nowrap){\n    dstate=new Deflate();\n    return dstate.deflateInit(this, level, nowrap?-bits:bits);\n  }\n  public int deflate(int flush){\n    if(dstate==null){\n      return Z_STREAM_ERROR;\n    }\n    return dstate.deflate(this, flush);\n  }\n  public int deflateEnd(){\n    if(dstate==null) return Z_STREAM_ERROR;\n    int ret=dstate.deflateEnd();\n    dstate=null;\n    return ret;\n  }\n  public int deflateParams(int level, int strategy){\n    if(dstate==null) return Z_STREAM_ERROR;\n    return dstate.deflateParams(this, level, strategy);\n  }\n  public int deflateSetDictionary (byte[] dictionary, int dictLength){\n    if(dstate == null)\n      return Z_STREAM_ERROR;\n    return dstate.deflateSetDictionary(this, dictionary, dictLength);\n  }\n\n*/\n\n/*\n  // Flush as much pending output as possible. All deflate() output goes\n  // through this function so some applications may wish to modify it\n  // to avoid allocating a large strm->next_out buffer and copying into it.\n  // (See also read_buf()).\n  void flush_pending(){\n    int len=dstate.pending;\n\n    if(len>avail_out) len=avail_out;\n    if(len==0) return;\n\n    if(dstate.pending_buf.length<=dstate.pending_out ||\n       next_out.length<=next_out_index ||\n       dstate.pending_buf.length<(dstate.pending_out+len) ||\n       next_out.length<(next_out_index+len)){\n      System.out.println(dstate.pending_buf.length+\", \"+dstate.pending_out+\n\t\t\t \", \"+next_out.length+\", \"+next_out_index+\", \"+len);\n      System.out.println(\"avail_out=\"+avail_out);\n    }\n\n    System.arraycopy(dstate.pending_buf, dstate.pending_out,\n\t\t     next_out, next_out_index, len);\n\n    next_out_index+=len;\n    dstate.pending_out+=len;\n    total_out+=len;\n    avail_out-=len;\n    dstate.pending-=len;\n    if(dstate.pending==0){\n      dstate.pending_out=0;\n    }\n  }\n\n  // Read a new buffer from the current input stream, update the adler32\n  // and total number of bytes read.  All deflate() input goes through\n  // this function so some applications may wish to modify it to avoid\n  // allocating a large strm->next_in buffer and copying from it.\n  // (See also flush_pending()).\n  int read_buf(byte[] buf, int start, int size) {\n    int len=avail_in;\n\n    if(len>size) len=size;\n    if(len==0) return 0;\n\n    avail_in-=len;\n\n    if(dstate.noheader==0) {\n      adler=_adler.adler32(adler, next_in, next_in_index, len);\n    }\n    System.arraycopy(next_in, next_in_index, buf, start, len);\n    next_in_index  += len;\n    total_in += len;\n    return len;\n  }\n\n  public void free(){\n    next_in=null;\n    next_out=null;\n    msg=null;\n    _adler=null;\n  }\n}\n*/\n\n\n//\n// Inflate.java\n//\n\nfunction Inflate() {\n    this.was = [0];\n}\n\nInflate.prototype.inflateReset = function(z) {\n    if(z == null || z.istate == null) return Z_STREAM_ERROR;\n    \n    z.total_in = z.total_out = 0;\n    z.msg = null;\n    z.istate.mode = z.istate.nowrap!=0 ? BLOCKS : METHOD;\n    z.istate.blocks.reset(z, null);\n    return Z_OK;\n}\n\nInflate.prototype.inflateEnd = function(z){\n    if(this.blocks != null)\n      this.blocks.free(z);\n    this.blocks=null;\n    return Z_OK;\n}\n\nInflate.prototype.inflateInit = function(z, w){\n    z.msg = null;\n    this.blocks = null;\n\n    // handle undocumented nowrap option (no zlib header or check)\n    nowrap = 0;\n    if(w < 0){\n      w = - w;\n      nowrap = 1;\n    }\n\n    // set window size\n    if(w<8 ||w>15){\n      this.inflateEnd(z);\n      return Z_STREAM_ERROR;\n    }\n    this.wbits=w;\n\n    z.istate.blocks=new InfBlocks(z, \n\t\t\t\t  z.istate.nowrap!=0 ? null : this,\n\t\t\t\t  1<<w);\n\n    // reset state\n    this.inflateReset(z);\n    return Z_OK;\n  }\n\nInflate.prototype.inflate = function(z, f){\n    var r, b;\n\n    if(z == null || z.istate == null || z.next_in == null)\n      return Z_STREAM_ERROR;\n    f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n    r = Z_BUF_ERROR;\n    while (true){\n      switch (z.istate.mode){\n      case METHOD:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        if(((z.istate.method = z.next_in[z.next_in_index++])&0xf)!=Z_DEFLATED){\n          z.istate.mode = BAD;\n          z.msg=\"unknown compression method\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        if((z.istate.method>>4)+8>z.istate.wbits){\n          z.istate.mode = BAD;\n          z.msg=\"invalid window size\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        z.istate.mode=FLAG;\n      case FLAG:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        b = (z.next_in[z.next_in_index++])&0xff;\n\n        if((((z.istate.method << 8)+b) % 31)!=0){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect header check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        if((b&PRESET_DICT)==0){\n          z.istate.mode = BLOCKS;\n          break;\n        }\n        z.istate.mode = DICT4;\n      case DICT4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=DICT3;\n      case DICT3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode=DICT2;\n      case DICT2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode=DICT1;\n      case DICT1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need += (z.next_in[z.next_in_index++]&0xff);\n        z.adler = z.istate.need;\n        z.istate.mode = DICT0;\n        return Z_NEED_DICT;\n      case DICT0:\n        z.istate.mode = BAD;\n        z.msg = \"need dictionary\";\n        z.istate.marker = 0;       // can try inflateSync\n        return Z_STREAM_ERROR;\n      case BLOCKS:\n\n        r = z.istate.blocks.proc(z, r);\n        if(r == Z_DATA_ERROR){\n          z.istate.mode = BAD;\n          z.istate.marker = 0;     // can try inflateSync\n          break;\n        }\n        if(r == Z_OK){\n          r = f;\n        }\n        if(r != Z_STREAM_END){\n          return r;\n        }\n        r = f;\n        z.istate.blocks.reset(z, z.istate.was);\n        if(z.istate.nowrap!=0){\n          z.istate.mode=DONE;\n          break;\n        }\n        z.istate.mode=CHECK4;\n      case CHECK4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=CHECK3;\n      case CHECK3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode = CHECK2;\n      case CHECK2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode = CHECK1;\n      case CHECK1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=(z.next_in[z.next_in_index++]&0xff);\n\n        if(((z.istate.was[0])) != ((z.istate.need))){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect data check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        z.istate.mode = DONE;\n      case DONE:\n        return Z_STREAM_END;\n      case BAD:\n        return Z_DATA_ERROR;\n      default:\n        return Z_STREAM_ERROR;\n      }\n    }\n  }\n\n\nInflate.prototype.inflateSetDictionary = function(z,  dictionary, dictLength) {\n    var index=0;\n    var length = dictLength;\n    if(z==null || z.istate == null|| z.istate.mode != DICT0)\n      return Z_STREAM_ERROR;\n\n    if(z._adler.adler32(1, dictionary, 0, dictLength)!=z.adler){\n      return Z_DATA_ERROR;\n    }\n\n    z.adler = z._adler.adler32(0, null, 0, 0);\n\n    if(length >= (1<<z.istate.wbits)){\n      length = (1<<z.istate.wbits)-1;\n      index=dictLength - length;\n    }\n    z.istate.blocks.set_dictionary(dictionary, index, length);\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n  }\n\n//  static private byte[] mark = {(byte)0, (byte)0, (byte)0xff, (byte)0xff};\nvar mark = [0, 0, 255, 255]\n\nInflate.prototype.inflateSync = function(z){\n    var n;       // number of bytes to look at\n    var p;       // pointer to bytes\n    var m;       // number of marker bytes found in a row\n    var r, w;   // temporaries to save total_in and total_out\n\n    // set up\n    if(z == null || z.istate == null)\n      return Z_STREAM_ERROR;\n    if(z.istate.mode != BAD){\n      z.istate.mode = BAD;\n      z.istate.marker = 0;\n    }\n    if((n=z.avail_in)==0)\n      return Z_BUF_ERROR;\n    p=z.next_in_index;\n    m=z.istate.marker;\n\n    // search\n    while (n!=0 && m < 4){\n      if(z.next_in[p] == mark[m]){\n        m++;\n      }\n      else if(z.next_in[p]!=0){\n        m = 0;\n      }\n      else{\n        m = 4 - m;\n      }\n      p++; n--;\n    }\n\n    // restore\n    z.total_in += p-z.next_in_index;\n    z.next_in_index = p;\n    z.avail_in = n;\n    z.istate.marker = m;\n\n    // return no joy or set up to restart on a new block\n    if(m != 4){\n      return Z_DATA_ERROR;\n    }\n    r=z.total_in;  w=z.total_out;\n    this.inflateReset(z);\n    z.total_in=r;  z.total_out = w;\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n  // implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH\n  // but removes the length bytes of the resulting empty stored block. When\n  // decompressing, PPP checks that at the end of input packet, inflate is\n  // waiting for these length bytes.\nInflate.prototype.inflateSyncPoint = function(z){\n    if(z == null || z.istate == null || z.istate.blocks == null)\n      return Z_STREAM_ERROR;\n    return z.istate.blocks.sync_point();\n}\n\n\n//\n// InfBlocks.java\n//\n\nvar INFBLOCKS_BORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\nfunction InfBlocks(z, checkfn, w) {\n    this.hufts=new Int32Array(MANY*3);\n    this.window=new Uint8Array(w);\n    this.end=w;\n    this.checkfn = checkfn;\n    this.mode = IB_TYPE;\n    this.reset(z, null);\n\n    this.left = 0;            // if STORED, bytes left to copy \n\n    this.table = 0;           // table lengths (14 bits) \n    this.index = 0;           // index into blens (or border) \n    this.blens = null;         // bit lengths of codes \n    this.bb=new Int32Array(1); // bit length tree depth \n    this.tb=new Int32Array(1); // bit length decoding tree \n\n    this.codes = new InfCodes();\n\n    this.last = 0;            // true if this block is the last block \n\n  // mode independent information \n    this.bitk = 0;            // bits in bit buffer \n    this.bitb = 0;            // bit buffer \n    this.read = 0;            // window read pointer \n    this.write = 0;           // window write pointer \n    this.check = 0;          // check on output \n\n    this.inftree=new InfTree();\n}\n\n\n\n\nInfBlocks.prototype.reset = function(z, c){\n    if(c) c[0]=this.check;\n    if(this.mode==IB_CODES){\n      this.codes.free(z);\n    }\n    this.mode=IB_TYPE;\n    this.bitk=0;\n    this.bitb=0;\n    this.read=this.write=0;\n\n    if(this.checkfn)\n      z.adler=this.check=z._adler.adler32(0, null, 0, 0);\n  }\n\n InfBlocks.prototype.proc = function(z, r){\n    var t;              // temporary storage\n    var b;              // bit buffer\n    var k;              // bits in bit buffer\n    var p;              // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n\n    // copy input/output information to locals (UPDATE macro restores)\n    {p=z.next_in_index;n=z.avail_in;b=this.bitb;k=this.bitk;}\n    {q=this.write;m=(q<this.read ? this.read-q-1 : this.end-q);}\n\n    // process input based on current state\n    while(true){\n      switch (this.mode){\n      case IB_TYPE:\n\n\twhile(k<(3)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\tt = (b & 7);\n\tthis.last = t & 1;\n\n\tswitch (t >>> 1){\n        case 0:                         // stored \n          {b>>>=(3);k-=(3);}\n          t = k & 7;                    // go to byte boundary\n\n          {b>>>=(t);k-=(t);}\n          this.mode = IB_LENS;                  // get length of stored block\n          break;\n        case 1:                         // fixed\n          {\n              var bl=new Int32Array(1);\n\t      var bd=new Int32Array(1);\n              var tl=[];\n\t      var td=[];\n\n\t      inflate_trees_fixed(bl, bd, tl, td, z);\n              this.codes.init(bl[0], bd[0], tl[0], 0, td[0], 0, z);\n          }\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_CODES;\n          break;\n        case 2:                         // dynamic\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_TABLE;\n          break;\n        case 3:                         // illegal\n\n          {b>>>=(3);k-=(3);}\n          this.mode = BAD;\n          z.msg = \"invalid block type\";\n          r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tbreak;\n      case IB_LENS:\n\twhile(k<(32)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)){\n\t  this.mode = BAD;\n\t  z.msg = \"invalid stored block lengths\";\n\t  r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tthis.left = (b & 0xffff);\n\tb = k = 0;                       // dump bits\n\tthis.mode = this.left!=0 ? IB_STORED : (this.last!=0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_STORED:\n\tif (n == 0){\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tif(m==0){\n\t  if(q==end&&read!=0){\n\t    q=0; m=(q<this.read ? this.read-q-1 : this.end-q);\n\t  }\n\t  if(m==0){\n\t    this.write=q; \n\t    r=this.inflate_flush(z,r);\n\t    q=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    if(q==this.end && this.read != 0){\n\t      q=0; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    }\n\t    if(m==0){\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\tt = this.left;\n\tif(t>n) t = n;\n\tif(t>m) t = m;\n\tarrayCopy(z.next_in, p, this.window, q, t);\n\tp += t;  n -= t;\n\tq += t;  m -= t;\n\tif ((this.left -= t) != 0)\n\t  break;\n\tthis.mode = (this.last != 0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_TABLE:\n\n\twhile(k<(14)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.table = t = (b & 0x3fff);\n\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)\n\t  {\n\t    this.mode = IB_BAD;\n\t    z.msg = \"too many length or distance symbols\";\n\t    r = Z_DATA_ERROR;\n\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  }\n\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\tif(this.blens==null || this.blens.length<t){\n\t    this.blens=new Int32Array(t);\n\t}\n\telse{\n\t  for(var i=0; i<t; i++){\n              this.blens[i]=0;\n          }\n\t}\n\n\t{b>>>=(14);k-=(14);}\n\n\tthis.index = 0;\n\tmode = IB_BTREE;\n      case IB_BTREE:\n\twhile (this.index < 4 + (this.table >>> 10)){\n\t  while(k<(3)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = b&7;\n\n\t  {b>>>=(3);k-=(3);}\n\t}\n\n\twhile(this.index < 19){\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = 0;\n\t}\n\n\tthis.bb[0] = 7;\n\tt = this.inftree.inflate_trees_bits(this.blens, this.bb, this.tb, this.hufts, z);\n\tif (t != Z_OK){\n\t  r = t;\n\t  if (r == Z_DATA_ERROR){\n\t    this.blens=null;\n\t    this.mode = IB_BAD;\n\t  }\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tthis.index = 0;\n\tthis.mode = IB_DTREE;\n      case IB_DTREE:\n\twhile (true){\n\t  t = this.table;\n\t  if(!(this.index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))){\n\t    break;\n\t  }\n\n\t  var h; //int[]\n\t  var i, j, c;\n\n\t  t = this.bb[0];\n\n\t  while(k<(t)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n//\t  if (this.tb[0]==-1){\n//            dlog(\"null...\");\n//\t  }\n\n\t  t=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+1];\n\t  c=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+2];\n\n\t  if (c < 16){\n\t    b>>>=(t);k-=(t);\n\t    this.blens[this.index++] = c;\n\t  }\n\t  else { // c == 16..18\n\t    i = c == 18 ? 7 : c - 14;\n\t    j = c == 18 ? 11 : 3;\n\n\t    while(k<(t+i)){\n\t      if(n!=0){\n\t\tr=Z_OK;\n\t      }\n\t      else{\n\t\tthis.bitb=b; this.bitk=k; \n\t\tz.avail_in=n;\n\t\tz.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\tthis.write=q;\n\t\treturn this.inflate_flush(z,r);\n\t      };\n\t      n--;\n\t      b|=(z.next_in[p++]&0xff)<<k;\n\t      k+=8;\n\t    }\n\n\t    b>>>=(t);k-=(t);\n\n\t    j += (b & inflate_mask[i]);\n\n\t    b>>>=(i);k-=(i);\n\n\t    i = this.index;\n\t    t = this.table;\n\t    if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) ||\n\t\t(c == 16 && i < 1)){\n\t      this.blens=null;\n\t      this.mode = IB_BAD;\n\t      z.msg = \"invalid bit length repeat\";\n\t      r = Z_DATA_ERROR;\n\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\n\t    c = c == 16 ? this.blens[i-1] : 0;\n\t    do{\n\t      this.blens[i++] = c;\n\t    }\n\t    while (--j!=0);\n\t    this.index = i;\n\t  }\n\t}\n\n\tthis.tb[0]=-1;\n\t{\n\t    var bl=new Int32Array(1);\n\t    var bd=new Int32Array(1);\n\t    var tl=new Int32Array(1);\n\t    var td=new Int32Array(1);\n\t    bl[0] = 9;         // must be <= 9 for lookahead assumptions\n\t    bd[0] = 6;         // must be <= 9 for lookahead assumptions\n\n\t    t = this.table;\n\t    t = this.inftree.inflate_trees_dynamic(257 + (t & 0x1f), \n\t\t\t\t\t      1 + ((t >> 5) & 0x1f),\n\t\t\t\t\t      this.blens, bl, bd, tl, td, this.hufts, z);\n\n\t    if (t != Z_OK){\n\t        if (t == Z_DATA_ERROR){\n\t            this.blens=null;\n\t            this.mode = BAD;\n\t        }\n\t        r = t;\n\n\t        this.bitb=b; this.bitk=k; \n\t        z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t        this.write=q;\n\t        return this.inflate_flush(z,r);\n\t    }\n\t    this.codes.init(bl[0], bd[0], this.hufts, tl[0], this.hufts, td[0], z);\n\t}\n\tthis.mode = IB_CODES;\n      case IB_CODES:\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n; z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\n\tif ((r = this.codes.proc(this, z, r)) != Z_STREAM_END){\n\t  return this.inflate_flush(z, r);\n\t}\n\tr = Z_OK;\n\tthis.codes.free(z);\n\n\tp=z.next_in_index; n=z.avail_in;b=this.bitb;k=this.bitk;\n\tq=this.write;m = (q < this.read ? this.read-q-1 : this.end-q);\n\n\tif (this.last==0){\n\t  this.mode = IB_TYPE;\n\t  break;\n\t}\n\tthis.mode = IB_DRY;\n      case IB_DRY:\n\tthis.write=q; \n\tr = this.inflate_flush(z, r); \n\tq=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\tif (this.read != this.write){\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z, r);\n\t}\n\tmode = DONE;\n      case IB_DONE:\n\tr = Z_STREAM_END;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      case IB_BAD:\n\tr = Z_DATA_ERROR;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      }\n    }\n  }\n\nInfBlocks.prototype.free = function(z){\n    this.reset(z, null);\n    this.window=null;\n    this.hufts=null;\n}\n\nInfBlocks.prototype.set_dictionary = function(d, start, n){\n    arrayCopy(d, start, window, 0, n);\n    this.read = this.write = n;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. \nInfBlocks.prototype.sync_point = function(){\n    return this.mode == IB_LENS;\n}\n\n  // copy as much as possible from the sliding window to the output area\nInfBlocks.prototype.inflate_flush = function(z, r){\n    var n;\n    var p;\n    var q;\n\n    // local copies of source and destination pointers\n    p = z.next_out_index;\n    q = this.read;\n\n    // compute number of bytes to copy as far as end of window\n    n = ((q <= this.write ? this.write : this.end) - q);\n    if (n > z.avail_out) n = z.avail_out;\n    if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n    // update counters\n    z.avail_out -= n;\n    z.total_out += n;\n\n    // update check information\n    if(this.checkfn != null)\n      z.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n    // copy as far as end of window\n    arrayCopy(this.window, q, z.next_out, p, n);\n    p += n;\n    q += n;\n\n    // see if more to copy at beginning of window\n    if (q == this.end){\n      // wrap pointers\n      q = 0;\n      if (this.write == this.end)\n        this.write = 0;\n\n      // compute bytes to copy\n      n = this.write - q;\n      if (n > z.avail_out) n = z.avail_out;\n      if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n      // update counters\n      z.avail_out -= n;\n      z.total_out += n;\n\n      // update check information\n      if(this.checkfn != null)\n\tz.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n      // copy\n      arrayCopy(this.window, q, z.next_out, p, n);\n      p += n;\n      q += n;\n    }\n\n    // update pointers\n    z.next_out_index = p;\n    this.read = q;\n\n    // done\n    return r;\n  }\n\n//\n// InfCodes.java\n//\n\nvar IC_START=0;  // x: set up for LEN\nvar IC_LEN=1;    // i: get length/literal/eob next\nvar IC_LENEXT=2; // i: getting length extra (have base)\nvar IC_DIST=3;   // i: get distance next\nvar IC_DISTEXT=4;// i: getting distance extra\nvar IC_COPY=5;   // o: copying bytes in window, waiting for space\nvar IC_LIT=6;    // o: got literal, waiting for output space\nvar IC_WASH=7;   // o: got eob, possibly still output waiting\nvar IC_END=8;    // x: got eob and all data flushed\nvar IC_BADCODE=9;// x: got error\n\nfunction InfCodes() {\n}\n\nInfCodes.prototype.init = function(bl, bd, tl, tl_index, td, td_index, z) {\n    this.mode=IC_START;\n    this.lbits=bl;\n    this.dbits=bd;\n    this.ltree=tl;\n    this.ltree_index=tl_index;\n    this.dtree = td;\n    this.dtree_index=td_index;\n    this.tree=null;\n}\n\nInfCodes.prototype.proc = function(s, z, r){ \n    var j;              // temporary storage\n    var t;              // temporary pointer (int[])\n    var tindex;         // temporary pointer\n    var e;              // extra bits or operation\n    var b=0;            // bit buffer\n    var k=0;            // bits in bit buffer\n    var p=0;            // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n    var f;              // pointer to copy strings from\n\n    // copy input/output information to locals (UPDATE macro restores)\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // process input and output based on current state\n    while (true){\n      switch (this.mode){\n\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n      case IC_START:         // x: set up for LEN\n\tif (m >= 258 && n >= 10){\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  r = this.inflate_fast(this.lbits, this.dbits, \n\t\t\t   this.ltree, this.ltree_index, \n\t\t\t   this.dtree, this.dtree_index,\n\t\t\t   s, z);\n\n\t  p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n\t  q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t  if (r != Z_OK){\n\t    this.mode = r == Z_STREAM_END ? IC_WASH : IC_BADCODE;\n\t    break;\n\t  }\n\t}\n\tthis.need = this.lbits;\n\tthis.tree = this.ltree;\n\tthis.tree_index=this.ltree_index;\n\n\tthis.mode = IC_LEN;\n      case IC_LEN:           // i: get length/literal/eob next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b&inflate_mask[j]))*3;\n\n\tb>>>=(this.tree[tindex+1]);\n\tk-=(this.tree[tindex+1]);\n\n\te=this.tree[tindex];\n\n\tif(e == 0){               // literal\n\t  this.lit = this.tree[tindex+2];\n\t  this.mode = IC_LIT;\n\t  break;\n\t}\n\tif((e & 16)!=0 ){          // length\n\t  this.get = e & 15;\n\t  this.len = this.tree[tindex+2];\n\t  this.mode = IC_LENEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tif ((e & 32)!=0){               // end of block\n\t  this.mode = IC_WASH;\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid literal/length code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_LENEXT:        // i: getting length extra (have base)\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.len += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.need = this.dbits;\n\tthis.tree = this.dtree;\n\tthis.tree_index = this.dtree_index;\n\tthis.mode = IC_DIST;\n      case IC_DIST:          // i: get distance next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b & inflate_mask[j]))*3;\n\n\tb>>=this.tree[tindex+1];\n\tk-=this.tree[tindex+1];\n\n\te = (this.tree[tindex]);\n\tif((e & 16)!=0){               // distance\n\t  this.get = e & 15;\n\t  this.dist = this.tree[tindex+2];\n\t  this.mode = IC_DISTEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid distance code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_DISTEXT:       // i: getting distance extra\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.dist += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.mode = IC_COPY;\n      case IC_COPY:          // o: copying bytes in window, waiting for space\n        f = q - this.dist;\n        while(f < 0){     // modulo window size-\"while\" instead\n          f += s.end;     // of \"if\" handles invalid distances\n\t}\n\twhile (this.len!=0){\n\n\t  if(m==0){\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.write=q; r=s.inflate_flush(z,r);\n\t      q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t      if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\n\t      if(m==0){\n\t\ts.bitb=b;s.bitk=k;\n\t\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\ts.write=q;\n\t\treturn s.inflate_flush(z,r);\n\t      }  \n\t    }\n\t  }\n\n\t  s.window[q++]=s.window[f++]; m--;\n\n\t  if (f == s.end)\n            f = 0;\n\t  this.len--;\n\t}\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_LIT:           // o: got literal, waiting for output space\n\tif(m==0){\n\t  if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t  if(m==0){\n\t    s.write=q; r=s.inflate_flush(z,r);\n\t    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\t      return s.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\ts.window[q++]=this.lit; m--;\n\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_WASH:           // o: got eob, possibly more output\n\tif (k > 7){        // return unused byte, if any\n\t  k -= 8;\n\t  n++;\n\t  p--;             // can always return one\n\t}\n\n\ts.write=q; r=s.inflate_flush(z,r);\n\tq=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\tif (s.read != s.write){\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  return s.inflate_flush(z,r);\n\t}\n\tthis.mode = IC_END;\n      case IC_END:\n\tr = Z_STREAM_END;\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_BADCODE:       // x: got error\n\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n      }\n    }\n  }\n\nInfCodes.prototype.free = function(z){\n    //  ZFREE(z, c);\n}\n\n  // Called with number of bytes left to write in window at least 258\n  // (the maximum string length) and number of input bytes available\n  // at least ten.  The ten bytes are six bytes for the longest length/\n  // distance pair plus four bytes for overloading the bit buffer.\n\nInfCodes.prototype.inflate_fast = function(bl, bd, tl, tl_index, td, td_index, s, z) {\n    var t;                // temporary pointer\n    var   tp;             // temporary pointer (int[])\n    var tp_index;         // temporary pointer\n    var e;                // extra bits or operation\n    var b;                // bit buffer\n    var k;                // bits in bit buffer\n    var p;                // input data pointer\n    var n;                // bytes available there\n    var q;                // output window write pointer\n    var m;                // bytes to end of window or read pointer\n    var ml;               // mask for literal/length tree\n    var md;               // mask for distance tree\n    var c;                // bytes to copy\n    var d;                // distance back to copy from\n    var r;                // copy source pointer\n\n    var tp_index_t_3;     // (tp_index+t)*3\n\n    // load input, output, bit values\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // initialize masks\n    ml = inflate_mask[bl];\n    md = inflate_mask[bd];\n\n    // do until not enough input or output space for fast loop\n    do {                          // assume called with m >= 258 && n >= 10\n      // get literal/length code\n      while(k<(20)){              // max bits for literal/length code\n\tn--;\n\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n      }\n\n      t= b&ml;\n      tp=tl; \n      tp_index=tl_index;\n      tp_index_t_3=(tp_index+t)*3;\n      if ((e = tp[tp_index_t_3]) == 0){\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\ts.window[q++] = tp[tp_index_t_3+2];\n\tm--;\n\tcontinue;\n      }\n      do {\n\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\tif((e&16)!=0){\n\t  e &= 15;\n\t  c = tp[tp_index_t_3+2] + (b & inflate_mask[e]);\n\n\t  b>>=e; k-=e;\n\n\t  // decode distance base of block to copy\n\t  while(k<(15)){           // max bits for distance code\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t  }\n\n\t  t= b&md;\n\t  tp=td;\n\t  tp_index=td_index;\n          tp_index_t_3=(tp_index+t)*3;\n\t  e = tp[tp_index_t_3];\n\n\t  do {\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    if((e&16)!=0){\n\t      // get extra bits to add to distance base\n\t      e &= 15;\n\t      while(k<(e)){         // get extra bits (up to 13)\n\t\tn--;\n\t\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t      }\n\n\t      d = tp[tp_index_t_3+2] + (b&inflate_mask[e]);\n\n\t      b>>=(e); k-=(e);\n\n\t      // do the copy\n\t      m -= c;\n\t      if (q >= d){                // offset before dest\n\t\t//  just copy\n\t\tr=q-d;\n\t\tif(q-r>0 && 2>(q-r)){           \n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t\telse{\n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t      }\n\t      else{                  // else offset after destination\n                r=q-d;\n                do{\n                  r+=s.end;          // force pointer in window\n                }while(r<0);         // covers invalid distances\n\t\te=s.end-r;\n\t\tif(c>e){             // if source crosses,\n\t\t  c-=e;              // wrapped copy\n\t\t  if(q-r>0 && e>(q-r)){           \n\t\t    do{s.window[q++] = s.window[r++];}\n\t\t    while(--e!=0);\n\t\t  }\n\t\t  else{\n\t\t    arrayCopy(s.window, r, s.window, q, e);\n\t\t    q+=e; r+=e; e=0;\n\t\t  }\n\t\t  r = 0;                  // copy rest from start of window\n\t\t}\n\n\t      }\n\n\t      // copy all or what's left\n              do{s.window[q++] = s.window[r++];}\n\t\twhile(--c!=0);\n\t      break;\n\t    }\n\t    else if((e&64)==0){\n\t      t+=tp[tp_index_t_3+2];\n\t      t+=(b&inflate_mask[e]);\n\t      tp_index_t_3=(tp_index+t)*3;\n\t      e=tp[tp_index_t_3];\n\t    }\n\t    else{\n\t      z.msg = \"invalid distance code\";\n\n\t      c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\n\t      return Z_DATA_ERROR;\n\t    }\n\t  }\n\t  while(true);\n\t  break;\n\t}\n\n\tif((e&64)==0){\n\t  t+=tp[tp_index_t_3+2];\n\t  t+=(b&inflate_mask[e]);\n\t  tp_index_t_3=(tp_index+t)*3;\n\t  if((e=tp[tp_index_t_3])==0){\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    s.window[q++]=tp[tp_index_t_3+2];\n\t    m--;\n\t    break;\n\t  }\n\t}\n\telse if((e&32)!=0){\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n \n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_STREAM_END;\n\t}\n\telse{\n\t  z.msg=\"invalid literal/length code\";\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_DATA_ERROR;\n\t}\n      } \n      while(true);\n    } \n    while(m>=258 && n>= 10);\n\n    // not enough input or output--restore pointers and return\n    c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n    s.bitb=b;s.bitk=k;\n    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n    s.write=q;\n\n    return Z_OK;\n}\n\n//\n// InfTree.java\n//\n\nfunction InfTree() {\n}\n\nInfTree.prototype.huft_build = function(b, bindex, n, s, d, e, t, m, hp, hn, v) {\n\n    // Given a list of code lengths and a maximum table size, make a set of\n    // tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR\n    // if the given code set is incomplete (the tables are still built in this\n    // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of\n    // lengths), or Z_MEM_ERROR if not enough memory.\n\n    var a;                       // counter for codes of length k\n    var f;                       // i repeats in table every f entries\n    var g;                       // maximum code length\n    var h;                       // table level\n    var i;                       // counter, current code\n    var j;                       // counter\n    var k;                       // number of bits in current code\n    var l;                       // bits per table (returned in m)\n    var mask;                    // (1 << w) - 1, to avoid cc -O bug on HP\n    var p;                       // pointer into c[], b[], or v[]\n    var q;                       // points to current table\n    var w;                       // bits before this table == (l * h)\n    var xp;                      // pointer into x\n    var y;                       // number of dummy codes added\n    var z;                       // number of entries in current table\n\n    // Generate counts for each bit length\n\n    p = 0; i = n;\n    do {\n      this.c[b[bindex+p]]++; p++; i--;   // assume all entries <= BMAX\n    }while(i!=0);\n\n    if(this.c[0] == n){                // null input--all zero length codes\n      t[0] = -1;\n      m[0] = 0;\n      return Z_OK;\n    }\n\n    // Find minimum and maximum length, bound *m by those\n    l = m[0];\n    for (j = 1; j <= BMAX; j++)\n      if(this.c[j]!=0) break;\n    k = j;                        // minimum code length\n    if(l < j){\n      l = j;\n    }\n    for (i = BMAX; i!=0; i--){\n      if(this.c[i]!=0) break;\n    }\n    g = i;                        // maximum code length\n    if(l > i){\n      l = i;\n    }\n    m[0] = l;\n\n    // Adjust last length count to fill out codes, if needed\n    for (y = 1 << j; j < i; j++, y <<= 1){\n      if ((y -= this.c[j]) < 0){\n        return Z_DATA_ERROR;\n      }\n    }\n    if ((y -= this.c[i]) < 0){\n      return Z_DATA_ERROR;\n    }\n    this.c[i] += y;\n\n    // Generate starting offsets into the value table for each length\n    this.x[1] = j = 0;\n    p = 1;  xp = 2;\n    while (--i!=0) {                 // note that i == g from above\n      this.x[xp] = (j += this.c[p]);\n      xp++;\n      p++;\n    }\n\n    // Make a table of values in order of bit lengths\n    i = 0; p = 0;\n    do {\n      if ((j = b[bindex+p]) != 0){\n        this.v[this.x[j]++] = i;\n      }\n      p++;\n    }\n    while (++i < n);\n    n = this.x[g];                     // set n to length of v\n\n    // Generate the Huffman codes and for each, make the table entries\n    this.x[0] = i = 0;                 // first Huffman code is zero\n    p = 0;                        // grab values in bit order\n    h = -1;                       // no tables yet--level -1\n    w = -l;                       // bits decoded == (l * h)\n    this.u[0] = 0;                     // just to keep compilers happy\n    q = 0;                        // ditto\n    z = 0;                        // ditto\n\n    // go through the bit lengths (k already is bits in shortest code)\n    for (; k <= g; k++){\n      a = this.c[k];\n      while (a--!=0){\n\t// here i is the Huffman code of length k bits for value *p\n\t// make tables up to required level\n        while (k > w + l){\n          h++;\n          w += l;                 // previous table always l bits\n\t  // compute minimum size table less than or equal to l bits\n          z = g - w;\n          z = (z > l) ? l : z;        // table size upper limit\n          if((f=1<<(j=k-w))>a+1){     // try a k-w bit table\n                                      // too few codes for k-w bit table\n            f -= a + 1;               // deduct codes from patterns left\n            xp = k;\n            if(j < z){\n              while (++j < z){        // try smaller tables up to z bits\n                if((f <<= 1) <= this.c[++xp])\n                  break;              // enough codes to use up j bits\n                f -= this.c[xp];           // else deduct codes from patterns\n              }\n\t    }\n          }\n          z = 1 << j;                 // table entries for j-bit table\n\n\t  // allocate new table\n          if (this.hn[0] + z > MANY){       // (note: doesn't matter for fixed)\n            return Z_DATA_ERROR;       // overflow of MANY\n          }\n          this.u[h] = q = /*hp+*/ this.hn[0];   // DEBUG\n          this.hn[0] += z;\n \n\t  // connect to last table, if there is one\n\t  if(h!=0){\n            this.x[h]=i;           // save pattern for backing up\n            this.r[0]=j;     // bits in this table\n            this.r[1]=l;     // bits to dump before this table\n            j=i>>>(w - l);\n            this.r[2] = (q - this.u[h-1] - j);               // offset to this table\n            arrayCopy(this.r, 0, hp, (this.u[h-1]+j)*3, 3); // connect to last table\n          }\n          else{\n            t[0] = q;               // first table is returned result\n\t  }\n        }\n\n\t// set up table entry in r\n        this.r[1] = (k - w);\n        if (p >= n){\n          this.r[0] = 128 + 64;      // out of values--invalid code\n\t}\n        else if (v[p] < s){\n          this.r[0] = (this.v[p] < 256 ? 0 : 32 + 64);  // 256 is end-of-block\n          this.r[2] = this.v[p++];          // simple code is just the value\n        }\n        else{\n          this.r[0]=(e[this.v[p]-s]+16+64); // non-simple--look up in lists\n          this.r[2]=d[this.v[p++] - s];\n        }\n\n        // fill code-like entries with r\n        f=1<<(k-w);\n        for (j=i>>>w;j<z;j+=f){\n          arrayCopy(this.r, 0, hp, (q+j)*3, 3);\n\t}\n\n\t// backwards increment the k-bit code i\n        for (j = 1 << (k - 1); (i & j)!=0; j >>>= 1){\n          i ^= j;\n\t}\n        i ^= j;\n\n\t// backup over finished tables\n        mask = (1 << w) - 1;      // needed on HP, cc -O bug\n        while ((i & mask) != this.x[h]){\n          h--;                    // don't need to update q\n          w -= l;\n          mask = (1 << w) - 1;\n        }\n      }\n    }\n    // Return Z_BUF_ERROR if we were given an incomplete table\n    return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n}\n\nInfTree.prototype.inflate_trees_bits = function(c, bb, tb, hp, z) {\n    var result;\n    this.initWorkArea(19);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, 19, 19, null, null, tb, bb, hp, this.hn, this.v);\n\n    if(result == Z_DATA_ERROR){\n      z.msg = \"oversubscribed dynamic bit lengths tree\";\n    }\n    else if(result == Z_BUF_ERROR || bb[0] == 0){\n      z.msg = \"incomplete dynamic bit lengths tree\";\n      result = Z_DATA_ERROR;\n    }\n    return result;\n}\n\nInfTree.prototype.inflate_trees_dynamic = function(nl, nd, c, bl, bd, tl, td, hp, z) {\n    var result;\n\n    // build literal/length tree\n    this.initWorkArea(288);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, this.hn, this.v);\n    if (result != Z_OK || bl[0] == 0){\n      if(result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed literal/length tree\";\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"incomplete literal/length tree\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    // build distance tree\n    this.initWorkArea(288);\n    result = this.huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, this.hn, this.v);\n\n    if (result != Z_OK || (bd[0] == 0 && nl > 257)){\n      if (result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed distance tree\";\n      }\n      else if (result == Z_BUF_ERROR) {\n        z.msg = \"incomplete distance tree\";\n        result = Z_DATA_ERROR;\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"empty distance tree with lengths\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    return Z_OK;\n}\n/*\n  static int inflate_trees_fixed(int[] bl,  //literal desired/actual bit depth\n                                 int[] bd,  //distance desired/actual bit depth\n                                 int[][] tl,//literal/length tree result\n                                 int[][] td,//distance tree result \n                                 ZStream z  //for memory allocation\n\t\t\t\t ){\n\n*/\n\nfunction inflate_trees_fixed(bl, bd, tl, td, z) {\n    bl[0]=fixed_bl;\n    bd[0]=fixed_bd;\n    tl[0]=fixed_tl;\n    td[0]=fixed_td;\n    return Z_OK;\n}\n\nInfTree.prototype.initWorkArea = function(vsize){\n    if(this.hn==null){\n        this.hn=new Int32Array(1);\n        this.v=new Int32Array(vsize);\n        this.c=new Int32Array(BMAX+1);\n        this.r=new Int32Array(3);\n        this.u=new Int32Array(BMAX);\n        this.x=new Int32Array(BMAX+1);\n    }\n    if(this.v.length<vsize){ \n        this.v=new Int32Array(vsize); \n    }\n    for(var i=0; i<vsize; i++){this.v[i]=0;}\n    for(var i=0; i<BMAX+1; i++){this.c[i]=0;}\n    for(var i=0; i<3; i++){this.r[i]=0;}\n//  for(int i=0; i<BMAX; i++){u[i]=0;}\n    arrayCopy(this.c, 0, this.u, 0, BMAX);\n//  for(int i=0; i<BMAX+1; i++){x[i]=0;}\n    arrayCopy(this.c, 0, this.x, 0, BMAX+1);\n}\n\nvar testArray = new Uint8Array(1);\nvar hasSubarray = (typeof testArray.subarray === 'function');\nvar hasSlice = false; /* (typeof testArray.slice === 'function'); */ // Chrome slice performance is so dire that we're currently not using it...\n\nfunction arrayCopy(src, srcOffset, dest, destOffset, count) {\n    if (count == 0) {\n        return;\n    } \n    if (!src) {\n        throw \"Undef src\";\n    } else if (!dest) {\n        throw \"Undef dest\";\n    }\n\n    if (srcOffset == 0 && count == src.length) {\n        arrayCopy_fast(src, dest, destOffset);\n    } else if (hasSubarray) {\n        arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset); \n    } else if (src.BYTES_PER_ELEMENT == 1 && count > 100) {\n        arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);\n    } else { \n        arrayCopy_slow(src, srcOffset, dest, destOffset, count);\n    }\n\n}\n\nfunction arrayCopy_slow(src, srcOffset, dest, destOffset, count) {\n\n    // dlog('_slow call: srcOffset=' + srcOffset + '; destOffset=' + destOffset + '; count=' + count);\n\n     for (var i = 0; i < count; ++i) {\n        dest[destOffset + i] = src[srcOffset + i];\n    }\n}\n\nfunction arrayCopy_fast(src, dest, destOffset) {\n    dest.set(src, destOffset);\n}\n\n\n  // largest prime smaller than 65536\nvar ADLER_BASE=65521; \n  // NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1\nvar ADLER_NMAX=5552;\n\nfunction adler32(adler, /* byte[] */ buf,  index, len){\n    if(buf == null){ return 1; }\n\n    var s1=adler&0xffff;\n    var s2=(adler>>16)&0xffff;\n    var k;\n\n    while(len > 0) {\n      k=len<ADLER_NMAX?len:ADLER_NMAX;\n      len-=k;\n      while(k>=16){\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        k-=16;\n      }\n      if(k!=0){\n        do{\n          s1+=buf[index++]&0xff; s2+=s1;\n        }\n        while(--k!=0);\n      }\n      s1%=ADLER_BASE;\n      s2%=ADLER_BASE;\n    }\n    return (s2<<16)|s1;\n}\n\n\n\nfunction jszlib_inflate_buffer(buffer, start, length, afterUncOffset) {\n    if (!start) {\n        buffer = new Uint8Array(buffer);\n    } else if (!length) {\n        buffer = new Uint8Array(buffer, start, buffer.byteLength - start);\n    } else {\n        buffer = new Uint8Array(buffer, start, length);\n    }\n\n    var z = new ZStream();\n    z.inflateInit(DEF_WBITS, true);\n    z.next_in = buffer;\n    z.next_in_index = 0;\n    z.avail_in = buffer.length;\n\n    var oBlockList = [];\n    var totalSize = 0;\n    while (true) {\n        var obuf = new Uint8Array(32000);\n        z.next_out = obuf;\n        z.next_out_index = 0;\n        z.avail_out = obuf.length;\n        var status = z.inflate(Z_NO_FLUSH);\n        if (status != Z_OK && status != Z_STREAM_END && status != Z_BUF_ERROR) {\n            throw z.msg;\n        }\n        if (z.avail_out != 0) {\n            var newob = new Uint8Array(obuf.length - z.avail_out);\n            arrayCopy(obuf, 0, newob, 0, (obuf.length - z.avail_out));\n            obuf = newob;\n        }\n        oBlockList.push(obuf);\n        totalSize += obuf.length;\n        if (status == Z_STREAM_END || status == Z_BUF_ERROR) {\n            break;\n        }\n    }\n\n    if (afterUncOffset) {\n        afterUncOffset[0] = (start || 0) + z.next_in_index;\n    }\n\n    if (oBlockList.length == 1) {\n        return oBlockList[0].buffer;\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = oBlockList[i];\n            arrayCopy(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n}\n\nif (typeof(module) !== 'undefined') {\n  module.exports = {\n    inflateBuffer: jszlib_inflate_buffer,\n    arrayCopy: arrayCopy\n  };\n}\n\n},{}],10:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}]},{},[2])\n\n","var connectTabix = require('../js/tabix').connectTabix;\nvar URLFetchable = require('../js/bin').URLFetchable;\nvar BlobFetchable = require('../js/bin').BlobFetchable;\n\n\n\n// Wrap the reader in a Promise API for LZ compatibility\nfunction urlReader(dataUrl, indexUrl) {\n    return new Promise(function(resolve, reject) {\n        connectTabix(new URLFetchable(dataUrl), new URLFetchable(indexUrl),\n            function (reader, err) {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(reader);\n                }\n            });\n    });\n}\n\nfunction blobReader(data_file, tabix_file) {\n    return new Promise(function(resolve, reject) {\n        connectTabix(new BlobFetchable(data_file), new BlobFetchable(tabix_file),\n            function (reader, err) {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(reader);\n                }\n            });\n    });\n}\n\nwindow.urlReader = urlReader;\nwindow.blobReader = blobReader;\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// lh3utils.js: common support for lh3's file formats\n//\n\nif (typeof(require) !== 'undefined') {\n    var jszlib = require('jszlib');\n    var jszlib_inflate_buffer = jszlib.inflateBuffer;\n    var arrayCopy = jszlib.arrayCopy;\n}\n\nfunction Vob(b, o) {\n    this.block = b;\n    this.offset = o;\n}\n\nVob.prototype.toString = function() {\n    return '' + this.block + ':' + this.offset;\n}\n\nfunction readVob(ba, offset, allowZero) {\n    var block = ((ba[offset+6] & 0xff) * 0x100000000) + ((ba[offset+5] & 0xff) * 0x1000000) + ((ba[offset+4] & 0xff) * 0x10000) + ((ba[offset+3] & 0xff) * 0x100) + ((ba[offset+2] & 0xff));\n    var bint = (ba[offset+1] << 8) | (ba[offset]);\n    if (block == 0 && bint == 0 && !allowZero) {\n        return null;  // Should only happen in the linear index?\n    } else {\n        return new Vob(block, bint);\n    }\n}\n\nfunction unbgzf(data, lim) {\n    lim = Math.min(lim || 1, data.byteLength - 50);\n    var oBlockList = [];\n    var ptr = [0];\n    var totalSize = 0;\n\n    while (ptr[0] < lim) {\n        var ba = new Uint8Array(data, ptr[0], 12); // FIXME is this enough for all credible BGZF block headers?\n        var xlen = (ba[11] << 8) | (ba[10]);\n        // dlog('xlen[' + (ptr[0]) +']=' + xlen);\n        var unc = jszlib_inflate_buffer(data, 12 + xlen + ptr[0], Math.min(65536, data.byteLength - 12 - xlen - ptr[0]), ptr);\n        ptr[0] += 8;\n        totalSize += unc.byteLength;\n        oBlockList.push(unc);\n    }\n\n    if (oBlockList.length == 1) {\n        return oBlockList[0];\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = new Uint8Array(oBlockList[i]);\n            arrayCopy(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n}\n\nfunction Chunk(minv, maxv) {\n    this.minv = minv; this.maxv = maxv;\n}\n\n\n//\n// Binning (transliterated from SAM1.3 spec)\n//\n\n/* calculate bin given an alignment covering [beg,end) (zero-based, half-close-half-open) */\nfunction reg2bin(beg, end)\n{\n    --end;\n    if (beg>>14 == end>>14) return ((1<<15)-1)/7 + (beg>>14);\n    if (beg>>17 == end>>17) return ((1<<12)-1)/7 + (beg>>17);\n    if (beg>>20 == end>>20) return ((1<<9)-1)/7 + (beg>>20);\n    if (beg>>23 == end>>23) return ((1<<6)-1)/7 + (beg>>23);\n    if (beg>>26 == end>>26) return ((1<<3)-1)/7 + (beg>>26);\n    return 0;\n}\n\n/* calculate the list of bins that may overlap with region [beg,end) (zero-based) */\nvar MAX_BIN = (((1<<18)-1)/7);\nfunction reg2bins(beg, end) \n{\n    var i = 0, k, list = [];\n    --end;\n    list.push(0);\n    for (k = 1 + (beg>>26); k <= 1 + (end>>26); ++k) list.push(k);\n    for (k = 9 + (beg>>23); k <= 9 + (end>>23); ++k) list.push(k);\n    for (k = 73 + (beg>>20); k <= 73 + (end>>20); ++k) list.push(k);\n    for (k = 585 + (beg>>17); k <= 585 + (end>>17); ++k) list.push(k);\n    for (k = 4681 + (beg>>14); k <= 4681 + (end>>14); ++k) list.push(k);\n    return list;\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        unbgzf: unbgzf,\n        readVob: readVob,\n        reg2bin: reg2bin,\n        reg2bins: reg2bins,\n        Chunk: Chunk\n    };\n}\n","/*\r\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n * in FIPS 180-1\r\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\r\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n * Distributed under the BSD License\r\n * See http://pajhome.org.uk/crypt/md5 for details.\r\n */\r\n\r\n \"use strict\";\r\n\r\n/*\r\n * Configurable variables. You may need to tweak these to be compatible with\r\n * the server-side, but the defaults work in most cases.\r\n */\r\nvar hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */\r\nvar b64pad  = \"\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\r\n\r\n/*\r\n * These are the functions you'll usually want to call\r\n * They take string arguments and return either hex or base-64 encoded strings\r\n */\r\nfunction hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }\r\nfunction b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }\r\nfunction any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }\r\nfunction hex_hmac_sha1(k, d)\r\n  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\r\nfunction b64_hmac_sha1(k, d)\r\n  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\r\nfunction any_hmac_sha1(k, d, e)\r\n  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }\r\n\r\n/*\r\n * Perform a simple self-test to see if the VM is working\r\n */\r\nfunction sha1_vm_test()\r\n{\r\n  return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\r\n}\r\n\r\n/*\r\n * Calculate the SHA1 of a raw string\r\n */\r\nfunction rstr_sha1(s)\r\n{\r\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\r\n}\r\n\r\n/*\r\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\r\n */\r\nfunction rstr_hmac_sha1(key, data)\r\n{\r\n  var bkey = rstr2binb(key);\r\n  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\r\n\r\n  var ipad = Array(16), opad = Array(16);\r\n  for(var i = 0; i < 16; i++)\r\n  {\r\n    ipad[i] = bkey[i] ^ 0x36363636;\r\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n  }\r\n\r\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\r\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\r\n}\r\n\r\n/*\r\n * Convert a raw string to a hex string\r\n */\r\nfunction rstr2hex(input)\r\n{\r\n  // try { hexcase } catch(e) { hexcase=0; }\r\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\r\n  var output = \"\";\r\n  var x;\r\n  for(var i = 0; i < input.length; i++)\r\n  {\r\n    x = input.charCodeAt(i);\r\n    output += hex_tab.charAt((x >>> 4) & 0x0F)\r\n           +  hex_tab.charAt( x        & 0x0F);\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to a base-64 string\r\n */\r\nfunction rstr2b64(input)\r\n{\r\n  // try { b64pad } catch(e) { b64pad=''; }\r\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n  var output = \"\";\r\n  var len = input.length;\r\n  for(var i = 0; i < len; i += 3)\r\n  {\r\n    var triplet = (input.charCodeAt(i) << 16)\r\n                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)\r\n                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);\r\n    for(var j = 0; j < 4; j++)\r\n    {\r\n      if(i * 8 + j * 6 > input.length * 8) output += b64pad;\r\n      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to an arbitrary string encoding\r\n */\r\nfunction rstr2any(input, encoding)\r\n{\r\n  var divisor = encoding.length;\r\n  var remainders = Array();\r\n  var i, q, x, quotient;\r\n\r\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\r\n  var dividend = Array(Math.ceil(input.length / 2));\r\n  for(i = 0; i < dividend.length; i++)\r\n  {\r\n    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\r\n  }\r\n\r\n  /*\r\n   * Repeatedly perform a long division. The binary array forms the dividend,\r\n   * the length of the encoding is the divisor. Once computed, the quotient\r\n   * forms the dividend for the next step. We stop when the dividend is zero.\r\n   * All remainders are stored for later use.\r\n   */\r\n  while(dividend.length > 0)\r\n  {\r\n    quotient = Array();\r\n    x = 0;\r\n    for(i = 0; i < dividend.length; i++)\r\n    {\r\n      x = (x << 16) + dividend[i];\r\n      q = Math.floor(x / divisor);\r\n      x -= q * divisor;\r\n      if(quotient.length > 0 || q > 0)\r\n        quotient[quotient.length] = q;\r\n    }\r\n    remainders[remainders.length] = x;\r\n    dividend = quotient;\r\n  }\r\n\r\n  /* Convert the remainders to the output string */\r\n  var output = \"\";\r\n  for(i = remainders.length - 1; i >= 0; i--)\r\n    output += encoding.charAt(remainders[i]);\r\n\r\n  /* Append leading zero equivalents */\r\n  var full_length = Math.ceil(input.length * 8 /\r\n                                    (Math.log(encoding.length) / Math.log(2)))\r\n  for(i = output.length; i < full_length; i++)\r\n    output = encoding[0] + output;\r\n\r\n  return output;\r\n}\r\n\r\n/*\r\n * Encode a string as utf-8.\r\n * For efficiency, this assumes the input is valid utf-16.\r\n */\r\nfunction str2rstr_utf8(input)\r\n{\r\n  var output = \"\";\r\n  var i = -1;\r\n  var x, y;\r\n\r\n  while(++i < input.length)\r\n  {\r\n    /* Decode utf-16 surrogate pairs */\r\n    x = input.charCodeAt(i);\r\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\r\n    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)\r\n    {\r\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\r\n      i++;\r\n    }\r\n\r\n    /* Encode output as utf-8 */\r\n    if(x <= 0x7F)\r\n      output += String.fromCharCode(x);\r\n    else if(x <= 0x7FF)\r\n      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),\r\n                                    0x80 | ( x         & 0x3F));\r\n    else if(x <= 0xFFFF)\r\n      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\r\n                                    0x80 | ((x >>> 6 ) & 0x3F),\r\n                                    0x80 | ( x         & 0x3F));\r\n    else if(x <= 0x1FFFFF)\r\n      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\r\n                                    0x80 | ((x >>> 12) & 0x3F),\r\n                                    0x80 | ((x >>> 6 ) & 0x3F),\r\n                                    0x80 | ( x         & 0x3F));\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Encode a string as utf-16\r\n */\r\nfunction str2rstr_utf16le(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length; i++)\r\n    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,\r\n                                  (input.charCodeAt(i) >>> 8) & 0xFF);\r\n  return output;\r\n}\r\n\r\nfunction str2rstr_utf16be(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length; i++)\r\n    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\r\n                                   input.charCodeAt(i)        & 0xFF);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to an array of big-endian words\r\n * Characters >255 have their high-byte silently ignored.\r\n */\r\nfunction rstr2binb(input)\r\n{\r\n  var output = Array(input.length >> 2);\r\n  for(var i = 0; i < output.length; i++)\r\n    output[i] = 0;\r\n  for(var i = 0; i < input.length * 8; i += 8)\r\n    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert an array of big-endian words to a string\r\n */\r\nfunction binb2rstr(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length * 32; i += 8)\r\n    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n */\r\nfunction binb_sha1(x, len)\r\n{\r\n  /* append padding */\r\n  x[len >> 5] |= 0x80 << (24 - len % 32);\r\n  x[((len + 64 >> 9) << 4) + 15] = len;\r\n\r\n  var w = Array(80);\r\n  var a =  1732584193;\r\n  var b = -271733879;\r\n  var c = -1732584194;\r\n  var d =  271733878;\r\n  var e = -1009589776;\r\n\r\n  for(var i = 0; i < x.length; i += 16)\r\n  {\r\n    var olda = a;\r\n    var oldb = b;\r\n    var oldc = c;\r\n    var oldd = d;\r\n    var olde = e;\r\n\r\n    for(var j = 0; j < 80; j++)\r\n    {\r\n      if(j < 16) w[j] = x[i + j];\r\n      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\r\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),\r\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\r\n      e = d;\r\n      d = c;\r\n      c = bit_rol(b, 30);\r\n      b = a;\r\n      a = t;\r\n    }\r\n\r\n    a = safe_add(a, olda);\r\n    b = safe_add(b, oldb);\r\n    c = safe_add(c, oldc);\r\n    d = safe_add(d, oldd);\r\n    e = safe_add(e, olde);\r\n  }\r\n  return Array(a, b, c, d, e);\r\n\r\n}\r\n\r\n/*\r\n * Perform the appropriate triplet combination function for the current\r\n * iteration\r\n */\r\nfunction sha1_ft(t, b, c, d)\r\n{\r\n  if(t < 20) return (b & c) | ((~b) & d);\r\n  if(t < 40) return b ^ c ^ d;\r\n  if(t < 60) return (b & c) | (b & d) | (c & d);\r\n  return b ^ c ^ d;\r\n}\r\n\r\n/*\r\n * Determine the appropriate additive constant for the current iteration\r\n */\r\nfunction sha1_kt(t)\r\n{\r\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\r\n         (t < 60) ? -1894007588 : -899497514;\r\n}\r\n\r\n/*\r\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n * to work around bugs in some JS interpreters.\r\n */\r\nfunction safe_add(x, y)\r\n{\r\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n  return (msw << 16) | (lsw & 0xFFFF);\r\n}\r\n\r\n/*\r\n * Bitwise rotate a 32-bit number to the left.\r\n */\r\nfunction bit_rol(num, cnt)\r\n{\r\n  return (num << cnt) | (num >>> (32 - cnt));\r\n}\r\n\r\nif (typeof(module) !== 'undefined') {\r\n  module.exports = {\r\n    b64_sha1: b64_sha1,\r\n    hex_sha1: hex_sha1\r\n  }\r\n}\r\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// spans.js: JavaScript Intset/Location port.\n//\n\n\"use strict\";\n\n\nfunction Range(min, max)\n{\n    if (typeof(min) != 'number' || typeof(max) != 'number')\n        throw 'Bad range ' + min + ',' + max;\n    this._min = min;\n    this._max = max;\n}\n\nRange.prototype.min = function() {\n    return this._min;\n}\n\nRange.prototype.max = function() {\n    return this._max;\n}\n\nRange.prototype.contains = function(pos) {\n    return pos >= this._min && pos <= this._max;\n}\n\nRange.prototype.isContiguous = function() {\n    return true;\n}\n\nRange.prototype.ranges = function() {\n    return [this];\n}\n\nRange.prototype._pushRanges = function(ranges) {\n    ranges.push(this);\n}\n\nRange.prototype.toString = function() {\n    return '[' + this._min + '-' + this._max + ']';\n}\n\nfunction _Compound(ranges) {\n    // given: a set of unsorted possibly overlapping ranges\n    // sort the input ranges\n    var sorted = ranges.sort(_rangeOrder);\n    // merge overlaps between adjacent ranges\n    var merged = [];\n    var current = sorted.shift();\n    sorted.forEach(function(range) {\n        if (range._min <= current._max) {\n            if (range._max > current._max) {\n                current._max = range._max;\n            }\n        }\n        else {\n            merged.push(current);\n            current = range;\n        }\n    });\n    merged.push(current);\n    this._ranges = merged;\n}\n\n_Compound.prototype.min = function() {\n    return this._ranges[0].min();\n}\n\n_Compound.prototype.max = function() {\n    return this._ranges[this._ranges.length - 1].max();\n}\n\n// returns the index of the first range that is not less than pos\n_Compound.prototype.lower_bound = function(pos) {\n    // first check if pos is out of range\n    var r = this.ranges();\n    if (pos > this.max()) return r.length;\n    if (pos < this.min()) return 0;\n    // do a binary search\n    var a=0, b=r.length - 1;\n    while (a <= b) {\n        var m = Math.floor((a+b)/2);\n        if (pos > r[m]._max) {\n            a = m+1;\n        }\n        else if (pos < r[m]._min) {\n            b = m-1;\n        }\n        else {\n            return m;\n        }\n    }\n    return a;\n}\n\n_Compound.prototype.contains = function(pos) {\n    var lb = this.lower_bound(pos);\n    if (lb < this._ranges.length && this._ranges[lb].contains(pos)) {\n        return true;\n    }\n    return false;\n}\n\n_Compound.prototype.insertRange = function(range) {\n    var lb = this.lower_bound(range._min);\n    if (lb === this._ranges.length) { // range follows this\n        this._ranges.push(range);\n        return;\n    }\n    \n    var r = this.ranges();\n    if (range._max < r[lb]._min) { // range preceeds lb\n        this._ranges.splice(lb,0,range);\n        return;\n    }\n\n    // range overlaps lb (at least)\n    if (r[lb]._min < range._min) range._min = r[lb]._min;\n    var ub = lb+1;\n    while (ub < r.length && r[ub]._min <= range._max) {\n        ub++;\n    }\n    ub--;\n    // ub is the upper bound of the new range\n    if (r[ub]._max > range._max) range._max = r[ub]._max;\n    \n    // splice range into this._ranges\n    this._ranges.splice(lb,ub-lb+1,range);\n    return;\n}\n\n_Compound.prototype.isContiguous = function() {\n    return this._ranges.length > 1;\n}\n\n_Compound.prototype.ranges = function() {\n    return this._ranges;\n}\n\n_Compound.prototype._pushRanges = function(ranges) {\n    for (var ri = 0; ri < this._ranges.length; ++ri)\n        ranges.push(this._ranges[ri]);\n}\n\n_Compound.prototype.toString = function() {\n    var s = '';\n    for (var r = 0; r < this._ranges.length; ++r) {\n        if (r>0) {\n            s = s + ',';\n        }\n        s = s + this._ranges[r].toString();\n    }\n    return s;\n}\n\nfunction union(s0, s1) {\n    if (! (s0 instanceof _Compound)) {\n        if (! (s0 instanceof Array))\n            s0 = [s0];\n        s0 = new _Compound(s0);\n    }\n    \n    if (s1)\n        s0.insertRange(s1);\n\n    return s0;\n}\n\nfunction intersection(s0, s1) {\n    var r0 = s0.ranges();\n    var r1 = s1.ranges();\n    var l0 = r0.length, l1 = r1.length;\n    var i0 = 0, i1 = 0;\n    var or = [];\n\n    while (i0 < l0 && i1 < l1) {\n        var s0 = r0[i0], s1 = r1[i1];\n        var lapMin = Math.max(s0.min(), s1.min());\n        var lapMax = Math.min(s0.max(), s1.max());\n        if (lapMax >= lapMin) {\n            or.push(new Range(lapMin, lapMax));\n        }\n        if (s0.max() > s1.max()) {\n            ++i1;\n        } else {\n            ++i0;\n        }\n    }\n    \n    if (or.length == 0) {\n        return null; // FIXME\n    } else if (or.length == 1) {\n        return or[0];\n    } else {\n        return new _Compound(or);\n    }\n}\n\nfunction coverage(s) {\n    var tot = 0;\n    var rl = s.ranges();\n    for (var ri = 0; ri < rl.length; ++ri) {\n        var r = rl[ri];\n        tot += (r.max() - r.min() + 1);\n    }\n    return tot;\n}\n\n\n\nfunction rangeOrder(a, b)\n{\n    if (a.min() < b.min()) {\n        return -1;\n    } else if (a.min() > b.min()) {\n        return 1;\n    } else if (a.max() < b.max()) {\n        return -1;\n    } else if (b.max() > a.max()) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nfunction _rangeOrder(a, b)\n{\n    if (a._min < b._min) {\n        return -1;\n    } else if (a._min > b._min) {\n        return 1;\n    } else if (a._max < b._max) {\n        return -1;\n    } else if (b._max > a._max) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        Range: Range,\n        union: union,\n        intersection: intersection,\n        coverage: coverage,\n        rangeOver: rangeOrder,\n        _rangeOrder: _rangeOrder\n    }\n}","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n//\n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// tabix.js: basic support for tabix-indexed flatfiles\n//\n\n\"use strict\";\n\nvar TABIX_MAGIC = 0x01494254;\n\nif (typeof(require) !== 'undefined') {\n    var spans = require('./spans');\n    var Range = spans.Range;\n    var union = spans.union;\n    var intersection = spans.intersection;\n\n    var bin = require('./bin');\n    var readInt = bin.readInt;\n    var readShort = bin.readShort;\n    var readByte = bin.readByte;\n    var readInt64 = bin.readInt64;\n    var readFloat = bin.readFloat;\n\n    var lh3utils = require('./lh3utils');\n    var readVob = lh3utils.readVob;\n    var unbgzf = lh3utils.unbgzf;\n    var reg2bins = lh3utils.reg2bins;\n    var Chunk = lh3utils.Chunk;\n}\n\nfunction TabixFile() {\n}\n\nfunction connectTabix(data, tbi, callback) {\n    var tabix = new TabixFile();\n    tabix.data = data;\n    tabix.tbi = tbi;\n\n    tabix.tbi.fetch(function(header) {   // Do we really need to fetch the whole thing? :-(\n        if (!header) {\n            return callback(null, \"Couldn't access Tabix\");\n        }\n\n        var unchead = unbgzf(header, header.byteLength);\n        var uncba = new Uint8Array(unchead);\n        var magic = readInt(uncba, 0);\n        if (magic != TABIX_MAGIC) {\n            return callback(null, 'Not a tabix index');\n        }\n\n        var nref = readInt(uncba, 4);\n        tabix.format = readInt(uncba, 8);\n        tabix.colSeq = readInt(uncba, 12);\n        tabix.colStart = readInt(uncba, 16);\n        tabix.colEnd = readInt(uncba, 20);\n        tabix.meta = readInt(uncba, 24);\n        tabix.skip = readInt(uncba, 28);\n        var nameLength = readInt(uncba, 32);\n\n        tabix.indices = [];\n\n        var p = 36;\n        tabix.chrToIndex = {};\n        tabix.indexToChr = [];\n        for (var i = 0; i < nref; ++i) {\n            var name = ''\n\n            while (true) {\n                var ch = uncba[p++];\n                if (ch == 0)\n                    break;\n\n                name += String.fromCharCode(ch);\n            }\n\n            tabix.chrToIndex[name] = i;\n            if (name.indexOf('chr') == 0) {\n                tabix.chrToIndex[name.substring(3)] = i;\n            } else {\n                tabix.chrToIndex['chr' + name] = i;\n            }\n            tabix.indexToChr.push(name);\n        }\n\n        var minBlockIndex = 1000000000;\n        for (var ref = 0; ref < nref; ++ref) {\n            var blockStart = p;\n            var nbin = readInt(uncba, p); p += 4;\n            for (var b = 0; b < nbin; ++b) {\n                var bin = readInt(uncba, p);\n                var nchnk = readInt(uncba, p+4);\n                p += 8 + (nchnk * 16);\n            }\n            var nintv = readInt(uncba, p); p += 4;\n\n            var q = p;\n            for (var i = 0; i < nintv; ++i) {\n                var v = readVob(uncba, q); q += 8;\n                if (v) {\n                    var bi = v.block;\n                    if (v.offset > 0)\n                        bi += 65536;\n\n                    if (bi < minBlockIndex)\n                        minBlockIndex = bi;\n                    break;\n                }\n            }\n            p += (nintv * 8);\n\n\n            var ub = uncba;\n            if (nbin > 0) {\n                tabix.indices[ref] = new Uint8Array(unchead, blockStart, p - blockStart);\n            }\n        }\n\n        tabix.headerMax = minBlockIndex;\n\n        callback(tabix);\n    }, {timeout: 50000});\n}\n\n// Copy-paste from BamFile\n\nTabixFile.prototype.blocksForRange = function(refId, min, max) {\n    var index = this.indices[refId];\n    if (!index) {\n        return [];\n    }\n\n    var intBinsL = reg2bins(min, max);\n    var intBins = [];\n    for (var i = 0; i < intBinsL.length; ++i) {\n        intBins[intBinsL[i]] = true;\n    }\n    var leafChunks = [], otherChunks = [];\n\n    var nbin = readInt(index, 0);\n    var p = 4;\n    for (var b = 0; b < nbin; ++b) {\n        var bin = readInt(index, p);\n        var nchnk = readInt(index, p+4);\n        p += 8;\n        if (intBins[bin]) {\n            for (var c = 0; c < nchnk; ++c) {\n                var cs = readVob(index, p, true);\n                var ce = readVob(index, p + 8, true);\n                (bin < 4681 ? otherChunks : leafChunks).push(new Chunk(cs, ce));\n                p += 16;\n            }\n        } else {\n            p +=  (nchnk * 16);\n        }\n    }\n\n    var nintv = readInt(index, p);\n    var lowest = null;\n    var minLin = Math.min(min>>14, nintv - 1), maxLin = Math.min(max>>14, nintv - 1);\n    for (var i = minLin; i <= maxLin; ++i) {\n        var lb =  readVob(index, p + 4 + (i * 8));\n        if (!lb) {\n            continue;\n        }\n        if (!lowest || lb.block < lowest.block || lb.offset < lowest.offset) {\n            lowest = lb;\n        }\n    }\n\n    var prunedOtherChunks = [];\n    if (lowest != null) {\n        for (var i = 0; i < otherChunks.length; ++i) {\n            var chnk = otherChunks[i];\n            if (chnk.maxv.block >= lowest.block && chnk.maxv.offset >= lowest.offset) {\n                prunedOtherChunks.push(chnk);\n            }\n        }\n    }\n    otherChunks = prunedOtherChunks;\n\n    var intChunks = [];\n    for (var i = 0; i < otherChunks.length; ++i) {\n        intChunks.push(otherChunks[i]);\n    }\n    for (var i = 0; i < leafChunks.length; ++i) {\n        intChunks.push(leafChunks[i]);\n    }\n\n    intChunks.sort(function(c0, c1) {\n        var dif = c0.minv.block - c1.minv.block;\n        if (dif != 0) {\n            return dif;\n        } else {\n            return c0.minv.offset - c1.minv.offset;\n        }\n    });\n    var mergedChunks = [];\n    if (intChunks.length > 0) {\n        var cur = intChunks[0];\n        for (var i = 1; i < intChunks.length; ++i) {\n            var nc = intChunks[i];\n            if (nc.minv.block == cur.maxv.block /* && nc.minv.offset == cur.maxv.offset */) { // no point splitting mid-block\n                cur = new Chunk(cur.minv, nc.maxv);\n            } else {\n                mergedChunks.push(cur);\n                cur = nc;\n            }\n        }\n        mergedChunks.push(cur);\n    }\n\n    return mergedChunks;\n}\n\nTabixFile.prototype.fetch = function(chr, min, max, callback) {\n    var thisB = this;\n\n    var chrId = this.chrToIndex[chr];\n    if (chrId == undefined)\n        return callback([]);\n\n    var canonicalChr = this.indexToChr[chrId];\n\n    var chunks;\n    if (chrId === undefined) {\n        chunks = [];\n    } else {\n        chunks = this.blocksForRange(chrId, min, max);\n        if (!chunks) {\n            callback(null, 'Error in index fetch');\n        }\n    }\n\n    var records = [];\n    var index = 0;\n    var data;\n\n    function tramp() {\n        if (index >= chunks.length) {\n            return callback(records);\n        } else if (!data) {\n            var c = chunks[index];\n            var fetchMin = c.minv.block;\n            var fetchMax = c.maxv.block + (1<<16); // *sigh*\n            thisB.data.slice(fetchMin, fetchMax - fetchMin).fetch(function(r) { //2^16 fetch, 65536 bytes\n                try {\n                    data = unbgzf(r, c.maxv.block - c.minv.block + 1);\n                    return tramp();\n                } catch (e) {\n                    return callback(null, e);\n                }\n            });\n        } else {\n            var ba = new Uint8Array(data);\n            thisB.readRecords(ba, chunks[index].minv.offset, records, min, max, canonicalChr);\n            data = null;\n            ++index;\n            return tramp();\n        }\n    }\n\n    try {\n        tramp();\n    } catch (e) {\n        callback(null, e);\n    }\n}\n\nTabixFile.prototype.readRecords = function(ba, offset, sink, min, max, chr) {\n   LINE_LOOP:\n    while (true) {\n        var line = '';\n        while (offset < ba.length) {\n            var ch = ba[offset++];\n            if (ch == 10) {\n                var toks = line.split('\\t');\n\n                if (toks[this.colSeq - 1] == chr) {\n                    var fmin = parseInt(toks[this.colStart - 1]);\n                    var fmax = fmin;\n                    if (this.colEnd > 0)\n                        fmax = parseInt(toks[this.colEnd - 1]);\n                    if (this.format & 0x10000) ++fmin;\n\n                    if (fmin <= max && fmax >= min)\n                        sink.push(line);\n                }\n                continue LINE_LOOP;\n            } else {\n                line += String.fromCharCode(ch);\n            }\n        }\n        return;\n    }\n}\n\nTabixFile.prototype.fetchHeader = function(callback, opts) {\n    // This routine fetches a large block of data from the start of the file, and then selects \"headers\" based\n    //  on one of three possible criteria:\n    // - metaOnly (tabix -H compatible): only lines that begin with the meta character are accepted\n    // - skipped (get all \"skipped\" rows, based on tabix -S parameter when indexing)\n    // - nLines (peek at the first x lines, which may return data as well as headers)\n\n    // In all cases, the callback will return as soon as we reach the first line that does not meet these conditions.\n    var defaults = { metaOnly: true, skipped: false, nLines: 0 };\n    opts = opts || defaults;\n    Object.keys(defaults).forEach(function(key) {\n        if (!opts.hasOwnProperty(key)) {\n            opts[key] = defaults[key];\n        }\n    });\n\n    var self = this;\n    var fetchPtr = 0, ptr = 0, line='';\n    var lines = [];\n\n    self.data.slice(0, self.headerMax).fetch(function(chnk) {\n        if (!chnk) {\n            return callback(null, \"Fetch failed\");\n        }\n        var ba = new Uint8Array(unbgzf(chnk, chnk.byteLength));\n        var ptr = 0, line = '', lines = [];\n        while (ptr < ba.length) {\n            var ch = ba[ptr++];\n            if (ch == 10) {\n                if ((opts.metaOnly && line.charCodeAt(0) == self.meta) ||\n                    (opts.skipped && lines.length < self.skip) ||\n                    (opts.nLines && lines.length < opts.nLines))\n                {\n                    lines.push(line);\n                    line = '';\n                } else {\n                    return callback(lines);\n                }\n            } else {\n                line += String.fromCharCode(ch);\n            }\n        }\n        callback(lines);\n    });\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        connectTabix: connectTabix,\n        TABIX_MAGIC: TABIX_MAGIC\n    };\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// utils.js: odds, sods, and ends.\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var sha1 = require('./sha1');\n    var b64_sha1 = sha1.b64_sha1;\n}\n\nvar NUM_REGEXP = new RegExp('[0-9]+');\n\nfunction stringToNumbersArray(str) {\n    var nums = new Array();\n    var m;\n    while (m = NUM_REGEXP.exec(str)) {\n        nums.push(m[0]);\n        str=str.substring(m.index + (m[0].length));\n    }\n    return nums;\n}\n\nvar STRICT_NUM_REGEXP = new RegExp('^[0-9]+$');\n\nfunction stringToInt(str) {\n    str = str.replace(new RegExp(',', 'g'), '');\n    if (!STRICT_NUM_REGEXP.test(str)) {\n        return null;\n    }\n    return str|0;\n}\n\nfunction pushnew(a, v) {\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] == v) {\n            return;\n        }\n    }\n    a.push(v);\n}\n\nfunction pusho(obj, k, v) {\n    if (obj[k]) {\n        obj[k].push(v);\n    } else {\n        obj[k] = [v];\n    }\n}\n\nfunction pushnewo(obj, k, v) {\n    var a = obj[k];\n    if (a) {\n        for (var i = 0; i < a.length; ++i) {    // indexOf requires JS16 :-(.\n            if (a[i] == v) {\n                return;\n            }\n        }\n        a.push(v);\n    } else {\n        obj[k] = [v];\n    }\n}\n\n\nfunction pick(a, b, c, d)\n{\n    if (a) {\n        return a;\n    } else if (b) {\n        return b;\n    } else if (c) {\n        return c;\n    } else if (d) {\n        return d;\n    }\n}\n\nfunction pushnew(l, o)\n{\n    for (var i = 0; i < l.length; ++i) {\n        if (l[i] == o) {\n            return;\n        }\n    }\n    l.push(o);\n}\n\nfunction arrayEquals(a, b) {\n    if (!a || !b || a.length !== b.length)\n        return false;\n\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i])\n            return false;\n    }\n\n    return true;\n}\n\nfunction arrayIndexOf(a, x) {\n    if (!a) {\n        return -1;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] === x) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction arrayRemove(a, x) {\n    var i = arrayIndexOf(a, x);\n    if (i >= 0) {\n        a.splice(i, 1);\n        return true;\n    }\n    return false;\n}\n\n//\n// DOM utilities\n//\n\n\nfunction makeElement(tag, children, attribs, styles)\n{\n    var ele = document.createElement(tag);\n    if (children) {\n        if (! (children instanceof Array)) {\n            children = [children];\n        }\n        for (var i = 0; i < children.length; ++i) {\n            var c = children[i];\n            if (c) {\n                if (typeof c == 'string') {\n                    c = document.createTextNode(c);\n                } else if (typeof c == 'number') {\n                    c = document.createTextNode('' + c);\n                }\n                ele.appendChild(c);\n            }\n        }\n    }\n    \n    if (attribs) {\n        for (var l in attribs) {\n            try {\n                ele[l] = attribs[l];\n            } catch (e) {\n                console.log('error setting ' + l);\n                throw(e);\n            }\n        }\n    }\n    if (styles) {\n        for (var l in styles) {\n            ele.style[l] = styles[l];\n        }\n    }\n    return ele;\n}\n\nfunction makeElementNS(namespace, tag, children, attribs)\n{\n    var ele = document.createElementNS(namespace, tag);\n    if (children) {\n        if (! (children instanceof Array)) {\n            children = [children];\n        }\n        for (var i = 0; i < children.length; ++i) {\n            var c = children[i];\n            if (typeof c == 'string') {\n                c = document.createTextNode(c);\n            }\n            ele.appendChild(c);\n        }\n    }\n    \n    setAttrs(ele, attribs);\n    return ele;\n}\n\nvar attr_name_cache = {};\n\nfunction setAttr(node, key, value)\n{\n    var attr = attr_name_cache[key];\n    if (!attr) {\n        var _attr = '';\n        for (var c = 0; c < key.length; ++c) {\n            var cc = key.substring(c, c+1);\n            var lcc = cc.toLowerCase();\n            if (lcc != cc) {\n                _attr = _attr + '-' + lcc;\n            } else {\n                _attr = _attr + cc;\n            }\n        }\n        attr_name_cache[key] = _attr;\n        attr = _attr;\n    }\n    node.setAttribute(attr, value);\n}\n\nfunction setAttrs(node, attribs)\n{\n    if (attribs) {\n        for (var l in attribs) {\n            setAttr(node, l, attribs[l]);\n        }\n    }\n}\n\n\n\nfunction removeChildren(node)\n{\n    if (!node || !node.childNodes) {\n        return;\n    }\n\n    while (node.childNodes.length > 0) {\n        node.removeChild(node.firstChild);\n    }\n}\n\n\n\n//\n// WARNING: not for general use!\n//\n\nfunction miniJSONify(o, exc) {\n    if (typeof o === 'undefined') {\n        return 'undefined';\n    } else if (o == null) {\n        return 'null';\n    } else if (typeof o == 'string') {\n        return \"'\" + o + \"'\";\n    } else if (typeof o == 'number') {\n        return \"\" + o;\n    } else if (typeof o == 'boolean') {\n        return \"\" + o;\n    } else if (typeof o == 'object') {\n        if (o instanceof Array) {\n            var s = null;\n            for (var i = 0; i < o.length; ++i) {\n                s = (s == null ? '' : (s + ', ')) + miniJSONify(o[i], exc);\n            }\n            return '[' + (s?s:'') + ']';\n        } else {\n            exc = exc || {};\n            var s = null;\n            for (var k in o) {\n                if (exc[k])\n                    continue;\n                if (k != undefined && typeof(o[k]) != 'function') {\n                    s = (s == null ? '' : (s + ', ')) + k + ': ' + miniJSONify(o[k], exc);\n                }\n            }\n            return '{' + (s?s:'') + '}';\n        }\n    } else {\n        return (typeof o);\n    }\n}\n\nfunction shallowCopy(o) {\n    var n = {};\n    for (var k in o) {\n        n[k] = o[k];\n    }\n    return n;\n}\n\nfunction Observed(x) {\n    this.value = x;\n    this.listeners = [];\n}\n\nObserved.prototype.addListener = function(f) {\n    this.listeners.push(f);\n}\n\nObserved.prototype.addListenerAndFire = function(f) {\n    this.listeners.push(f);\n    f(this.value);\n}\n\nObserved.prototype.removeListener = function(f) {\n    arrayRemove(this.listeners, f);\n}\n\nObserved.prototype.get = function() {\n    return this.value;\n}\n\nObserved.prototype.set = function(x) {\n    this.value = x;\n    for (var i = 0; i < this.listeners.length; ++i) {\n        this.listeners[i](x);\n    }\n}\n\nfunction Awaited() {\n    this.queue = [];\n}\n\nAwaited.prototype.provide = function(x) {\n    if (this.res !== undefined) {\n        throw \"Resource has already been provided.\";\n    }\n\n    this.res = x;\n    for (var i = 0; i < this.queue.length; ++i) {\n        this.queue[i](x);\n    }\n    this.queue = null;   // avoid leaking closures.\n}\n\nAwaited.prototype.await = function(f) {\n    if (this.res !== undefined) {\n        f(this.res);\n        return this.res;\n    } else {\n        this.queue.push(f);\n    }\n}\n\nvar __dalliance_saltSeed = 0;\n\nfunction saltURL(url) {\n    return url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++__dalliance_saltSeed));\n}\n\nfunction textXHR(url, callback, opts) {\n    if (opts && opts.salt) \n        url = saltURL(url);\n\n    try {\n        var timeout;\n        if (opts && opts.timeout) {\n            timeout = setTimeout(\n                function() {\n                    console.log('timing out ' + url);\n                    req.abort();\n                    return callback(null, 'Timeout');\n                },\n                opts.timeout\n            );\n        }\n\n        var req = new XMLHttpRequest();\n        req.onreadystatechange = function() {\n    \t    if (req.readyState == 4) {\n                if (timeout)\n                    clearTimeout(timeout);\n    \t        if (req.status < 200 || req.status >= 300) {\n    \t\t    callback(null, 'Error code ' + req.status);\n    \t        } else {\n    \t\t    callback(req.responseText);\n    \t        }\n    \t    }\n        };\n        \n        req.open('GET', url, true);\n        req.responseType = 'text';\n\n        if (opts && opts.credentials) {\n            req.withCredentials = true;\n        }\n        req.send();\n    } catch (e) {\n        callback(null, 'Exception ' + e);\n    }\n}\n\nfunction relativeURL(base, rel) {\n    // FIXME quite naive -- good enough for trackhubs?\n\n    if (rel.indexOf('http:') == 0 || rel.indexOf('https:') == 0) {\n        return rel;\n    }\n\n    var li = base.lastIndexOf('/');\n    if (li >= 0) {\n        return base.substr(0, li + 1) + rel;\n    } else {\n        return rel;\n    }\n}\n\nvar AMINO_ACID_TRANSLATION = {\n    'TTT': 'F',\n    'TTC': 'F',\n    'TTA': 'L',\n    'TTG': 'L',\n    'CTT': 'L',\n    'CTC': 'L',\n    'CTA': 'L',\n    'CTG': 'L',\n    'ATT': 'I',\n    'ATC': 'I',\n    'ATA': 'I',\n    'ATG': 'M',\n    'GTT': 'V',\n    'GTC': 'V',\n    'GTA': 'V',\n    'GTG': 'V',\n    'TCT': 'S',\n    'TCC': 'S',\n    'TCA': 'S',\n    'TCG': 'S',\n    'CCT': 'P',\n    'CCC': 'P',\n    'CCA': 'P',\n    'CCG': 'P',\n    'ACT': 'T',\n    'ACC': 'T',\n    'ACA': 'T',\n    'ACG': 'T',\n    'GCT': 'A',\n    'GCC': 'A',\n    'GCA': 'A',\n    'GCG': 'A',\n    'TAT': 'Y',\n    'TAC': 'Y',\n    'TAA': '*',  // stop\n    'TAG': '*',  // stop\n    'CAT': 'H',\n    'CAC': 'H',\n    'CAA': 'Q',\n    'CAG': 'Q',\n    'AAT': 'N',\n    'AAC': 'N',\n    'AAA': 'K',\n    'AAG': 'K',\n    'GAT': 'D',\n    'GAC': 'D',\n    'GAA': 'E',\n    'GAG': 'E',\n    'TGT': 'C',\n    'TGC': 'C',\n    'TGA': '*',  // stop\n    'TGG': 'W',\n    'CGT': 'R',\n    'CGC': 'R',\n    'CGA': 'R',\n    'CGG': 'R',\n    'AGT': 'S',\n    'AGC': 'S',\n    'AGA': 'R',\n    'AGG': 'R',\n    'GGT': 'G',\n    'GGC': 'G',\n    'GGA': 'G',\n    'GGG': 'G'\n}\n\nfunction resolveUrlToPage(rel) {\n    return makeElement('a', null, {href: rel}).href;\n}\n\n//\n// Missing APIs\n// \n\nif (!('trim' in String.prototype)) {\n    String.prototype.trim = function() {\n        return this.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    };\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        textXHR: textXHR,\n        relativeURL: relativeURL,\n        resolveUrlToPage: resolveUrlToPage,\n        shallowCopy: shallowCopy,\n        pusho: pusho,\n        pushnew: pushnew,\n        pushnewo: pushnewo,\n        arrayIndexOf: arrayIndexOf,\n        arrayEquals: arrayEquals,\n        pick: pick,\n\n        makeElement: makeElement,\n        makeElementNS: makeElementNS,\n        removeChildren: removeChildren,\n\n        miniJSONify: miniJSONify,\n\n        Observed: Observed,\n        Awaited: Awaited,\n\n        AMINO_ACID_TRANSLATION: AMINO_ACID_TRANSLATION\n    }\n}\n","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE\n * @version   3.0.2\n */\n\n(function() {\n    \"use strict\";\n    function lib$es6$promise$utils$$objectOrFunction(x) {\n      return typeof x === 'function' || (typeof x === 'object' && x !== null);\n    }\n\n    function lib$es6$promise$utils$$isFunction(x) {\n      return typeof x === 'function';\n    }\n\n    function lib$es6$promise$utils$$isMaybeThenable(x) {\n      return typeof x === 'object' && x !== null;\n    }\n\n    var lib$es6$promise$utils$$_isArray;\n    if (!Array.isArray) {\n      lib$es6$promise$utils$$_isArray = function (x) {\n        return Object.prototype.toString.call(x) === '[object Array]';\n      };\n    } else {\n      lib$es6$promise$utils$$_isArray = Array.isArray;\n    }\n\n    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;\n    var lib$es6$promise$asap$$len = 0;\n    var lib$es6$promise$asap$$toString = {}.toString;\n    var lib$es6$promise$asap$$vertxNext;\n    var lib$es6$promise$asap$$customSchedulerFn;\n\n    var lib$es6$promise$asap$$asap = function asap(callback, arg) {\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;\n      lib$es6$promise$asap$$len += 2;\n      if (lib$es6$promise$asap$$len === 2) {\n        // If len is 2, that means that we need to schedule an async flush.\n        // If additional callbacks are queued before the queue is flushed, they\n        // will be processed by this flush that we are scheduling.\n        if (lib$es6$promise$asap$$customSchedulerFn) {\n          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);\n        } else {\n          lib$es6$promise$asap$$scheduleFlush();\n        }\n      }\n    }\n\n    function lib$es6$promise$asap$$setScheduler(scheduleFn) {\n      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;\n    }\n\n    function lib$es6$promise$asap$$setAsap(asapFn) {\n      lib$es6$promise$asap$$asap = asapFn;\n    }\n\n    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;\n    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};\n    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;\n    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n    // test for web worker but not in IE10\n    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&\n      typeof importScripts !== 'undefined' &&\n      typeof MessageChannel !== 'undefined';\n\n    // node\n    function lib$es6$promise$asap$$useNextTick() {\n      // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n      // see https://github.com/cujojs/when/issues/410 for details\n      return function() {\n        process.nextTick(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    // vertx\n    function lib$es6$promise$asap$$useVertxTimer() {\n      return function() {\n        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    function lib$es6$promise$asap$$useMutationObserver() {\n      var iterations = 0;\n      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);\n      var node = document.createTextNode('');\n      observer.observe(node, { characterData: true });\n\n      return function() {\n        node.data = (iterations = ++iterations % 2);\n      };\n    }\n\n    // web worker\n    function lib$es6$promise$asap$$useMessageChannel() {\n      var channel = new MessageChannel();\n      channel.port1.onmessage = lib$es6$promise$asap$$flush;\n      return function () {\n        channel.port2.postMessage(0);\n      };\n    }\n\n    function lib$es6$promise$asap$$useSetTimeout() {\n      return function() {\n        setTimeout(lib$es6$promise$asap$$flush, 1);\n      };\n    }\n\n    var lib$es6$promise$asap$$queue = new Array(1000);\n    function lib$es6$promise$asap$$flush() {\n      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {\n        var callback = lib$es6$promise$asap$$queue[i];\n        var arg = lib$es6$promise$asap$$queue[i+1];\n\n        callback(arg);\n\n        lib$es6$promise$asap$$queue[i] = undefined;\n        lib$es6$promise$asap$$queue[i+1] = undefined;\n      }\n\n      lib$es6$promise$asap$$len = 0;\n    }\n\n    function lib$es6$promise$asap$$attemptVertx() {\n      try {\n        var r = require;\n        var vertx = r('vertx');\n        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;\n        return lib$es6$promise$asap$$useVertxTimer();\n      } catch(e) {\n        return lib$es6$promise$asap$$useSetTimeout();\n      }\n    }\n\n    var lib$es6$promise$asap$$scheduleFlush;\n    // Decide what async method to use to triggering processing of queued callbacks:\n    if (lib$es6$promise$asap$$isNode) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();\n    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();\n    } else if (lib$es6$promise$asap$$isWorker) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();\n    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();\n    } else {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();\n    }\n\n    function lib$es6$promise$$internal$$noop() {}\n\n    var lib$es6$promise$$internal$$PENDING   = void 0;\n    var lib$es6$promise$$internal$$FULFILLED = 1;\n    var lib$es6$promise$$internal$$REJECTED  = 2;\n\n    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$selfFulfillment() {\n      return new TypeError(\"You cannot resolve a promise with itself\");\n    }\n\n    function lib$es6$promise$$internal$$cannotReturnOwn() {\n      return new TypeError('A promises callback cannot return that same promise.');\n    }\n\n    function lib$es6$promise$$internal$$getThen(promise) {\n      try {\n        return promise.then;\n      } catch(error) {\n        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;\n        return lib$es6$promise$$internal$$GET_THEN_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n      try {\n        then.call(value, fulfillmentHandler, rejectionHandler);\n      } catch(e) {\n        return e;\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {\n       lib$es6$promise$asap$$asap(function(promise) {\n        var sealed = false;\n        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {\n          if (sealed) { return; }\n          sealed = true;\n          if (thenable !== value) {\n            lib$es6$promise$$internal$$resolve(promise, value);\n          } else {\n            lib$es6$promise$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          if (sealed) { return; }\n          sealed = true;\n\n          lib$es6$promise$$internal$$reject(promise, reason);\n        }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n        if (!sealed && error) {\n          sealed = true;\n          lib$es6$promise$$internal$$reject(promise, error);\n        }\n      }, promise);\n    }\n\n    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {\n      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, thenable._result);\n      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, thenable._result);\n      } else {\n        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {\n      if (maybeThenable.constructor === promise.constructor) {\n        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);\n      } else {\n        var then = lib$es6$promise$$internal$$getThen(maybeThenable);\n\n        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);\n        } else if (then === undefined) {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        } else if (lib$es6$promise$utils$$isFunction(then)) {\n          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);\n        } else {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        }\n      }\n    }\n\n    function lib$es6$promise$$internal$$resolve(promise, value) {\n      if (promise === value) {\n        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());\n      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {\n        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);\n      } else {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publishRejection(promise) {\n      if (promise._onerror) {\n        promise._onerror(promise._result);\n      }\n\n      lib$es6$promise$$internal$$publish(promise);\n    }\n\n    function lib$es6$promise$$internal$$fulfill(promise, value) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n\n      promise._result = value;\n      promise._state = lib$es6$promise$$internal$$FULFILLED;\n\n      if (promise._subscribers.length !== 0) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);\n      }\n    }\n\n    function lib$es6$promise$$internal$$reject(promise, reason) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n      promise._state = lib$es6$promise$$internal$$REJECTED;\n      promise._result = reason;\n\n      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);\n    }\n\n    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {\n      var subscribers = parent._subscribers;\n      var length = subscribers.length;\n\n      parent._onerror = null;\n\n      subscribers[length] = child;\n      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;\n      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;\n\n      if (length === 0 && parent._state) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publish(promise) {\n      var subscribers = promise._subscribers;\n      var settled = promise._state;\n\n      if (subscribers.length === 0) { return; }\n\n      var child, callback, detail = promise._result;\n\n      for (var i = 0; i < subscribers.length; i += 3) {\n        child = subscribers[i];\n        callback = subscribers[i + settled];\n\n        if (child) {\n          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);\n        } else {\n          callback(detail);\n        }\n      }\n\n      promise._subscribers.length = 0;\n    }\n\n    function lib$es6$promise$$internal$$ErrorObject() {\n      this.error = null;\n    }\n\n    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$tryCatch(callback, detail) {\n      try {\n        return callback(detail);\n      } catch(e) {\n        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;\n        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {\n      var hasCallback = lib$es6$promise$utils$$isFunction(callback),\n          value, error, succeeded, failed;\n\n      if (hasCallback) {\n        value = lib$es6$promise$$internal$$tryCatch(callback, detail);\n\n        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {\n          failed = true;\n          error = value.error;\n          value = null;\n        } else {\n          succeeded = true;\n        }\n\n        if (promise === value) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());\n          return;\n        }\n\n      } else {\n        value = detail;\n        succeeded = true;\n      }\n\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) {\n        // noop\n      } else if (hasCallback && succeeded) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      } else if (failed) {\n        lib$es6$promise$$internal$$reject(promise, error);\n      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      } else if (settled === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {\n      try {\n        resolver(function resolvePromise(value){\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function rejectPromise(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      } catch(e) {\n        lib$es6$promise$$internal$$reject(promise, e);\n      }\n    }\n\n    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {\n      var enumerator = this;\n\n      enumerator._instanceConstructor = Constructor;\n      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (enumerator._validateInput(input)) {\n        enumerator._input     = input;\n        enumerator.length     = input.length;\n        enumerator._remaining = input.length;\n\n        enumerator._init();\n\n        if (enumerator.length === 0) {\n          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n        } else {\n          enumerator.length = enumerator.length || 0;\n          enumerator._enumerate();\n          if (enumerator._remaining === 0) {\n            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n          }\n        }\n      } else {\n        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());\n      }\n    }\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {\n      return lib$es6$promise$utils$$isArray(input);\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {\n      return new Error('Array Methods must be provided an Array');\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {\n      this._result = new Array(this.length);\n    };\n\n    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {\n      var enumerator = this;\n\n      var length  = enumerator.length;\n      var promise = enumerator.promise;\n      var input   = enumerator._input;\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        enumerator._eachEntry(input[i], i);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {\n      var enumerator = this;\n      var c = enumerator._instanceConstructor;\n\n      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {\n        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {\n          entry._onerror = null;\n          enumerator._settledAt(entry._state, i, entry._result);\n        } else {\n          enumerator._willSettleAt(c.resolve(entry), i);\n        }\n      } else {\n        enumerator._remaining--;\n        enumerator._result[i] = entry;\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {\n      var enumerator = this;\n      var promise = enumerator.promise;\n\n      if (promise._state === lib$es6$promise$$internal$$PENDING) {\n        enumerator._remaining--;\n\n        if (state === lib$es6$promise$$internal$$REJECTED) {\n          lib$es6$promise$$internal$$reject(promise, value);\n        } else {\n          enumerator._result[i] = value;\n        }\n      }\n\n      if (enumerator._remaining === 0) {\n        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {\n      var enumerator = this;\n\n      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {\n        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);\n      }, function(reason) {\n        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);\n      });\n    };\n    function lib$es6$promise$promise$all$$all(entries) {\n      return new lib$es6$promise$enumerator$$default(this, entries).promise;\n    }\n    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;\n    function lib$es6$promise$promise$race$$race(entries) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (!lib$es6$promise$utils$$isArray(entries)) {\n        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));\n        return promise;\n      }\n\n      var length = entries.length;\n\n      function onFulfillment(value) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      }\n\n      function onRejection(reason) {\n        lib$es6$promise$$internal$$reject(promise, reason);\n      }\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n      }\n\n      return promise;\n    }\n    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;\n    function lib$es6$promise$promise$resolve$$resolve(object) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      if (object && typeof object === 'object' && object.constructor === Constructor) {\n        return object;\n      }\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$resolve(promise, object);\n      return promise;\n    }\n    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;\n    function lib$es6$promise$promise$reject$$reject(reason) {\n      /*jshint validthis:true */\n      var Constructor = this;\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$reject(promise, reason);\n      return promise;\n    }\n    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;\n\n    var lib$es6$promise$promise$$counter = 0;\n\n    function lib$es6$promise$promise$$needsResolver() {\n      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n    }\n\n    function lib$es6$promise$promise$$needsNew() {\n      throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }\n\n    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;\n    /**\n      Promise objects represent the eventual result of an asynchronous operation. The\n      primary way of interacting with a promise is through its `then` method, which\n      registers callbacks to receive either a promise's eventual value or the reason\n      why the promise cannot be fulfilled.\n\n      Terminology\n      -----------\n\n      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n      - `thenable` is an object or function that defines a `then` method.\n      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n      - `exception` is a value that is thrown using the throw statement.\n      - `reason` is a value that indicates why a promise was rejected.\n      - `settled` the final resting state of a promise, fulfilled or rejected.\n\n      A promise can be in one of three states: pending, fulfilled, or rejected.\n\n      Promises that are fulfilled have a fulfillment value and are in the fulfilled\n      state.  Promises that are rejected have a rejection reason and are in the\n      rejected state.  A fulfillment value is never a thenable.\n\n      Promises can also be said to *resolve* a value.  If this value is also a\n      promise, then the original promise's settled state will match the value's\n      settled state.  So a promise that *resolves* a promise that rejects will\n      itself reject, and a promise that *resolves* a promise that fulfills will\n      itself fulfill.\n\n\n      Basic Usage:\n      ------------\n\n      ```js\n      var promise = new Promise(function(resolve, reject) {\n        // on success\n        resolve(value);\n\n        // on failure\n        reject(reason);\n      });\n\n      promise.then(function(value) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Advanced Usage:\n      ---------------\n\n      Promises shine when abstracting away asynchronous interactions such as\n      `XMLHttpRequest`s.\n\n      ```js\n      function getJSON(url) {\n        return new Promise(function(resolve, reject){\n          var xhr = new XMLHttpRequest();\n\n          xhr.open('GET', url);\n          xhr.onreadystatechange = handler;\n          xhr.responseType = 'json';\n          xhr.setRequestHeader('Accept', 'application/json');\n          xhr.send();\n\n          function handler() {\n            if (this.readyState === this.DONE) {\n              if (this.status === 200) {\n                resolve(this.response);\n              } else {\n                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n              }\n            }\n          };\n        });\n      }\n\n      getJSON('/posts.json').then(function(json) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Unlike callbacks, promises are great composable primitives.\n\n      ```js\n      Promise.all([\n        getJSON('/posts'),\n        getJSON('/comments')\n      ]).then(function(values){\n        values[0] // => postsJSON\n        values[1] // => commentsJSON\n\n        return values;\n      });\n      ```\n\n      @class Promise\n      @param {function} resolver\n      Useful for tooling.\n      @constructor\n    */\n    function lib$es6$promise$promise$$Promise(resolver) {\n      this._id = lib$es6$promise$promise$$counter++;\n      this._state = undefined;\n      this._result = undefined;\n      this._subscribers = [];\n\n      if (lib$es6$promise$$internal$$noop !== resolver) {\n        if (!lib$es6$promise$utils$$isFunction(resolver)) {\n          lib$es6$promise$promise$$needsResolver();\n        }\n\n        if (!(this instanceof lib$es6$promise$promise$$Promise)) {\n          lib$es6$promise$promise$$needsNew();\n        }\n\n        lib$es6$promise$$internal$$initializePromise(this, resolver);\n      }\n    }\n\n    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;\n    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;\n    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;\n    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;\n    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;\n    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;\n    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;\n\n    lib$es6$promise$promise$$Promise.prototype = {\n      constructor: lib$es6$promise$promise$$Promise,\n\n    /**\n      The primary way of interacting with a promise is through its `then` method,\n      which registers callbacks to receive either a promise's eventual value or the\n      reason why the promise cannot be fulfilled.\n\n      ```js\n      findUser().then(function(user){\n        // user is available\n      }, function(reason){\n        // user is unavailable, and you are given the reason why\n      });\n      ```\n\n      Chaining\n      --------\n\n      The return value of `then` is itself a promise.  This second, 'downstream'\n      promise is resolved with the return value of the first promise's fulfillment\n      or rejection handler, or rejected if the handler throws an exception.\n\n      ```js\n      findUser().then(function (user) {\n        return user.name;\n      }, function (reason) {\n        return 'default name';\n      }).then(function (userName) {\n        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n        // will be `'default name'`\n      });\n\n      findUser().then(function (user) {\n        throw new Error('Found user, but still unhappy');\n      }, function (reason) {\n        throw new Error('`findUser` rejected and we're unhappy');\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n      });\n      ```\n      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n      ```js\n      findUser().then(function (user) {\n        throw new PedagogicalException('Upstream error');\n      }).then(function (value) {\n        // never reached\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // The `PedgagocialException` is propagated all the way down to here\n      });\n      ```\n\n      Assimilation\n      ------------\n\n      Sometimes the value you want to propagate to a downstream promise can only be\n      retrieved asynchronously. This can be achieved by returning a promise in the\n      fulfillment or rejection handler. The downstream promise will then be pending\n      until the returned promise is settled. This is called *assimilation*.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // The user's comments are now available\n      });\n      ```\n\n      If the assimliated promise rejects, then the downstream promise will also reject.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // If `findCommentsByAuthor` fulfills, we'll have the value here\n      }, function (reason) {\n        // If `findCommentsByAuthor` rejects, we'll have the reason here\n      });\n      ```\n\n      Simple Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var result;\n\n      try {\n        result = findResult();\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n      findResult(function(result, err){\n        if (err) {\n          // failure\n        } else {\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findResult().then(function(result){\n        // success\n      }, function(reason){\n        // failure\n      });\n      ```\n\n      Advanced Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var author, books;\n\n      try {\n        author = findAuthor();\n        books  = findBooksByAuthor(author);\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n\n      function foundBooks(books) {\n\n      }\n\n      function failure(reason) {\n\n      }\n\n      findAuthor(function(author, err){\n        if (err) {\n          failure(err);\n          // failure\n        } else {\n          try {\n            findBoooksByAuthor(author, function(books, err) {\n              if (err) {\n                failure(err);\n              } else {\n                try {\n                  foundBooks(books);\n                } catch(reason) {\n                  failure(reason);\n                }\n              }\n            });\n          } catch(error) {\n            failure(err);\n          }\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findAuthor().\n        then(findBooksByAuthor).\n        then(function(books){\n          // found books\n      }).catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method then\n      @param {Function} onFulfilled\n      @param {Function} onRejected\n      Useful for tooling.\n      @return {Promise}\n    */\n      then: function(onFulfillment, onRejection) {\n        var parent = this;\n        var state = parent._state;\n\n        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {\n          return this;\n        }\n\n        var child = new this.constructor(lib$es6$promise$$internal$$noop);\n        var result = parent._result;\n\n        if (state) {\n          var callback = arguments[state - 1];\n          lib$es6$promise$asap$$asap(function(){\n            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);\n          });\n        } else {\n          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);\n        }\n\n        return child;\n      },\n\n    /**\n      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n      as the catch block of a try/catch statement.\n\n      ```js\n      function findAuthor(){\n        throw new Error('couldn't find that author');\n      }\n\n      // synchronous\n      try {\n        findAuthor();\n      } catch(reason) {\n        // something went wrong\n      }\n\n      // async with promises\n      findAuthor().catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method catch\n      @param {Function} onRejection\n      Useful for tooling.\n      @return {Promise}\n    */\n      'catch': function(onRejection) {\n        return this.then(null, onRejection);\n      }\n    };\n    function lib$es6$promise$polyfill$$polyfill() {\n      var local;\n\n      if (typeof global !== 'undefined') {\n          local = global;\n      } else if (typeof self !== 'undefined') {\n          local = self;\n      } else {\n          try {\n              local = Function('return this')();\n          } catch (e) {\n              throw new Error('polyfill failed because global object is unavailable in this environment');\n          }\n      }\n\n      var P = local.Promise;\n\n      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {\n        return;\n      }\n\n      local.Promise = lib$es6$promise$promise$$default;\n    }\n    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;\n\n    var lib$es6$promise$umd$$ES6Promise = {\n      'Promise': lib$es6$promise$promise$$default,\n      'polyfill': lib$es6$promise$polyfill$$default\n    };\n\n    /* global define:true module:true window: true */\n    if (typeof define === 'function' && define['amd']) {\n      define(function() { return lib$es6$promise$umd$$ES6Promise; });\n    } else if (typeof module !== 'undefined' && module['exports']) {\n      module['exports'] = lib$es6$promise$umd$$ES6Promise;\n    } else if (typeof this !== 'undefined') {\n      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;\n    }\n\n    lib$es6$promise$polyfill$$default();\n}).call(this);\n\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Javascript ZLib\n// By Thomas Down 2010-2011\n//\n// Based very heavily on portions of jzlib (by ymnk@jcraft.com), who in\n// turn credits Jean-loup Gailly and Mark Adler for the original zlib code.\n//\n// inflate.js: ZLib inflate code\n//\n\n//\n// Shared constants\n//\n\nvar MAX_WBITS=15; // 32K LZ77 window\nvar DEF_WBITS=MAX_WBITS;\nvar MAX_MEM_LEVEL=9;\nvar MANY=1440;\nvar BMAX = 15;\n\n// preset dictionary flag in zlib header\nvar PRESET_DICT=0x20;\n\nvar Z_NO_FLUSH=0;\nvar Z_PARTIAL_FLUSH=1;\nvar Z_SYNC_FLUSH=2;\nvar Z_FULL_FLUSH=3;\nvar Z_FINISH=4;\n\nvar Z_DEFLATED=8;\n\nvar Z_OK=0;\nvar Z_STREAM_END=1;\nvar Z_NEED_DICT=2;\nvar Z_ERRNO=-1;\nvar Z_STREAM_ERROR=-2;\nvar Z_DATA_ERROR=-3;\nvar Z_MEM_ERROR=-4;\nvar Z_BUF_ERROR=-5;\nvar Z_VERSION_ERROR=-6;\n\nvar METHOD=0;   // waiting for method byte\nvar FLAG=1;     // waiting for flag byte\nvar DICT4=2;    // four dictionary check bytes to go\nvar DICT3=3;    // three dictionary check bytes to go\nvar DICT2=4;    // two dictionary check bytes to go\nvar DICT1=5;    // one dictionary check byte to go\nvar DICT0=6;    // waiting for inflateSetDictionary\nvar BLOCKS=7;   // decompressing blocks\nvar CHECK4=8;   // four check bytes to go\nvar CHECK3=9;   // three check bytes to go\nvar CHECK2=10;  // two check bytes to go\nvar CHECK1=11;  // one check byte to go\nvar DONE=12;    // finished check, done\nvar BAD=13;     // got an error--stay here\n\nvar inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\n\nvar IB_TYPE=0;  // get type bits (3, including end bit)\nvar IB_LENS=1;  // get lengths for stored\nvar IB_STORED=2;// processing stored block\nvar IB_TABLE=3; // get table lengths\nvar IB_BTREE=4; // get bit lengths tree for a dynamic block\nvar IB_DTREE=5; // get length, distance trees for a dynamic block\nvar IB_CODES=6; // processing fixed or dynamic block\nvar IB_DRY=7;   // output remaining window bytes\nvar IB_DONE=8;  // finished last block, done\nvar IB_BAD=9;   // ot a data error--stuck here\n\nvar fixed_bl = 9;\nvar fixed_bd = 5;\n\nvar fixed_tl = [\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,192,\n    80,7,10, 0,8,96, 0,8,32, 0,9,160,\n    0,8,0, 0,8,128, 0,8,64, 0,9,224,\n    80,7,6, 0,8,88, 0,8,24, 0,9,144,\n    83,7,59, 0,8,120, 0,8,56, 0,9,208,\n    81,7,17, 0,8,104, 0,8,40, 0,9,176,\n    0,8,8, 0,8,136, 0,8,72, 0,9,240,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,200,\n    81,7,13, 0,8,100, 0,8,36, 0,9,168,\n    0,8,4, 0,8,132, 0,8,68, 0,9,232,\n    80,7,8, 0,8,92, 0,8,28, 0,9,152,\n    84,7,83, 0,8,124, 0,8,60, 0,9,216,\n    82,7,23, 0,8,108, 0,8,44, 0,9,184,\n    0,8,12, 0,8,140, 0,8,76, 0,9,248,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,196,\n    81,7,11, 0,8,98, 0,8,34, 0,9,164,\n    0,8,2, 0,8,130, 0,8,66, 0,9,228,\n    80,7,7, 0,8,90, 0,8,26, 0,9,148,\n    84,7,67, 0,8,122, 0,8,58, 0,9,212,\n    82,7,19, 0,8,106, 0,8,42, 0,9,180,\n    0,8,10, 0,8,138, 0,8,74, 0,9,244,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,204,\n    81,7,15, 0,8,102, 0,8,38, 0,9,172,\n    0,8,6, 0,8,134, 0,8,70, 0,9,236,\n    80,7,9, 0,8,94, 0,8,30, 0,9,156,\n    84,7,99, 0,8,126, 0,8,62, 0,9,220,\n    82,7,27, 0,8,110, 0,8,46, 0,9,188,\n    0,8,14, 0,8,142, 0,8,78, 0,9,252,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,194,\n    80,7,10, 0,8,97, 0,8,33, 0,9,162,\n    0,8,1, 0,8,129, 0,8,65, 0,9,226,\n    80,7,6, 0,8,89, 0,8,25, 0,9,146,\n    83,7,59, 0,8,121, 0,8,57, 0,9,210,\n    81,7,17, 0,8,105, 0,8,41, 0,9,178,\n    0,8,9, 0,8,137, 0,8,73, 0,9,242,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,202,\n    81,7,13, 0,8,101, 0,8,37, 0,9,170,\n    0,8,5, 0,8,133, 0,8,69, 0,9,234,\n    80,7,8, 0,8,93, 0,8,29, 0,9,154,\n    84,7,83, 0,8,125, 0,8,61, 0,9,218,\n    82,7,23, 0,8,109, 0,8,45, 0,9,186,\n    0,8,13, 0,8,141, 0,8,77, 0,9,250,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,198,\n    81,7,11, 0,8,99, 0,8,35, 0,9,166,\n    0,8,3, 0,8,131, 0,8,67, 0,9,230,\n    80,7,7, 0,8,91, 0,8,27, 0,9,150,\n    84,7,67, 0,8,123, 0,8,59, 0,9,214,\n    82,7,19, 0,8,107, 0,8,43, 0,9,182,\n    0,8,11, 0,8,139, 0,8,75, 0,9,246,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,206,\n    81,7,15, 0,8,103, 0,8,39, 0,9,174,\n    0,8,7, 0,8,135, 0,8,71, 0,9,238,\n    80,7,9, 0,8,95, 0,8,31, 0,9,158,\n    84,7,99, 0,8,127, 0,8,63, 0,9,222,\n    82,7,27, 0,8,111, 0,8,47, 0,9,190,\n    0,8,15, 0,8,143, 0,8,79, 0,9,254,\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,193,\n\n    80,7,10, 0,8,96, 0,8,32, 0,9,161,\n    0,8,0, 0,8,128, 0,8,64, 0,9,225,\n    80,7,6, 0,8,88, 0,8,24, 0,9,145,\n    83,7,59, 0,8,120, 0,8,56, 0,9,209,\n    81,7,17, 0,8,104, 0,8,40, 0,9,177,\n    0,8,8, 0,8,136, 0,8,72, 0,9,241,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,201,\n    81,7,13, 0,8,100, 0,8,36, 0,9,169,\n    0,8,4, 0,8,132, 0,8,68, 0,9,233,\n    80,7,8, 0,8,92, 0,8,28, 0,9,153,\n    84,7,83, 0,8,124, 0,8,60, 0,9,217,\n    82,7,23, 0,8,108, 0,8,44, 0,9,185,\n    0,8,12, 0,8,140, 0,8,76, 0,9,249,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,197,\n    81,7,11, 0,8,98, 0,8,34, 0,9,165,\n    0,8,2, 0,8,130, 0,8,66, 0,9,229,\n    80,7,7, 0,8,90, 0,8,26, 0,9,149,\n    84,7,67, 0,8,122, 0,8,58, 0,9,213,\n    82,7,19, 0,8,106, 0,8,42, 0,9,181,\n    0,8,10, 0,8,138, 0,8,74, 0,9,245,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,205,\n    81,7,15, 0,8,102, 0,8,38, 0,9,173,\n    0,8,6, 0,8,134, 0,8,70, 0,9,237,\n    80,7,9, 0,8,94, 0,8,30, 0,9,157,\n    84,7,99, 0,8,126, 0,8,62, 0,9,221,\n    82,7,27, 0,8,110, 0,8,46, 0,9,189,\n    0,8,14, 0,8,142, 0,8,78, 0,9,253,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,195,\n    80,7,10, 0,8,97, 0,8,33, 0,9,163,\n    0,8,1, 0,8,129, 0,8,65, 0,9,227,\n    80,7,6, 0,8,89, 0,8,25, 0,9,147,\n    83,7,59, 0,8,121, 0,8,57, 0,9,211,\n    81,7,17, 0,8,105, 0,8,41, 0,9,179,\n    0,8,9, 0,8,137, 0,8,73, 0,9,243,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,203,\n    81,7,13, 0,8,101, 0,8,37, 0,9,171,\n    0,8,5, 0,8,133, 0,8,69, 0,9,235,\n    80,7,8, 0,8,93, 0,8,29, 0,9,155,\n    84,7,83, 0,8,125, 0,8,61, 0,9,219,\n    82,7,23, 0,8,109, 0,8,45, 0,9,187,\n    0,8,13, 0,8,141, 0,8,77, 0,9,251,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,199,\n    81,7,11, 0,8,99, 0,8,35, 0,9,167,\n    0,8,3, 0,8,131, 0,8,67, 0,9,231,\n    80,7,7, 0,8,91, 0,8,27, 0,9,151,\n    84,7,67, 0,8,123, 0,8,59, 0,9,215,\n    82,7,19, 0,8,107, 0,8,43, 0,9,183,\n    0,8,11, 0,8,139, 0,8,75, 0,9,247,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,207,\n    81,7,15, 0,8,103, 0,8,39, 0,9,175,\n    0,8,7, 0,8,135, 0,8,71, 0,9,239,\n    80,7,9, 0,8,95, 0,8,31, 0,9,159,\n    84,7,99, 0,8,127, 0,8,63, 0,9,223,\n    82,7,27, 0,8,111, 0,8,47, 0,9,191,\n    0,8,15, 0,8,143, 0,8,79, 0,9,255\n];\nvar fixed_td = [\n    80,5,1, 87,5,257, 83,5,17, 91,5,4097,\n    81,5,5, 89,5,1025, 85,5,65, 93,5,16385,\n    80,5,3, 88,5,513, 84,5,33, 92,5,8193,\n    82,5,9, 90,5,2049, 86,5,129, 192,5,24577,\n    80,5,2, 87,5,385, 83,5,25, 91,5,6145,\n    81,5,7, 89,5,1537, 85,5,97, 93,5,24577,\n    80,5,4, 88,5,769, 84,5,49, 92,5,12289,\n    82,5,13, 90,5,3073, 86,5,193, 192,5,24577\n];\n\n  // Tables for deflate from PKZIP's appnote.txt.\n  var cplens = [ // Copy lengths for literal codes 257..285\n        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n  ];\n\n  // see note #13 above about 258\n  var cplext = [ // Extra bits for literal codes 257..285\n        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,\n        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112  // 112==invalid\n  ];\n\n var cpdist = [ // Copy offsets for distance codes 0..29\n        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n        8193, 12289, 16385, 24577\n  ];\n\n  var cpdext = [ // Extra bits for distance codes\n        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\n        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,\n        12, 12, 13, 13];\n\n//\n// ZStream.java\n//\n\nfunction ZStream() {\n}\n\n\nZStream.prototype.inflateInit = function(w, nowrap) {\n    if (!w) {\n\tw = DEF_WBITS;\n    }\n    if (nowrap) {\n\tnowrap = false;\n    }\n    this.istate = new Inflate();\n    return this.istate.inflateInit(this, nowrap?-w:w);\n}\n\nZStream.prototype.inflate = function(f) {\n    if(this.istate==null) return Z_STREAM_ERROR;\n    return this.istate.inflate(this, f);\n}\n\nZStream.prototype.inflateEnd = function(){\n    if(this.istate==null) return Z_STREAM_ERROR;\n    var ret=istate.inflateEnd(this);\n    this.istate = null;\n    return ret;\n}\nZStream.prototype.inflateSync = function(){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSync(this);\n}\nZStream.prototype.inflateSetDictionary = function(dictionary, dictLength){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSetDictionary(this, dictionary, dictLength);\n}\n\n/*\n\n  public int deflateInit(int level){\n    return deflateInit(level, MAX_WBITS);\n  }\n  public int deflateInit(int level, boolean nowrap){\n    return deflateInit(level, MAX_WBITS, nowrap);\n  }\n  public int deflateInit(int level, int bits){\n    return deflateInit(level, bits, false);\n  }\n  public int deflateInit(int level, int bits, boolean nowrap){\n    dstate=new Deflate();\n    return dstate.deflateInit(this, level, nowrap?-bits:bits);\n  }\n  public int deflate(int flush){\n    if(dstate==null){\n      return Z_STREAM_ERROR;\n    }\n    return dstate.deflate(this, flush);\n  }\n  public int deflateEnd(){\n    if(dstate==null) return Z_STREAM_ERROR;\n    int ret=dstate.deflateEnd();\n    dstate=null;\n    return ret;\n  }\n  public int deflateParams(int level, int strategy){\n    if(dstate==null) return Z_STREAM_ERROR;\n    return dstate.deflateParams(this, level, strategy);\n  }\n  public int deflateSetDictionary (byte[] dictionary, int dictLength){\n    if(dstate == null)\n      return Z_STREAM_ERROR;\n    return dstate.deflateSetDictionary(this, dictionary, dictLength);\n  }\n\n*/\n\n/*\n  // Flush as much pending output as possible. All deflate() output goes\n  // through this function so some applications may wish to modify it\n  // to avoid allocating a large strm->next_out buffer and copying into it.\n  // (See also read_buf()).\n  void flush_pending(){\n    int len=dstate.pending;\n\n    if(len>avail_out) len=avail_out;\n    if(len==0) return;\n\n    if(dstate.pending_buf.length<=dstate.pending_out ||\n       next_out.length<=next_out_index ||\n       dstate.pending_buf.length<(dstate.pending_out+len) ||\n       next_out.length<(next_out_index+len)){\n      System.out.println(dstate.pending_buf.length+\", \"+dstate.pending_out+\n\t\t\t \", \"+next_out.length+\", \"+next_out_index+\", \"+len);\n      System.out.println(\"avail_out=\"+avail_out);\n    }\n\n    System.arraycopy(dstate.pending_buf, dstate.pending_out,\n\t\t     next_out, next_out_index, len);\n\n    next_out_index+=len;\n    dstate.pending_out+=len;\n    total_out+=len;\n    avail_out-=len;\n    dstate.pending-=len;\n    if(dstate.pending==0){\n      dstate.pending_out=0;\n    }\n  }\n\n  // Read a new buffer from the current input stream, update the adler32\n  // and total number of bytes read.  All deflate() input goes through\n  // this function so some applications may wish to modify it to avoid\n  // allocating a large strm->next_in buffer and copying from it.\n  // (See also flush_pending()).\n  int read_buf(byte[] buf, int start, int size) {\n    int len=avail_in;\n\n    if(len>size) len=size;\n    if(len==0) return 0;\n\n    avail_in-=len;\n\n    if(dstate.noheader==0) {\n      adler=_adler.adler32(adler, next_in, next_in_index, len);\n    }\n    System.arraycopy(next_in, next_in_index, buf, start, len);\n    next_in_index  += len;\n    total_in += len;\n    return len;\n  }\n\n  public void free(){\n    next_in=null;\n    next_out=null;\n    msg=null;\n    _adler=null;\n  }\n}\n*/\n\n\n//\n// Inflate.java\n//\n\nfunction Inflate() {\n    this.was = [0];\n}\n\nInflate.prototype.inflateReset = function(z) {\n    if(z == null || z.istate == null) return Z_STREAM_ERROR;\n    \n    z.total_in = z.total_out = 0;\n    z.msg = null;\n    z.istate.mode = z.istate.nowrap!=0 ? BLOCKS : METHOD;\n    z.istate.blocks.reset(z, null);\n    return Z_OK;\n}\n\nInflate.prototype.inflateEnd = function(z){\n    if(this.blocks != null)\n      this.blocks.free(z);\n    this.blocks=null;\n    return Z_OK;\n}\n\nInflate.prototype.inflateInit = function(z, w){\n    z.msg = null;\n    this.blocks = null;\n\n    // handle undocumented nowrap option (no zlib header or check)\n    nowrap = 0;\n    if(w < 0){\n      w = - w;\n      nowrap = 1;\n    }\n\n    // set window size\n    if(w<8 ||w>15){\n      this.inflateEnd(z);\n      return Z_STREAM_ERROR;\n    }\n    this.wbits=w;\n\n    z.istate.blocks=new InfBlocks(z, \n\t\t\t\t  z.istate.nowrap!=0 ? null : this,\n\t\t\t\t  1<<w);\n\n    // reset state\n    this.inflateReset(z);\n    return Z_OK;\n  }\n\nInflate.prototype.inflate = function(z, f){\n    var r, b;\n\n    if(z == null || z.istate == null || z.next_in == null)\n      return Z_STREAM_ERROR;\n    f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n    r = Z_BUF_ERROR;\n    while (true){\n      switch (z.istate.mode){\n      case METHOD:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        if(((z.istate.method = z.next_in[z.next_in_index++])&0xf)!=Z_DEFLATED){\n          z.istate.mode = BAD;\n          z.msg=\"unknown compression method\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        if((z.istate.method>>4)+8>z.istate.wbits){\n          z.istate.mode = BAD;\n          z.msg=\"invalid window size\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        z.istate.mode=FLAG;\n      case FLAG:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        b = (z.next_in[z.next_in_index++])&0xff;\n\n        if((((z.istate.method << 8)+b) % 31)!=0){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect header check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        if((b&PRESET_DICT)==0){\n          z.istate.mode = BLOCKS;\n          break;\n        }\n        z.istate.mode = DICT4;\n      case DICT4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=DICT3;\n      case DICT3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode=DICT2;\n      case DICT2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode=DICT1;\n      case DICT1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need += (z.next_in[z.next_in_index++]&0xff);\n        z.adler = z.istate.need;\n        z.istate.mode = DICT0;\n        return Z_NEED_DICT;\n      case DICT0:\n        z.istate.mode = BAD;\n        z.msg = \"need dictionary\";\n        z.istate.marker = 0;       // can try inflateSync\n        return Z_STREAM_ERROR;\n      case BLOCKS:\n\n        r = z.istate.blocks.proc(z, r);\n        if(r == Z_DATA_ERROR){\n          z.istate.mode = BAD;\n          z.istate.marker = 0;     // can try inflateSync\n          break;\n        }\n        if(r == Z_OK){\n          r = f;\n        }\n        if(r != Z_STREAM_END){\n          return r;\n        }\n        r = f;\n        z.istate.blocks.reset(z, z.istate.was);\n        if(z.istate.nowrap!=0){\n          z.istate.mode=DONE;\n          break;\n        }\n        z.istate.mode=CHECK4;\n      case CHECK4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=CHECK3;\n      case CHECK3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode = CHECK2;\n      case CHECK2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode = CHECK1;\n      case CHECK1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=(z.next_in[z.next_in_index++]&0xff);\n\n        if(((z.istate.was[0])) != ((z.istate.need))){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect data check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        z.istate.mode = DONE;\n      case DONE:\n        return Z_STREAM_END;\n      case BAD:\n        return Z_DATA_ERROR;\n      default:\n        return Z_STREAM_ERROR;\n      }\n    }\n  }\n\n\nInflate.prototype.inflateSetDictionary = function(z,  dictionary, dictLength) {\n    var index=0;\n    var length = dictLength;\n    if(z==null || z.istate == null|| z.istate.mode != DICT0)\n      return Z_STREAM_ERROR;\n\n    if(z._adler.adler32(1, dictionary, 0, dictLength)!=z.adler){\n      return Z_DATA_ERROR;\n    }\n\n    z.adler = z._adler.adler32(0, null, 0, 0);\n\n    if(length >= (1<<z.istate.wbits)){\n      length = (1<<z.istate.wbits)-1;\n      index=dictLength - length;\n    }\n    z.istate.blocks.set_dictionary(dictionary, index, length);\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n  }\n\n//  static private byte[] mark = {(byte)0, (byte)0, (byte)0xff, (byte)0xff};\nvar mark = [0, 0, 255, 255]\n\nInflate.prototype.inflateSync = function(z){\n    var n;       // number of bytes to look at\n    var p;       // pointer to bytes\n    var m;       // number of marker bytes found in a row\n    var r, w;   // temporaries to save total_in and total_out\n\n    // set up\n    if(z == null || z.istate == null)\n      return Z_STREAM_ERROR;\n    if(z.istate.mode != BAD){\n      z.istate.mode = BAD;\n      z.istate.marker = 0;\n    }\n    if((n=z.avail_in)==0)\n      return Z_BUF_ERROR;\n    p=z.next_in_index;\n    m=z.istate.marker;\n\n    // search\n    while (n!=0 && m < 4){\n      if(z.next_in[p] == mark[m]){\n        m++;\n      }\n      else if(z.next_in[p]!=0){\n        m = 0;\n      }\n      else{\n        m = 4 - m;\n      }\n      p++; n--;\n    }\n\n    // restore\n    z.total_in += p-z.next_in_index;\n    z.next_in_index = p;\n    z.avail_in = n;\n    z.istate.marker = m;\n\n    // return no joy or set up to restart on a new block\n    if(m != 4){\n      return Z_DATA_ERROR;\n    }\n    r=z.total_in;  w=z.total_out;\n    this.inflateReset(z);\n    z.total_in=r;  z.total_out = w;\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n  // implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH\n  // but removes the length bytes of the resulting empty stored block. When\n  // decompressing, PPP checks that at the end of input packet, inflate is\n  // waiting for these length bytes.\nInflate.prototype.inflateSyncPoint = function(z){\n    if(z == null || z.istate == null || z.istate.blocks == null)\n      return Z_STREAM_ERROR;\n    return z.istate.blocks.sync_point();\n}\n\n\n//\n// InfBlocks.java\n//\n\nvar INFBLOCKS_BORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\nfunction InfBlocks(z, checkfn, w) {\n    this.hufts=new Int32Array(MANY*3);\n    this.window=new Uint8Array(w);\n    this.end=w;\n    this.checkfn = checkfn;\n    this.mode = IB_TYPE;\n    this.reset(z, null);\n\n    this.left = 0;            // if STORED, bytes left to copy \n\n    this.table = 0;           // table lengths (14 bits) \n    this.index = 0;           // index into blens (or border) \n    this.blens = null;         // bit lengths of codes \n    this.bb=new Int32Array(1); // bit length tree depth \n    this.tb=new Int32Array(1); // bit length decoding tree \n\n    this.codes = new InfCodes();\n\n    this.last = 0;            // true if this block is the last block \n\n  // mode independent information \n    this.bitk = 0;            // bits in bit buffer \n    this.bitb = 0;            // bit buffer \n    this.read = 0;            // window read pointer \n    this.write = 0;           // window write pointer \n    this.check = 0;          // check on output \n\n    this.inftree=new InfTree();\n}\n\n\n\n\nInfBlocks.prototype.reset = function(z, c){\n    if(c) c[0]=this.check;\n    if(this.mode==IB_CODES){\n      this.codes.free(z);\n    }\n    this.mode=IB_TYPE;\n    this.bitk=0;\n    this.bitb=0;\n    this.read=this.write=0;\n\n    if(this.checkfn)\n      z.adler=this.check=z._adler.adler32(0, null, 0, 0);\n  }\n\n InfBlocks.prototype.proc = function(z, r){\n    var t;              // temporary storage\n    var b;              // bit buffer\n    var k;              // bits in bit buffer\n    var p;              // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n\n    // copy input/output information to locals (UPDATE macro restores)\n    {p=z.next_in_index;n=z.avail_in;b=this.bitb;k=this.bitk;}\n    {q=this.write;m=(q<this.read ? this.read-q-1 : this.end-q);}\n\n    // process input based on current state\n    while(true){\n      switch (this.mode){\n      case IB_TYPE:\n\n\twhile(k<(3)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\tt = (b & 7);\n\tthis.last = t & 1;\n\n\tswitch (t >>> 1){\n        case 0:                         // stored \n          {b>>>=(3);k-=(3);}\n          t = k & 7;                    // go to byte boundary\n\n          {b>>>=(t);k-=(t);}\n          this.mode = IB_LENS;                  // get length of stored block\n          break;\n        case 1:                         // fixed\n          {\n              var bl=new Int32Array(1);\n\t      var bd=new Int32Array(1);\n              var tl=[];\n\t      var td=[];\n\n\t      inflate_trees_fixed(bl, bd, tl, td, z);\n              this.codes.init(bl[0], bd[0], tl[0], 0, td[0], 0, z);\n          }\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_CODES;\n          break;\n        case 2:                         // dynamic\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_TABLE;\n          break;\n        case 3:                         // illegal\n\n          {b>>>=(3);k-=(3);}\n          this.mode = BAD;\n          z.msg = \"invalid block type\";\n          r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tbreak;\n      case IB_LENS:\n\twhile(k<(32)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)){\n\t  this.mode = BAD;\n\t  z.msg = \"invalid stored block lengths\";\n\t  r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tthis.left = (b & 0xffff);\n\tb = k = 0;                       // dump bits\n\tthis.mode = this.left!=0 ? IB_STORED : (this.last!=0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_STORED:\n\tif (n == 0){\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tif(m==0){\n\t  if(q==end&&read!=0){\n\t    q=0; m=(q<this.read ? this.read-q-1 : this.end-q);\n\t  }\n\t  if(m==0){\n\t    this.write=q; \n\t    r=this.inflate_flush(z,r);\n\t    q=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    if(q==this.end && this.read != 0){\n\t      q=0; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    }\n\t    if(m==0){\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\tt = this.left;\n\tif(t>n) t = n;\n\tif(t>m) t = m;\n\tarrayCopy(z.next_in, p, this.window, q, t);\n\tp += t;  n -= t;\n\tq += t;  m -= t;\n\tif ((this.left -= t) != 0)\n\t  break;\n\tthis.mode = (this.last != 0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_TABLE:\n\n\twhile(k<(14)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.table = t = (b & 0x3fff);\n\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)\n\t  {\n\t    this.mode = IB_BAD;\n\t    z.msg = \"too many length or distance symbols\";\n\t    r = Z_DATA_ERROR;\n\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  }\n\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\tif(this.blens==null || this.blens.length<t){\n\t    this.blens=new Int32Array(t);\n\t}\n\telse{\n\t  for(var i=0; i<t; i++){\n              this.blens[i]=0;\n          }\n\t}\n\n\t{b>>>=(14);k-=(14);}\n\n\tthis.index = 0;\n\tmode = IB_BTREE;\n      case IB_BTREE:\n\twhile (this.index < 4 + (this.table >>> 10)){\n\t  while(k<(3)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = b&7;\n\n\t  {b>>>=(3);k-=(3);}\n\t}\n\n\twhile(this.index < 19){\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = 0;\n\t}\n\n\tthis.bb[0] = 7;\n\tt = this.inftree.inflate_trees_bits(this.blens, this.bb, this.tb, this.hufts, z);\n\tif (t != Z_OK){\n\t  r = t;\n\t  if (r == Z_DATA_ERROR){\n\t    this.blens=null;\n\t    this.mode = IB_BAD;\n\t  }\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tthis.index = 0;\n\tthis.mode = IB_DTREE;\n      case IB_DTREE:\n\twhile (true){\n\t  t = this.table;\n\t  if(!(this.index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))){\n\t    break;\n\t  }\n\n\t  var h; //int[]\n\t  var i, j, c;\n\n\t  t = this.bb[0];\n\n\t  while(k<(t)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n//\t  if (this.tb[0]==-1){\n//            dlog(\"null...\");\n//\t  }\n\n\t  t=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+1];\n\t  c=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+2];\n\n\t  if (c < 16){\n\t    b>>>=(t);k-=(t);\n\t    this.blens[this.index++] = c;\n\t  }\n\t  else { // c == 16..18\n\t    i = c == 18 ? 7 : c - 14;\n\t    j = c == 18 ? 11 : 3;\n\n\t    while(k<(t+i)){\n\t      if(n!=0){\n\t\tr=Z_OK;\n\t      }\n\t      else{\n\t\tthis.bitb=b; this.bitk=k; \n\t\tz.avail_in=n;\n\t\tz.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\tthis.write=q;\n\t\treturn this.inflate_flush(z,r);\n\t      };\n\t      n--;\n\t      b|=(z.next_in[p++]&0xff)<<k;\n\t      k+=8;\n\t    }\n\n\t    b>>>=(t);k-=(t);\n\n\t    j += (b & inflate_mask[i]);\n\n\t    b>>>=(i);k-=(i);\n\n\t    i = this.index;\n\t    t = this.table;\n\t    if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) ||\n\t\t(c == 16 && i < 1)){\n\t      this.blens=null;\n\t      this.mode = IB_BAD;\n\t      z.msg = \"invalid bit length repeat\";\n\t      r = Z_DATA_ERROR;\n\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\n\t    c = c == 16 ? this.blens[i-1] : 0;\n\t    do{\n\t      this.blens[i++] = c;\n\t    }\n\t    while (--j!=0);\n\t    this.index = i;\n\t  }\n\t}\n\n\tthis.tb[0]=-1;\n\t{\n\t    var bl=new Int32Array(1);\n\t    var bd=new Int32Array(1);\n\t    var tl=new Int32Array(1);\n\t    var td=new Int32Array(1);\n\t    bl[0] = 9;         // must be <= 9 for lookahead assumptions\n\t    bd[0] = 6;         // must be <= 9 for lookahead assumptions\n\n\t    t = this.table;\n\t    t = this.inftree.inflate_trees_dynamic(257 + (t & 0x1f), \n\t\t\t\t\t      1 + ((t >> 5) & 0x1f),\n\t\t\t\t\t      this.blens, bl, bd, tl, td, this.hufts, z);\n\n\t    if (t != Z_OK){\n\t        if (t == Z_DATA_ERROR){\n\t            this.blens=null;\n\t            this.mode = BAD;\n\t        }\n\t        r = t;\n\n\t        this.bitb=b; this.bitk=k; \n\t        z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t        this.write=q;\n\t        return this.inflate_flush(z,r);\n\t    }\n\t    this.codes.init(bl[0], bd[0], this.hufts, tl[0], this.hufts, td[0], z);\n\t}\n\tthis.mode = IB_CODES;\n      case IB_CODES:\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n; z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\n\tif ((r = this.codes.proc(this, z, r)) != Z_STREAM_END){\n\t  return this.inflate_flush(z, r);\n\t}\n\tr = Z_OK;\n\tthis.codes.free(z);\n\n\tp=z.next_in_index; n=z.avail_in;b=this.bitb;k=this.bitk;\n\tq=this.write;m = (q < this.read ? this.read-q-1 : this.end-q);\n\n\tif (this.last==0){\n\t  this.mode = IB_TYPE;\n\t  break;\n\t}\n\tthis.mode = IB_DRY;\n      case IB_DRY:\n\tthis.write=q; \n\tr = this.inflate_flush(z, r); \n\tq=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\tif (this.read != this.write){\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z, r);\n\t}\n\tmode = DONE;\n      case IB_DONE:\n\tr = Z_STREAM_END;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      case IB_BAD:\n\tr = Z_DATA_ERROR;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      }\n    }\n  }\n\nInfBlocks.prototype.free = function(z){\n    this.reset(z, null);\n    this.window=null;\n    this.hufts=null;\n}\n\nInfBlocks.prototype.set_dictionary = function(d, start, n){\n    arrayCopy(d, start, window, 0, n);\n    this.read = this.write = n;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. \nInfBlocks.prototype.sync_point = function(){\n    return this.mode == IB_LENS;\n}\n\n  // copy as much as possible from the sliding window to the output area\nInfBlocks.prototype.inflate_flush = function(z, r){\n    var n;\n    var p;\n    var q;\n\n    // local copies of source and destination pointers\n    p = z.next_out_index;\n    q = this.read;\n\n    // compute number of bytes to copy as far as end of window\n    n = ((q <= this.write ? this.write : this.end) - q);\n    if (n > z.avail_out) n = z.avail_out;\n    if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n    // update counters\n    z.avail_out -= n;\n    z.total_out += n;\n\n    // update check information\n    if(this.checkfn != null)\n      z.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n    // copy as far as end of window\n    arrayCopy(this.window, q, z.next_out, p, n);\n    p += n;\n    q += n;\n\n    // see if more to copy at beginning of window\n    if (q == this.end){\n      // wrap pointers\n      q = 0;\n      if (this.write == this.end)\n        this.write = 0;\n\n      // compute bytes to copy\n      n = this.write - q;\n      if (n > z.avail_out) n = z.avail_out;\n      if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n      // update counters\n      z.avail_out -= n;\n      z.total_out += n;\n\n      // update check information\n      if(this.checkfn != null)\n\tz.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n      // copy\n      arrayCopy(this.window, q, z.next_out, p, n);\n      p += n;\n      q += n;\n    }\n\n    // update pointers\n    z.next_out_index = p;\n    this.read = q;\n\n    // done\n    return r;\n  }\n\n//\n// InfCodes.java\n//\n\nvar IC_START=0;  // x: set up for LEN\nvar IC_LEN=1;    // i: get length/literal/eob next\nvar IC_LENEXT=2; // i: getting length extra (have base)\nvar IC_DIST=3;   // i: get distance next\nvar IC_DISTEXT=4;// i: getting distance extra\nvar IC_COPY=5;   // o: copying bytes in window, waiting for space\nvar IC_LIT=6;    // o: got literal, waiting for output space\nvar IC_WASH=7;   // o: got eob, possibly still output waiting\nvar IC_END=8;    // x: got eob and all data flushed\nvar IC_BADCODE=9;// x: got error\n\nfunction InfCodes() {\n}\n\nInfCodes.prototype.init = function(bl, bd, tl, tl_index, td, td_index, z) {\n    this.mode=IC_START;\n    this.lbits=bl;\n    this.dbits=bd;\n    this.ltree=tl;\n    this.ltree_index=tl_index;\n    this.dtree = td;\n    this.dtree_index=td_index;\n    this.tree=null;\n}\n\nInfCodes.prototype.proc = function(s, z, r){ \n    var j;              // temporary storage\n    var t;              // temporary pointer (int[])\n    var tindex;         // temporary pointer\n    var e;              // extra bits or operation\n    var b=0;            // bit buffer\n    var k=0;            // bits in bit buffer\n    var p=0;            // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n    var f;              // pointer to copy strings from\n\n    // copy input/output information to locals (UPDATE macro restores)\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // process input and output based on current state\n    while (true){\n      switch (this.mode){\n\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n      case IC_START:         // x: set up for LEN\n\tif (m >= 258 && n >= 10){\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  r = this.inflate_fast(this.lbits, this.dbits, \n\t\t\t   this.ltree, this.ltree_index, \n\t\t\t   this.dtree, this.dtree_index,\n\t\t\t   s, z);\n\n\t  p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n\t  q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t  if (r != Z_OK){\n\t    this.mode = r == Z_STREAM_END ? IC_WASH : IC_BADCODE;\n\t    break;\n\t  }\n\t}\n\tthis.need = this.lbits;\n\tthis.tree = this.ltree;\n\tthis.tree_index=this.ltree_index;\n\n\tthis.mode = IC_LEN;\n      case IC_LEN:           // i: get length/literal/eob next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b&inflate_mask[j]))*3;\n\n\tb>>>=(this.tree[tindex+1]);\n\tk-=(this.tree[tindex+1]);\n\n\te=this.tree[tindex];\n\n\tif(e == 0){               // literal\n\t  this.lit = this.tree[tindex+2];\n\t  this.mode = IC_LIT;\n\t  break;\n\t}\n\tif((e & 16)!=0 ){          // length\n\t  this.get = e & 15;\n\t  this.len = this.tree[tindex+2];\n\t  this.mode = IC_LENEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tif ((e & 32)!=0){               // end of block\n\t  this.mode = IC_WASH;\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid literal/length code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_LENEXT:        // i: getting length extra (have base)\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.len += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.need = this.dbits;\n\tthis.tree = this.dtree;\n\tthis.tree_index = this.dtree_index;\n\tthis.mode = IC_DIST;\n      case IC_DIST:          // i: get distance next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b & inflate_mask[j]))*3;\n\n\tb>>=this.tree[tindex+1];\n\tk-=this.tree[tindex+1];\n\n\te = (this.tree[tindex]);\n\tif((e & 16)!=0){               // distance\n\t  this.get = e & 15;\n\t  this.dist = this.tree[tindex+2];\n\t  this.mode = IC_DISTEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid distance code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_DISTEXT:       // i: getting distance extra\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.dist += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.mode = IC_COPY;\n      case IC_COPY:          // o: copying bytes in window, waiting for space\n        f = q - this.dist;\n        while(f < 0){     // modulo window size-\"while\" instead\n          f += s.end;     // of \"if\" handles invalid distances\n\t}\n\twhile (this.len!=0){\n\n\t  if(m==0){\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.write=q; r=s.inflate_flush(z,r);\n\t      q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t      if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\n\t      if(m==0){\n\t\ts.bitb=b;s.bitk=k;\n\t\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\ts.write=q;\n\t\treturn s.inflate_flush(z,r);\n\t      }  \n\t    }\n\t  }\n\n\t  s.window[q++]=s.window[f++]; m--;\n\n\t  if (f == s.end)\n            f = 0;\n\t  this.len--;\n\t}\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_LIT:           // o: got literal, waiting for output space\n\tif(m==0){\n\t  if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t  if(m==0){\n\t    s.write=q; r=s.inflate_flush(z,r);\n\t    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\t      return s.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\ts.window[q++]=this.lit; m--;\n\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_WASH:           // o: got eob, possibly more output\n\tif (k > 7){        // return unused byte, if any\n\t  k -= 8;\n\t  n++;\n\t  p--;             // can always return one\n\t}\n\n\ts.write=q; r=s.inflate_flush(z,r);\n\tq=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\tif (s.read != s.write){\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  return s.inflate_flush(z,r);\n\t}\n\tthis.mode = IC_END;\n      case IC_END:\n\tr = Z_STREAM_END;\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_BADCODE:       // x: got error\n\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n      }\n    }\n  }\n\nInfCodes.prototype.free = function(z){\n    //  ZFREE(z, c);\n}\n\n  // Called with number of bytes left to write in window at least 258\n  // (the maximum string length) and number of input bytes available\n  // at least ten.  The ten bytes are six bytes for the longest length/\n  // distance pair plus four bytes for overloading the bit buffer.\n\nInfCodes.prototype.inflate_fast = function(bl, bd, tl, tl_index, td, td_index, s, z) {\n    var t;                // temporary pointer\n    var   tp;             // temporary pointer (int[])\n    var tp_index;         // temporary pointer\n    var e;                // extra bits or operation\n    var b;                // bit buffer\n    var k;                // bits in bit buffer\n    var p;                // input data pointer\n    var n;                // bytes available there\n    var q;                // output window write pointer\n    var m;                // bytes to end of window or read pointer\n    var ml;               // mask for literal/length tree\n    var md;               // mask for distance tree\n    var c;                // bytes to copy\n    var d;                // distance back to copy from\n    var r;                // copy source pointer\n\n    var tp_index_t_3;     // (tp_index+t)*3\n\n    // load input, output, bit values\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // initialize masks\n    ml = inflate_mask[bl];\n    md = inflate_mask[bd];\n\n    // do until not enough input or output space for fast loop\n    do {                          // assume called with m >= 258 && n >= 10\n      // get literal/length code\n      while(k<(20)){              // max bits for literal/length code\n\tn--;\n\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n      }\n\n      t= b&ml;\n      tp=tl; \n      tp_index=tl_index;\n      tp_index_t_3=(tp_index+t)*3;\n      if ((e = tp[tp_index_t_3]) == 0){\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\ts.window[q++] = tp[tp_index_t_3+2];\n\tm--;\n\tcontinue;\n      }\n      do {\n\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\tif((e&16)!=0){\n\t  e &= 15;\n\t  c = tp[tp_index_t_3+2] + (b & inflate_mask[e]);\n\n\t  b>>=e; k-=e;\n\n\t  // decode distance base of block to copy\n\t  while(k<(15)){           // max bits for distance code\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t  }\n\n\t  t= b&md;\n\t  tp=td;\n\t  tp_index=td_index;\n          tp_index_t_3=(tp_index+t)*3;\n\t  e = tp[tp_index_t_3];\n\n\t  do {\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    if((e&16)!=0){\n\t      // get extra bits to add to distance base\n\t      e &= 15;\n\t      while(k<(e)){         // get extra bits (up to 13)\n\t\tn--;\n\t\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t      }\n\n\t      d = tp[tp_index_t_3+2] + (b&inflate_mask[e]);\n\n\t      b>>=(e); k-=(e);\n\n\t      // do the copy\n\t      m -= c;\n\t      if (q >= d){                // offset before dest\n\t\t//  just copy\n\t\tr=q-d;\n\t\tif(q-r>0 && 2>(q-r)){           \n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t\telse{\n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t      }\n\t      else{                  // else offset after destination\n                r=q-d;\n                do{\n                  r+=s.end;          // force pointer in window\n                }while(r<0);         // covers invalid distances\n\t\te=s.end-r;\n\t\tif(c>e){             // if source crosses,\n\t\t  c-=e;              // wrapped copy\n\t\t  if(q-r>0 && e>(q-r)){           \n\t\t    do{s.window[q++] = s.window[r++];}\n\t\t    while(--e!=0);\n\t\t  }\n\t\t  else{\n\t\t    arrayCopy(s.window, r, s.window, q, e);\n\t\t    q+=e; r+=e; e=0;\n\t\t  }\n\t\t  r = 0;                  // copy rest from start of window\n\t\t}\n\n\t      }\n\n\t      // copy all or what's left\n              do{s.window[q++] = s.window[r++];}\n\t\twhile(--c!=0);\n\t      break;\n\t    }\n\t    else if((e&64)==0){\n\t      t+=tp[tp_index_t_3+2];\n\t      t+=(b&inflate_mask[e]);\n\t      tp_index_t_3=(tp_index+t)*3;\n\t      e=tp[tp_index_t_3];\n\t    }\n\t    else{\n\t      z.msg = \"invalid distance code\";\n\n\t      c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\n\t      return Z_DATA_ERROR;\n\t    }\n\t  }\n\t  while(true);\n\t  break;\n\t}\n\n\tif((e&64)==0){\n\t  t+=tp[tp_index_t_3+2];\n\t  t+=(b&inflate_mask[e]);\n\t  tp_index_t_3=(tp_index+t)*3;\n\t  if((e=tp[tp_index_t_3])==0){\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    s.window[q++]=tp[tp_index_t_3+2];\n\t    m--;\n\t    break;\n\t  }\n\t}\n\telse if((e&32)!=0){\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n \n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_STREAM_END;\n\t}\n\telse{\n\t  z.msg=\"invalid literal/length code\";\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_DATA_ERROR;\n\t}\n      } \n      while(true);\n    } \n    while(m>=258 && n>= 10);\n\n    // not enough input or output--restore pointers and return\n    c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n    s.bitb=b;s.bitk=k;\n    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n    s.write=q;\n\n    return Z_OK;\n}\n\n//\n// InfTree.java\n//\n\nfunction InfTree() {\n}\n\nInfTree.prototype.huft_build = function(b, bindex, n, s, d, e, t, m, hp, hn, v) {\n\n    // Given a list of code lengths and a maximum table size, make a set of\n    // tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR\n    // if the given code set is incomplete (the tables are still built in this\n    // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of\n    // lengths), or Z_MEM_ERROR if not enough memory.\n\n    var a;                       // counter for codes of length k\n    var f;                       // i repeats in table every f entries\n    var g;                       // maximum code length\n    var h;                       // table level\n    var i;                       // counter, current code\n    var j;                       // counter\n    var k;                       // number of bits in current code\n    var l;                       // bits per table (returned in m)\n    var mask;                    // (1 << w) - 1, to avoid cc -O bug on HP\n    var p;                       // pointer into c[], b[], or v[]\n    var q;                       // points to current table\n    var w;                       // bits before this table == (l * h)\n    var xp;                      // pointer into x\n    var y;                       // number of dummy codes added\n    var z;                       // number of entries in current table\n\n    // Generate counts for each bit length\n\n    p = 0; i = n;\n    do {\n      this.c[b[bindex+p]]++; p++; i--;   // assume all entries <= BMAX\n    }while(i!=0);\n\n    if(this.c[0] == n){                // null input--all zero length codes\n      t[0] = -1;\n      m[0] = 0;\n      return Z_OK;\n    }\n\n    // Find minimum and maximum length, bound *m by those\n    l = m[0];\n    for (j = 1; j <= BMAX; j++)\n      if(this.c[j]!=0) break;\n    k = j;                        // minimum code length\n    if(l < j){\n      l = j;\n    }\n    for (i = BMAX; i!=0; i--){\n      if(this.c[i]!=0) break;\n    }\n    g = i;                        // maximum code length\n    if(l > i){\n      l = i;\n    }\n    m[0] = l;\n\n    // Adjust last length count to fill out codes, if needed\n    for (y = 1 << j; j < i; j++, y <<= 1){\n      if ((y -= this.c[j]) < 0){\n        return Z_DATA_ERROR;\n      }\n    }\n    if ((y -= this.c[i]) < 0){\n      return Z_DATA_ERROR;\n    }\n    this.c[i] += y;\n\n    // Generate starting offsets into the value table for each length\n    this.x[1] = j = 0;\n    p = 1;  xp = 2;\n    while (--i!=0) {                 // note that i == g from above\n      this.x[xp] = (j += this.c[p]);\n      xp++;\n      p++;\n    }\n\n    // Make a table of values in order of bit lengths\n    i = 0; p = 0;\n    do {\n      if ((j = b[bindex+p]) != 0){\n        this.v[this.x[j]++] = i;\n      }\n      p++;\n    }\n    while (++i < n);\n    n = this.x[g];                     // set n to length of v\n\n    // Generate the Huffman codes and for each, make the table entries\n    this.x[0] = i = 0;                 // first Huffman code is zero\n    p = 0;                        // grab values in bit order\n    h = -1;                       // no tables yet--level -1\n    w = -l;                       // bits decoded == (l * h)\n    this.u[0] = 0;                     // just to keep compilers happy\n    q = 0;                        // ditto\n    z = 0;                        // ditto\n\n    // go through the bit lengths (k already is bits in shortest code)\n    for (; k <= g; k++){\n      a = this.c[k];\n      while (a--!=0){\n\t// here i is the Huffman code of length k bits for value *p\n\t// make tables up to required level\n        while (k > w + l){\n          h++;\n          w += l;                 // previous table always l bits\n\t  // compute minimum size table less than or equal to l bits\n          z = g - w;\n          z = (z > l) ? l : z;        // table size upper limit\n          if((f=1<<(j=k-w))>a+1){     // try a k-w bit table\n                                      // too few codes for k-w bit table\n            f -= a + 1;               // deduct codes from patterns left\n            xp = k;\n            if(j < z){\n              while (++j < z){        // try smaller tables up to z bits\n                if((f <<= 1) <= this.c[++xp])\n                  break;              // enough codes to use up j bits\n                f -= this.c[xp];           // else deduct codes from patterns\n              }\n\t    }\n          }\n          z = 1 << j;                 // table entries for j-bit table\n\n\t  // allocate new table\n          if (this.hn[0] + z > MANY){       // (note: doesn't matter for fixed)\n            return Z_DATA_ERROR;       // overflow of MANY\n          }\n          this.u[h] = q = /*hp+*/ this.hn[0];   // DEBUG\n          this.hn[0] += z;\n \n\t  // connect to last table, if there is one\n\t  if(h!=0){\n            this.x[h]=i;           // save pattern for backing up\n            this.r[0]=j;     // bits in this table\n            this.r[1]=l;     // bits to dump before this table\n            j=i>>>(w - l);\n            this.r[2] = (q - this.u[h-1] - j);               // offset to this table\n            arrayCopy(this.r, 0, hp, (this.u[h-1]+j)*3, 3); // connect to last table\n          }\n          else{\n            t[0] = q;               // first table is returned result\n\t  }\n        }\n\n\t// set up table entry in r\n        this.r[1] = (k - w);\n        if (p >= n){\n          this.r[0] = 128 + 64;      // out of values--invalid code\n\t}\n        else if (v[p] < s){\n          this.r[0] = (this.v[p] < 256 ? 0 : 32 + 64);  // 256 is end-of-block\n          this.r[2] = this.v[p++];          // simple code is just the value\n        }\n        else{\n          this.r[0]=(e[this.v[p]-s]+16+64); // non-simple--look up in lists\n          this.r[2]=d[this.v[p++] - s];\n        }\n\n        // fill code-like entries with r\n        f=1<<(k-w);\n        for (j=i>>>w;j<z;j+=f){\n          arrayCopy(this.r, 0, hp, (q+j)*3, 3);\n\t}\n\n\t// backwards increment the k-bit code i\n        for (j = 1 << (k - 1); (i & j)!=0; j >>>= 1){\n          i ^= j;\n\t}\n        i ^= j;\n\n\t// backup over finished tables\n        mask = (1 << w) - 1;      // needed on HP, cc -O bug\n        while ((i & mask) != this.x[h]){\n          h--;                    // don't need to update q\n          w -= l;\n          mask = (1 << w) - 1;\n        }\n      }\n    }\n    // Return Z_BUF_ERROR if we were given an incomplete table\n    return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n}\n\nInfTree.prototype.inflate_trees_bits = function(c, bb, tb, hp, z) {\n    var result;\n    this.initWorkArea(19);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, 19, 19, null, null, tb, bb, hp, this.hn, this.v);\n\n    if(result == Z_DATA_ERROR){\n      z.msg = \"oversubscribed dynamic bit lengths tree\";\n    }\n    else if(result == Z_BUF_ERROR || bb[0] == 0){\n      z.msg = \"incomplete dynamic bit lengths tree\";\n      result = Z_DATA_ERROR;\n    }\n    return result;\n}\n\nInfTree.prototype.inflate_trees_dynamic = function(nl, nd, c, bl, bd, tl, td, hp, z) {\n    var result;\n\n    // build literal/length tree\n    this.initWorkArea(288);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, this.hn, this.v);\n    if (result != Z_OK || bl[0] == 0){\n      if(result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed literal/length tree\";\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"incomplete literal/length tree\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    // build distance tree\n    this.initWorkArea(288);\n    result = this.huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, this.hn, this.v);\n\n    if (result != Z_OK || (bd[0] == 0 && nl > 257)){\n      if (result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed distance tree\";\n      }\n      else if (result == Z_BUF_ERROR) {\n        z.msg = \"incomplete distance tree\";\n        result = Z_DATA_ERROR;\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"empty distance tree with lengths\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    return Z_OK;\n}\n/*\n  static int inflate_trees_fixed(int[] bl,  //literal desired/actual bit depth\n                                 int[] bd,  //distance desired/actual bit depth\n                                 int[][] tl,//literal/length tree result\n                                 int[][] td,//distance tree result \n                                 ZStream z  //for memory allocation\n\t\t\t\t ){\n\n*/\n\nfunction inflate_trees_fixed(bl, bd, tl, td, z) {\n    bl[0]=fixed_bl;\n    bd[0]=fixed_bd;\n    tl[0]=fixed_tl;\n    td[0]=fixed_td;\n    return Z_OK;\n}\n\nInfTree.prototype.initWorkArea = function(vsize){\n    if(this.hn==null){\n        this.hn=new Int32Array(1);\n        this.v=new Int32Array(vsize);\n        this.c=new Int32Array(BMAX+1);\n        this.r=new Int32Array(3);\n        this.u=new Int32Array(BMAX);\n        this.x=new Int32Array(BMAX+1);\n    }\n    if(this.v.length<vsize){ \n        this.v=new Int32Array(vsize); \n    }\n    for(var i=0; i<vsize; i++){this.v[i]=0;}\n    for(var i=0; i<BMAX+1; i++){this.c[i]=0;}\n    for(var i=0; i<3; i++){this.r[i]=0;}\n//  for(int i=0; i<BMAX; i++){u[i]=0;}\n    arrayCopy(this.c, 0, this.u, 0, BMAX);\n//  for(int i=0; i<BMAX+1; i++){x[i]=0;}\n    arrayCopy(this.c, 0, this.x, 0, BMAX+1);\n}\n\nvar testArray = new Uint8Array(1);\nvar hasSubarray = (typeof testArray.subarray === 'function');\nvar hasSlice = false; /* (typeof testArray.slice === 'function'); */ // Chrome slice performance is so dire that we're currently not using it...\n\nfunction arrayCopy(src, srcOffset, dest, destOffset, count) {\n    if (count == 0) {\n        return;\n    } \n    if (!src) {\n        throw \"Undef src\";\n    } else if (!dest) {\n        throw \"Undef dest\";\n    }\n\n    if (srcOffset == 0 && count == src.length) {\n        arrayCopy_fast(src, dest, destOffset);\n    } else if (hasSubarray) {\n        arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset); \n    } else if (src.BYTES_PER_ELEMENT == 1 && count > 100) {\n        arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);\n    } else { \n        arrayCopy_slow(src, srcOffset, dest, destOffset, count);\n    }\n\n}\n\nfunction arrayCopy_slow(src, srcOffset, dest, destOffset, count) {\n\n    // dlog('_slow call: srcOffset=' + srcOffset + '; destOffset=' + destOffset + '; count=' + count);\n\n     for (var i = 0; i < count; ++i) {\n        dest[destOffset + i] = src[srcOffset + i];\n    }\n}\n\nfunction arrayCopy_fast(src, dest, destOffset) {\n    dest.set(src, destOffset);\n}\n\n\n  // largest prime smaller than 65536\nvar ADLER_BASE=65521; \n  // NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1\nvar ADLER_NMAX=5552;\n\nfunction adler32(adler, /* byte[] */ buf,  index, len){\n    if(buf == null){ return 1; }\n\n    var s1=adler&0xffff;\n    var s2=(adler>>16)&0xffff;\n    var k;\n\n    while(len > 0) {\n      k=len<ADLER_NMAX?len:ADLER_NMAX;\n      len-=k;\n      while(k>=16){\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        k-=16;\n      }\n      if(k!=0){\n        do{\n          s1+=buf[index++]&0xff; s2+=s1;\n        }\n        while(--k!=0);\n      }\n      s1%=ADLER_BASE;\n      s2%=ADLER_BASE;\n    }\n    return (s2<<16)|s1;\n}\n\n\n\nfunction jszlib_inflate_buffer(buffer, start, length, afterUncOffset) {\n    if (!start) {\n        buffer = new Uint8Array(buffer);\n    } else if (!length) {\n        buffer = new Uint8Array(buffer, start, buffer.byteLength - start);\n    } else {\n        buffer = new Uint8Array(buffer, start, length);\n    }\n\n    var z = new ZStream();\n    z.inflateInit(DEF_WBITS, true);\n    z.next_in = buffer;\n    z.next_in_index = 0;\n    z.avail_in = buffer.length;\n\n    var oBlockList = [];\n    var totalSize = 0;\n    while (true) {\n        var obuf = new Uint8Array(32000);\n        z.next_out = obuf;\n        z.next_out_index = 0;\n        z.avail_out = obuf.length;\n        var status = z.inflate(Z_NO_FLUSH);\n        if (status != Z_OK && status != Z_STREAM_END && status != Z_BUF_ERROR) {\n            throw z.msg;\n        }\n        if (z.avail_out != 0) {\n            var newob = new Uint8Array(obuf.length - z.avail_out);\n            arrayCopy(obuf, 0, newob, 0, (obuf.length - z.avail_out));\n            obuf = newob;\n        }\n        oBlockList.push(obuf);\n        totalSize += obuf.length;\n        if (status == Z_STREAM_END || status == Z_BUF_ERROR) {\n            break;\n        }\n    }\n\n    if (afterUncOffset) {\n        afterUncOffset[0] = (start || 0) + z.next_in_index;\n    }\n\n    if (oBlockList.length == 1) {\n        return oBlockList[0].buffer;\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = oBlockList[i];\n            arrayCopy(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n}\n\nif (typeof(module) !== 'undefined') {\n  module.exports = {\n    inflateBuffer: jszlib_inflate_buffer,\n    arrayCopy: arrayCopy\n  };\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"sourceRoot":"/source/"}